{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/tracker/BaseTracker.js","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/./src/core/GameProcessor.js","webpack://chessalyzer/./src/core/Chessalyzer.js","webpack://chessalyzer/./src/core/ChessBoard.js","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"cluster\"","webpack://chessalyzer/./src/tracker/PieceTrackerBase.js","webpack://chessalyzer/./src/tracker/TileTrackerBase.js","webpack://chessalyzer/./src/tracker/GameTrackerBase.js","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/./src/core/Processor.worker.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","performance","require","BaseTracker","constructor","type","this","profilingActive","time","t0","undefined","track","Error","analyze","data","now","LineByLineReader","EventEmitter","files","cluster","MoveData","san","player","piece","castles","takes","promotesTo","from","to","GameProcessor","super","board","ChessBoard","currentMove","activePlayer","cntMoves","cntGames","gameAnalyzers","moveAnalyzers","config","cfg","hasFilter","filter","Infinity","attachAnalyzers","analyzers","forEach","a","push","path","analyzer","batchSize","nThreads","Promise","resolve","cntGameAnalyzer","gameAnalyzerStore","moveAnalyzerStore","analyzerNames","readerFinished","customPath","checkAllWorkersFinished","keys","workers","length","finish","forkWorker","games","w","fork","send","on","msg","addTrackerData","gameTracker","moveTracker","nMoves","add","kill","setupMaster","exec","__dirname","checkConfig","game","lr","skipEmptyLines","err","console","log","line","pause","startsWith","match","moves","replace","split","slice","close","end","resume","nEndForks","Math","ceil","processPGN","refreshRate","cntGameAnalyers","reject","processLine","processGame","emit","parseMove","move","reset","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","includes","parseInt","indexOf","tiles","pos","tarRow","tarCol","coords","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","color","obstructed1","obstructed2","j","row1","col1","row2","col2","checkCheck","opColor","king","kingPos","isInCheck","diff","checkFor","abs","srcTilePiece","tarTilePiece","obstructed","row","col","square","temp","fs","pawnTemplate","pieceTemplate","Chessalyzer","callback","fun","rate","analyzerArray","Array","isArray","gameProcessor","gameCnt","header","t1","tdiff","round","mps","processPGNMultiCore","writeFile","JSON","stringify","error","parse","readFileSync","optData","sqrCoords","sqrAlg","algebraicToCoords","coordsToAlgebraic","sqrData","alg","getStartingPiece","map","max","min","dataRow","loopSqrCoords","loopSqrData","data1","data2","map0","generateHeatmap","map1","b","sqr","Tracker","Game","GameTracker","Piece","PieceTracker","Tile","TileTracker","Base","ChessPiece","currRow","defaultTiles","arr","moveData","castle","tarKingCol","srcRookCol","tarRookCol","rowArray","PieceTrackerBase","val","tracker","pawn","pawn2","piece2","processTakes","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","lastMovedOn","TileTrackerBase","cntMovesGame","cntMovesTotal","resetCurrentPiece","hasPiece","currentPiece","processMove","rook","addOccupation","opPlayer","toAdd","GameTrackerBase","wins","ECO","Result","sort","reduce","accumulator","currentValue","process","TrackerList","proc","TrackerListCustom","__non_webpack_require__"],"mappings":"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","file":"worker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.profilingActive = false;\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tanalyze(data) {\n\t\tif (this.profilingActive) this.t0 = performance.now();\n\t\tthis.track(data);\n\t\tif (this.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","module.exports = require(\"perf_hooks\");","/* eslint-disable no-inner-declarations */\nimport ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nconst cluster = require('cluster');\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\treturn cfg;\n\t}\n\n\tattachAnalyzers(analyzers) {\n\t\tanalyzers.forEach(a => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Main analysis function for multithreading. Replays every game in the file and tracks statistics\n\t * @param {string} path Path to the PGN file.\n\t * @param {Function} config.filter - Filter function for selecting games\n\t * @param {Number} config.cntGames - Max amount of games to process\n\t * @param {Array<object>} analyzer An array of tracker objects. The data in the\n\t *  analyzers is processed by reference.\n\t * @param {number} batchSize Amount of games every worker shall process.\n\t * @param {number} nThreads Amount of parallel threads that are started, when\n\t * batchSize * nThreads games have been read in.\n\t * @returns {Promise}\n\t */\n\tstatic processPGNMultiCore(path, config, analyzer, batchSize, nThreads) {\n\t\treturn new Promise(resolve => {\n\t\t\tlet cntGameAnalyzer = 0;\n\t\t\tconst gameAnalyzerStore = [];\n\t\t\tconst moveAnalyzerStore = [];\n\t\t\tconst analyzerNames = [];\n\t\t\tlet cntGames = 0;\n\t\t\tlet cntMoves = 0;\n\t\t\tlet readerFinished = false;\n\t\t\tlet customPath = '';\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tcluster.setupMaster({\n\t\t\t\texec: `${__dirname}/worker.js`\n\t\t\t});\n\n\t\t\t// split game type trackers and move type trackers\n\t\t\tanalyzer.forEach(a => {\n\t\t\t\tif (a.type === 'game') {\n\t\t\t\t\tcntGameAnalyzer += 1;\n\t\t\t\t\tgameAnalyzerStore.push(a);\n\t\t\t\t} else if (a.type === 'move') {\n\t\t\t\t\tmoveAnalyzerStore.push(a);\n\t\t\t\t}\n\t\t\t\tanalyzerNames.push(a.constructor.name);\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(a, 'path')) {\n\t\t\t\t\tcustomPath = a.path;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// checks if all games have been processed\n\t\t\tfunction checkAllWorkersFinished() {\n\t\t\t\tif (\n\t\t\t\t\tObject.keys(cluster.workers).length === 0 &&\n\t\t\t\t\treaderFinished\n\t\t\t\t) {\n\t\t\t\t\t// call finish function for each tracker\n\t\t\t\t\tanalyzer.forEach(a => {\n\t\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\t\ta.finish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tcntGames,\n\t\t\t\t\t\tcntMoves\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// adds the tracker data of one worker to the master tracker\n\t\t\tfunction addTrackerData(gameTracker, moveTracker, nMoves) {\n\t\t\t\tfor (let i = 0; i < gameAnalyzerStore.length; i += 1) {\n\t\t\t\t\tgameAnalyzerStore[i].add(gameTracker[i]);\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < moveAnalyzerStore.length; i += 1) {\n\t\t\t\t\tmoveAnalyzerStore[i].add(moveTracker[i]);\n\t\t\t\t}\n\t\t\t\tcntMoves += nMoves;\n\t\t\t}\n\n\t\t\t// creates a new worker, that will process an array of games\n\t\t\tfunction forkWorker(games) {\n\t\t\t\tconst w = cluster.fork();\n\n\t\t\t\t// send data to worker\n\t\t\t\tw.send({\n\t\t\t\t\tgames,\n\t\t\t\t\tcustomPath,\n\t\t\t\t\tanalyzerNames\n\t\t\t\t});\n\n\t\t\t\t// on worker finish\n\t\t\t\tw.on('message', msg => {\n\t\t\t\t\taddTrackerData(\n\t\t\t\t\t\tmsg.gameAnalyzers,\n\t\t\t\t\t\tmsg.moveAnalyzers,\n\t\t\t\t\t\tmsg.cntMoves\n\t\t\t\t\t);\n\n\t\t\t\t\tw.kill();\n\n\t\t\t\t\t// if all workers finished, resolve promise\n\t\t\t\t\tcheckAllWorkersFinished();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\t\tlet games = [];\n\t\t\tlet game = {};\n\n\t\t\tconst lr = new LineByLineReader(path, {\n\t\t\t\tskipEmptyLines: true\n\t\t\t});\n\n\t\t\tlr.on('error', err => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\n\t\t\tlr.on('line', line => {\n\t\t\t\tlr.pause();\n\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyzer > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tcntGames += 1;\n\t\t\t\t\t\tgames.push(game);\n\n\t\t\t\t\t\tif (cntGames % (batchSize * nThreads) === 0) {\n\t\t\t\t\t\t\tfor (let i = 0; i < nThreads; i += 1) {\n\t\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgames = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tif (games.length > 0) {\n\t\t\t\t\tif (games.length > batchSize) {\n\t\t\t\t\t\tconst nEndForks = Math.ceil(games.length / batchSize);\n\t\t\t\t\t\tfor (let i = 0; i < nEndForks; i += 1) {\n\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tforkWorker(games);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treaderFinished = true;\n\t\t\t\tcheckAllWorkersFinished();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tthis.attachAnalyzers(analyzers);\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = line => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', line => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\n\t\t\t\t// call finish routine for each analyzer\n\t\t\t\tthis.gameAnalyzers.forEach(a => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.moveAnalyzers.forEach(a => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresolve({ cntGames: this.cntGames, cntMoves: this.cntMoves });\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach(a => {\n\t\t\t\ta.analyze(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach(a => {\n\t\t\ta.analyze(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t * the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tconsole.log(this.cntGames);\n\t\t\tconsole.log(this.currentMove);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.kingPos[color];\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from '../tracker/PieceTrackerBase';\nimport TileTracker from '../tracker/TileTrackerBase';\nimport GameTracker from '../tracker/GameTrackerBase';\nimport BaseTracker from '../tracker/BaseTracker';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the singlethreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Number} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic async startBatch(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\t// callback handler\n\t\tgameProcessor.on('status', gameCnt => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await gameProcessor.processPGN(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tcallback.rate\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${\n\t\t\t\theader.cntMoves\n\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\treturn header;\n\t}\n\n\t/**\n\t * Starts the multithreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Numer} [nCores = -1] Numbers of threads to use. Is limited to the max. amount\n\t *  of threads of the running machine.\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @returns {Promise}\n\t */\n\tstatic async startBatchMultiCore(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tbatchSize = 8000,\n\t\tnThreads = 1\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await GameProcessor.processPGNMultiCore(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tbatchSize,\n\t\t\tnThreads\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${\n\t\t\t\theader.cntMoves\n\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\theader.mps = mps;\n\t\treturn header;\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), err => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {(String|Array)} square - The square the data shall be generated for.\n\t * For example, if you wanted to know how often a specific piece was on a specific tile,\n\t * you would pass the identifier of the tile to the function, e.g. \"a2\" or [7,1].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * data.\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tlet sqrCoords;\n\t\tlet sqrAlg;\n\n\t\t// square input type 'a2'\n\t\tif (typeof square === 'string') {\n\t\t\tsqrCoords = GameProcessor.algebraicToCoords(square);\n\t\t\tsqrAlg = square;\n\n\t\t\t// input type [6,0]\n\t\t} else {\n\t\t\tsqrCoords = square;\n\t\t\tsqrAlg = GameProcessor.coordsToAlgebraic(square);\n\t\t}\n\n\t\tconst startingPiece = Chessalyzer.getStartingPiece(sqrCoords);\n\t\tconst sqrData = {\n\t\t\talg: sqrAlg,\n\t\t\tcoords: sqrCoords,\n\t\t\tpiece: startingPiece\n\t\t};\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst loopSqrCoords = [i, j];\n\t\t\t\tconst loopSqrAlg = GameProcessor.coordsToAlgebraic(\n\t\t\t\t\tloopSqrCoords\n\t\t\t\t);\n\t\t\t\tconst loopPiece = Chessalyzer.getStartingPiece(loopSqrCoords);\n\t\t\t\tconst loopSqrData = {\n\t\t\t\t\talg: loopSqrAlg,\n\t\t\t\t\tcoords: loopSqrCoords,\n\t\t\t\t\tpiece: loopPiece\n\t\t\t\t};\n\n\t\t\t\tdataRow[j] = fun(data, sqrData, loopSqrData, optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks is calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {(String|Array)} square - The square the data shall be generated for. Notation\n\t * can be 'a1' or [7,0].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link generateHeatmap} for a more detailed description.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(data1, data2, square, fun, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic getStartingPiece(sqr) {\n\t\tlet color = '';\n\t\tlet name = '';\n\t\tif (sqr[0] === 0) {\n\t\t\tcolor = 'b';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 1) {\n\t\t\tcolor = 'b';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 6) {\n\t\t\tcolor = 'w';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 7) {\n\t\t\tcolor = 'w';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t}\n\n\t\treturn { color, name };\n\t}\n}\n\nChessalyzer.Tracker = {\n\tGame: GameTracker,\n\tPiece: PieceTracker,\n\tTile: TileTracker,\n\tBase: BaseTracker\n};\n\nexport default Chessalyzer;\n","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t\tthis.defaultTiles = this.tiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// castles\n\t\tif (moveData.castles !== '') {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// takes\n\t\t\tif ('pos' in moveData.takes) {\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// moves\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo !== '') {\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tmoveData.promotesTo,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (moveData.san.substring(0, 1) === 'K') {\n\t\t\t\tthis.kingPos[moveData.player] = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\t\tthis.tiles[row][srcRookCol] = null;\n\t\tthis.kingPos[player] = [row, tarKingCol];\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.color + piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('...');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","module.exports = require(\"line-by-line\");","module.exports = require(\"events\");","module.exports = require(\"cluster\");","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach(key => {\n\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\n\t\tpawnTemplate.forEach(pawn => {\n\t\t\tpieceTemplate.forEach(piece => {\n\t\t\t\tthis.w[pawn][piece] += tracker.w[pawn][piece];\n\t\t\t\tthis.b[pawn][piece] += tracker.b[pawn][piece];\n\t\t\t});\n\t\t\tpawnTemplate.forEach(pawn2 => {\n\t\t\t\tthis.w[pawn][pawn2] += tracker.w[pawn][pawn2];\n\t\t\t\tthis.b[pawn][pawn2] += tracker.b[pawn][pawn2];\n\t\t\t});\n\t\t});\n\t\tpieceTemplate.forEach(piece => {\n\t\t\tpieceTemplate.forEach(piece2 => {\n\t\t\t\tthis.w[piece][piece2] += tracker.w[piece][piece2];\n\t\t\t\tthis.b[piece][piece2] += tracker.b[piece][piece2];\n\t\t\t});\n\t\t\tpawnTemplate.forEach(pawn => {\n\t\t\t\tthis.w[piece][pawn] += tracker.w[piece][pawn];\n\t\t\t\tthis.b[piece][pawn] += tracker.b[piece][pawn];\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (piece.length > 1 && takes.piece.length > 1) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass Piece {\n\tconstructor(piece, color) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.lastMovedOn = 0;\n\t}\n}\n\nclass TileTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.cntMovesGame = 0;\n\t\tthis.cntMovesTotal = 0;\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\t\tthis.cntMovesGame += tracker.cntMovesGame;\n\t\tthis.cntMovesTotal += tracker.cntMovesTotal;\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].b.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].b.movedTo;\n\t\t\t\tthis.tiles[row][col].w.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].w.movedTo;\n\n\t\t\t\tthis.tiles[row][col].b.wasOn += tracker.tiles[row][col].b.wasOn;\n\t\t\t\tthis.tiles[row][col].w.wasOn += tracker.tiles[row][col].w.wasOn;\n\n\t\t\t\tthis.tiles[row][col].b.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.killedOn;\n\t\t\t\tthis.tiles[row][col].w.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.killedOn;\n\n\t\t\t\tthis.tiles[row][col].b.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.wasKilledOn;\n\t\t\t\tthis.tiles[row][col].w.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.wasKilledOn;\n\n\t\t\t\tpawnTemplate.forEach(piece => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\n\t\t\t\tpieceTemplate.forEach(piece => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tresetCurrentPiece(row, col) {\n\t\tlet color;\n\t\tlet piece;\n\t\tlet hasPiece = false;\n\n\t\tif (row === 0) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 1) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 6) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 7) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t}\n\n\t\tif (hasPiece) {\n\t\t\tthis.tiles[row][col].currentPiece = new Piece(piece, color);\n\t\t} else {\n\t\t\tthis.tiles[row][col].currentPiece = null;\n\t\t}\n\t}\n\n\ttrack(moveData) {\n\t\tconst { to } = moveData;\n\t\tconst { from } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\tthis.processMove(from, to, player, piece);\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tlet srcRookCol = 7;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\tsrcRookCol = 0;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, 4], [row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove(\n\t\t\t\t[row, srcRookCol],\n\t\t\t\t[row, tarRookCol],\n\t\t\t\tplayer,\n\t\t\t\trook\n\t\t\t);\n\n\t\t\t// game end\n\t\t} else {\n\t\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t\tconst { currentPiece } = this.tiles[row][col];\n\t\t\t\t\tif (currentPiece !== null) {\n\t\t\t\t\t\tthis.addOccupation([row, col]);\n\t\t\t\t\t}\n\t\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cntMovesTotal += this.cntMovesGame;\n\t\t\tthis.cntMovesGame = 0;\n\t\t}\n\t}\n\n\tprocessMove(from, to, player, piece) {\n\t\tif (piece.length > 1) {\n\t\t\tthis.addOccupation(from);\n\n\t\t\tthis.tiles[to[0]][to[1]].currentPiece = this.tiles[from[0]][\n\t\t\t\tfrom[1]\n\t\t\t].currentPiece;\n\t\t\tthis.tiles[to[0]][\n\t\t\t\tto[1]\n\t\t\t].currentPiece.lastMovedOn = this.cntMovesGame;\n\n\t\t\tthis.tiles[from[0]][from[1]].currentPiece = null;\n\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takenPiece.length > 1) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\n\t\t\tthis.addOccupation(pos);\n\t\t\tthis.tiles[pos[0]][pos[1]].currentPiece = null;\n\t\t}\n\n\t\tif (takingPiece.length > 1) {\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t}\n\t}\n\n\taddOccupation(pos) {\n\t\tconst { currentPiece } = this.tiles[pos[0]][pos[1]];\n\t\tconst toAdd = this.cntMovesGame - currentPiece.lastMovedOn;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color].wasOn += toAdd;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color][\n\t\t\tcurrentPiece.piece\n\t\t].wasOn += toAdd;\n\t}\n}\n\nexport default TileTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nclass GameTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t\tthis.ECO = {};\n\t}\n\n\tadd(tracker) {\n\t\tthis.wins[0] += tracker.wins[0];\n\t\tthis.wins[1] += tracker.wins[1];\n\t\tthis.wins[2] += tracker.wins[2];\n\t\tthis.cntGames += tracker.cntGames;\n\t\tthis.time += tracker.time;\n\n\t\tObject.keys(tracker.ECO).forEach(key => {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, key)) {\n\t\t\t\tthis.ECO[key] += tracker.ECO[key];\n\t\t\t} else {\n\t\t\t\tthis.ECO[key] = tracker.ECO[key];\n\t\t\t}\n\t\t});\n\t}\n\n\ttrack(game) {\n\t\tthis.cntGames += 1;\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, game.ECO)) {\n\t\t\tthis.ECO[game.ECO] += 1;\n\t\t} else {\n\t\t\tthis.ECO[game.ECO] = 1;\n\t\t}\n\t}\n\n\tfinish() {\n\t\t// sort keys\n\t\tthis.ECO = Object.keys(this.ECO)\n\t\t\t.sort()\n\t\t\t.reduce((accumulator, currentValue) => {\n\t\t\t\taccumulator[currentValue] = this.ECO[currentValue];\n\t\t\t\treturn accumulator;\n\t\t\t}, {});\n\t}\n}\n\nexport default GameTrackerBase;\n","module.exports = require(\"fs\");","/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\n/* eslint-disable no-undef */\n\nimport GameProcessor from './GameProcessor';\nimport Chessalyzer from './Chessalyzer';\n\nconst { Tracker } = Chessalyzer;\n\nprocess.on('message', msg => {\n\tconst TrackerList = {};\n\tconst proc = new GameProcessor();\n\n\tObject.keys(Tracker).forEach(key => {\n\t\tTrackerList[Tracker[key].name] = Tracker[key];\n\t});\n\n\t// merge available Trackers\n\tif (msg.customPath !== '') {\n\t\tconst TrackerListCustom = __non_webpack_require__(msg.customPath);\n\n\t\tObject.keys(TrackerListCustom).forEach(key => {\n\t\t\tTrackerList[TrackerListCustom[key].name] = TrackerListCustom[key];\n\t\t});\n\t}\n\n\t// select needed analyzers\n\tconst analyzer = [];\n\tmsg.analyzerNames.forEach(name => {\n\t\tanalyzer.push(new TrackerList[name]());\n\t});\n\n\tproc.attachAnalyzers(analyzer);\n\n\t// analyze each game\n\tmsg.games.forEach(game => {\n\t\tproc.processGame(game);\n\t});\n\n\t// send result of batch to master\n\tprocess.send({\n\t\tcntMoves: proc.cntMoves,\n\t\tgameAnalyzers: proc.gameAnalyzers,\n\t\tmoveAnalyzers: proc.moveAnalyzers\n\t});\n});\n"],"sourceRoot":""}