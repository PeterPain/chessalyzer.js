{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/./src/core/ChessBoard.js","webpack://chessalyzer/./src/core/Chessalyzer.js","webpack://chessalyzer/./src/core/GameProcessor.js","webpack://chessalyzer/./src/core/Processor.worker.js","webpack://chessalyzer/./src/tracker/BaseTracker.js","webpack://chessalyzer/./src/tracker/GameTrackerBase.js","webpack://chessalyzer/./src/tracker/PieceTrackerBase.js","webpack://chessalyzer/./src/tracker/TileTrackerBase.js","webpack://chessalyzer/external \"chalk\"","webpack://chessalyzer/external \"cluster\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/webpack/startup"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","global","pawnTemplate","pieceTemplate","ChessPiece","constructor","name","color","this","ChessBoard","tiles","Array","row","currRow","col","defaultTiles","map","arr","slice","kingPos","w","b","move","moveData","from","to","castles","castle","player","takes","pos","promotesTo","san","substring","scrKingCol","tarKingCol","srcRookCol","tarRookCol","reset","printPosition","rowArray","piece","push","console","log","performance","require","chalk","fs","Chessalyzer","path","analyzer","cfg","callback","fun","rate","analyzerArray","isArray","gameProcessor","GameProcessor","on","gameCnt","t0","now","header","processPGN","t1","tdiff","Math","round","mps","cntMoves","cntGames","batchSize","nThreads","processPGNMultiCore","data","writeFile","JSON","stringify","err","error","parse","readFileSync","square","optData","sqrCoords","sqrAlg","algebraicToCoords","coordsToAlgebraic","sqrData","alg","coords","getStartingPiece","max","min","i","dataRow","j","loopSqrCoords","loopSqrData","data1","data2","map0","generateHeatmap","map1","a","bgColor","length","cnt","alpha","sqrt","toFixed","colorOut","process","stdout","write","bgRgb","sqr","Tracker","Game","GameTracker","Piece","PieceTracker","Tile","TileTracker","Base","BaseTracker","LineByLineReader","EventEmitter","files","cluster","MoveData","super","board","currentMove","activePlayer","gameAnalyzers","moveAnalyzers","config","hasFilter","Object","prototype","hasOwnProperty","call","filter","Infinity","attachAnalyzers","analyzers","forEach","type","Promise","resolve","cntGameAnalyzer","gameAnalyzerStore","moveAnalyzerStore","analyzerNames","readerFinished","customPath","checkAllWorkersFinished","keys","workers","finish","addTrackerData","gameTracker","moveTracker","nMoves","add","forkWorker","games","fork","send","msg","kill","setupMaster","exec","__dirname","checkConfig","game","lr","skipEmptyLines","line","pause","startsWith","key","match","value","moves","replace","split","close","end","resume","nEndForks","ceil","refreshRate","cntGameAnalyers","reject","processLine","processGame","emit","parseMove","analyze","rawMove","token","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","includes","parseInt","indexOf","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","isInCheck","diff","checkFor","abs","srcTilePiece","tarTilePiece","obstructed","temp","TrackerList","proc","TrackerListCustom","__non_webpack_require__","profilingActive","time","undefined","track","Error","GameTrackerBase","wins","ECO","tracker","Result","sort","reduce","accumulator","currentValue","PieceTrackerBase","val","pawn","pawn2","piece2","processTakes","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","lastMovedOn","TileTrackerBase","cntMovesGame","cntMovesTotal","resetCurrentPiece","hasPiece","currentPiece","processMove","rook","addOccupation","opPlayer","toAdd","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"worker.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn ","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t\tthis.defaultTiles = this.tiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// castles\n\t\tif (moveData.castles !== '') {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// takes\n\t\t\tif ('pos' in moveData.takes) {\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// moves\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo !== '') {\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tmoveData.promotesTo,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (moveData.san.substring(0, 1) === 'K') {\n\t\t\t\tthis.kingPos[moveData.player] = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\t\tthis.tiles[row][srcRookCol] = null;\n\t\tthis.kingPos[player] = [row, tarKingCol];\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.color + piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('...');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from '../tracker/PieceTrackerBase';\nimport TileTracker from '../tracker/TileTrackerBase';\nimport GameTracker from '../tracker/GameTrackerBase';\nimport BaseTracker from '../tracker/BaseTracker';\n\nconst { performance } = require('perf_hooks');\nconst chalk = require('chalk');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the singlethreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Number} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic async startBatch(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\t// callback handler\n\t\tgameProcessor.on('status', (gameCnt) => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await gameProcessor.processPGN(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tcallback.rate\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${header.cntMoves} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\treturn header;\n\t}\n\n\t/**\n\t * Starts the multithreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Numer} [nCores = -1] Numbers of threads to use. Is limited to the max. amount\n\t *  of threads of the running machine.\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @returns {Promise}\n\t */\n\tstatic async startBatchMultiCore(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tbatchSize = 8000,\n\t\tnThreads = 1\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await GameProcessor.processPGNMultiCore(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tbatchSize,\n\t\t\tnThreads\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${header.cntMoves} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\theader.mps = mps;\n\t\treturn header;\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {(String|Array)} square - The square the data shall be generated for.\n\t * For example, if you wanted to know how often a specific piece was on a specific tile,\n\t * you would pass the identifier of the tile to the function, e.g. \"a2\" or [7,1].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * data.\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Object} Array with 3 entries:\n\t * <ol>\n\t * <li>map: 8x8 Array containing the heat map values for each tile</li>\n\t * <li>min: The minimum value in the heatmap.</li>\n\t * <li>max: The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tlet sqrCoords;\n\t\tlet sqrAlg;\n\n\t\t// square input type 'a2'\n\t\tif (typeof square === 'string') {\n\t\t\tsqrCoords = GameProcessor.algebraicToCoords(square);\n\t\t\tsqrAlg = square;\n\n\t\t\t// input type [6,0]\n\t\t} else {\n\t\t\tsqrCoords = square;\n\t\t\tsqrAlg = GameProcessor.coordsToAlgebraic(square);\n\t\t}\n\n\t\tconst startingPiece = Chessalyzer.getStartingPiece(sqrCoords);\n\t\tconst sqrData = {\n\t\t\talg: sqrAlg,\n\t\t\tcoords: sqrCoords,\n\t\t\tpiece: startingPiece\n\t\t};\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst loopSqrCoords = [i, j];\n\t\t\t\tconst loopSqrAlg = GameProcessor.coordsToAlgebraic(\n\t\t\t\t\tloopSqrCoords\n\t\t\t\t);\n\t\t\t\tconst loopPiece = Chessalyzer.getStartingPiece(loopSqrCoords);\n\t\t\t\tconst loopSqrData = {\n\t\t\t\t\talg: loopSqrAlg,\n\t\t\t\t\tcoords: loopSqrCoords,\n\t\t\t\t\tpiece: loopPiece\n\t\t\t\t};\n\n\t\t\t\tdataRow[j] = fun(data, sqrData, loopSqrData, optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn { map, min, max };\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks is calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {(String|Array)} square - The square the data shall be generated for. Notation\n\t * can be 'a1' or [7,0].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link generateHeatmap} for a more detailed description.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Object} Object with 3 entries:\n\t * <ol>\n\t * <li>map: 8x8 Array containing the heat map values for each tile</li>\n\t * <li>min: The minimum value in the heatmap.</li>\n\t * <li>max: The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(data1, data2, square, fun, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn { map, min, max };\n\t}\n\n\t/**\n\t * Prints a heatmap to the terminal\n\t * @param {Array} map - The heatmap data. An (8x8) Array containing values.\n\t * @param {Number} min - The minimum value in map.\n\t * @param {Number} max - The maximum value in map.\n\t */\n\tstatic printHeatmap(map, min, max) {\n\t\tconst color = [255, 128, 0];\n\t\tconst bgColor = [255, 255, 255];\n\t\tfor (let i = 0; i < map.length; i += 1) {\n\t\t\tfor (let cnt = 0; cnt < 2; cnt += 1) {\n\t\t\t\tfor (let j = 0; j < map[i].length; j += 1) {\n\t\t\t\t\tconst alpha = Math.sqrt(map[i][j] / max).toFixed(2);\n\t\t\t\t\t// const value = map[i][j].toFixed(2);\n\t\t\t\t\tconst colorOut = [\n\t\t\t\t\t\tMath.round(color[0] * alpha + (1 - alpha) * bgColor[0]),\n\t\t\t\t\t\tMath.round(color[1] * alpha + (1 - alpha) * bgColor[1]),\n\t\t\t\t\t\tMath.round(color[2] * alpha + (1 - alpha) * bgColor[2])\n\t\t\t\t\t];\n\n\t\t\t\t\tprocess.stdout.write(\n\t\t\t\t\t\tchalk.bgRgb(\n\t\t\t\t\t\t\tcolorOut[0],\n\t\t\t\t\t\t\tcolorOut[1],\n\t\t\t\t\t\t\tcolorOut[2]\n\t\t\t\t\t\t)('    ')\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tprocess.stdout.write('\\n');\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic getStartingPiece(sqr) {\n\t\tlet color = '';\n\t\tlet name = '';\n\t\tif (sqr[0] === 0) {\n\t\t\tcolor = 'b';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 1) {\n\t\t\tcolor = 'b';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 6) {\n\t\t\tcolor = 'w';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 7) {\n\t\t\tcolor = 'w';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t}\n\n\t\treturn { color, name };\n\t}\n}\n\nChessalyzer.Tracker = {\n\tGame: GameTracker,\n\tPiece: PieceTracker,\n\tTile: TileTracker,\n\tBase: BaseTracker\n};\n\nexport default Chessalyzer;\n","/* eslint-disable no-inner-declarations */\nimport ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nconst cluster = require('cluster');\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\treturn cfg;\n\t}\n\n\tattachAnalyzers(analyzers) {\n\t\tanalyzers.forEach(a => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Main analysis function for multithreading. Replays every game in the file and tracks statistics\n\t * @param {string} path Path to the PGN file.\n\t * @param {Function} config.filter - Filter function for selecting games\n\t * @param {Number} config.cntGames - Max amount of games to process\n\t * @param {Array<object>} analyzer An array of tracker objects. The data in the\n\t *  analyzers is processed by reference.\n\t * @param {number} batchSize Amount of games every worker shall process.\n\t * @param {number} nThreads Amount of parallel threads that are started, when\n\t * batchSize * nThreads games have been read in.\n\t * @returns {Promise}\n\t */\n\tstatic processPGNMultiCore(path, config, analyzer, batchSize, nThreads) {\n\t\treturn new Promise(resolve => {\n\t\t\tlet cntGameAnalyzer = 0;\n\t\t\tconst gameAnalyzerStore = [];\n\t\t\tconst moveAnalyzerStore = [];\n\t\t\tconst analyzerNames = [];\n\t\t\tlet cntGames = 0;\n\t\t\tlet cntMoves = 0;\n\t\t\tlet readerFinished = false;\n\t\t\tlet customPath = '';\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tcluster.setupMaster({\n\t\t\t\texec: `${__dirname}/worker.js`\n\t\t\t});\n\n\t\t\t// split game type trackers and move type trackers\n\t\t\tanalyzer.forEach(a => {\n\t\t\t\tif (a.type === 'game') {\n\t\t\t\t\tcntGameAnalyzer += 1;\n\t\t\t\t\tgameAnalyzerStore.push(a);\n\t\t\t\t} else if (a.type === 'move') {\n\t\t\t\t\tmoveAnalyzerStore.push(a);\n\t\t\t\t}\n\t\t\t\tanalyzerNames.push(a.constructor.name);\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(a, 'path')) {\n\t\t\t\t\tcustomPath = a.path;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// checks if all games have been processed\n\t\t\tfunction checkAllWorkersFinished() {\n\t\t\t\tif (\n\t\t\t\t\tObject.keys(cluster.workers).length === 0 &&\n\t\t\t\t\treaderFinished\n\t\t\t\t) {\n\t\t\t\t\t// call finish function for each tracker\n\t\t\t\t\tanalyzer.forEach(a => {\n\t\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\t\ta.finish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tcntGames,\n\t\t\t\t\t\tcntMoves\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// adds the tracker data of one worker to the master tracker\n\t\t\tfunction addTrackerData(gameTracker, moveTracker, nMoves) {\n\t\t\t\tfor (let i = 0; i < gameAnalyzerStore.length; i += 1) {\n\t\t\t\t\tgameAnalyzerStore[i].add(gameTracker[i]);\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < moveAnalyzerStore.length; i += 1) {\n\t\t\t\t\tmoveAnalyzerStore[i].add(moveTracker[i]);\n\t\t\t\t}\n\t\t\t\tcntMoves += nMoves;\n\t\t\t}\n\n\t\t\t// creates a new worker, that will process an array of games\n\t\t\tfunction forkWorker(games) {\n\t\t\t\tconst w = cluster.fork();\n\n\t\t\t\t// send data to worker\n\t\t\t\tw.send({\n\t\t\t\t\tgames,\n\t\t\t\t\tcustomPath,\n\t\t\t\t\tanalyzerNames\n\t\t\t\t});\n\n\t\t\t\t// on worker finish\n\t\t\t\tw.on('message', msg => {\n\t\t\t\t\taddTrackerData(\n\t\t\t\t\t\tmsg.gameAnalyzers,\n\t\t\t\t\t\tmsg.moveAnalyzers,\n\t\t\t\t\t\tmsg.cntMoves\n\t\t\t\t\t);\n\n\t\t\t\t\tw.kill();\n\n\t\t\t\t\t// if all workers finished, resolve promise\n\t\t\t\t\tcheckAllWorkersFinished();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\t\tlet games = [];\n\t\t\tlet game = {};\n\n\t\t\tconst lr = new LineByLineReader(path, {\n\t\t\t\tskipEmptyLines: true\n\t\t\t});\n\n\t\t\tlr.on('error', err => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\n\t\t\tlr.on('line', line => {\n\t\t\t\tlr.pause();\n\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyzer > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tcntGames += 1;\n\t\t\t\t\t\tgames.push(game);\n\n\t\t\t\t\t\tif (cntGames % (batchSize * nThreads) === 0) {\n\t\t\t\t\t\t\tfor (let i = 0; i < nThreads; i += 1) {\n\t\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgames = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tif (games.length > 0) {\n\t\t\t\t\tif (games.length > batchSize) {\n\t\t\t\t\t\tconst nEndForks = Math.ceil(games.length / batchSize);\n\t\t\t\t\t\tfor (let i = 0; i < nEndForks; i += 1) {\n\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tforkWorker(games);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treaderFinished = true;\n\t\t\t\tcheckAllWorkersFinished();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tthis.attachAnalyzers(analyzers);\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = line => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', line => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\n\t\t\t\t// call finish routine for each analyzer\n\t\t\t\tthis.gameAnalyzers.forEach(a => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.moveAnalyzers.forEach(a => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresolve({ cntGames: this.cntGames, cntMoves: this.cntMoves });\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach(a => {\n\t\t\t\ta.analyze(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach(a => {\n\t\t\ta.analyze(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t * the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tconsole.log(this.cntGames);\n\t\t\tconsole.log(this.currentMove);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.kingPos[color];\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\n/* eslint-disable no-undef */\n\nimport GameProcessor from './GameProcessor';\nimport Chessalyzer from './Chessalyzer';\n\nconst { Tracker } = Chessalyzer;\n\nprocess.on('message', msg => {\n\tconst TrackerList = {};\n\tconst proc = new GameProcessor();\n\n\tObject.keys(Tracker).forEach(key => {\n\t\tTrackerList[Tracker[key].name] = Tracker[key];\n\t});\n\n\t// merge available Trackers\n\tif (msg.customPath !== '') {\n\t\tconst TrackerListCustom = __non_webpack_require__(msg.customPath);\n\n\t\tObject.keys(TrackerListCustom).forEach(key => {\n\t\t\tTrackerList[TrackerListCustom[key].name] = TrackerListCustom[key];\n\t\t});\n\t}\n\n\t// select needed analyzers\n\tconst analyzer = [];\n\tmsg.analyzerNames.forEach(name => {\n\t\tanalyzer.push(new TrackerList[name]());\n\t});\n\n\tproc.attachAnalyzers(analyzer);\n\n\t// analyze each game\n\tmsg.games.forEach(game => {\n\t\tproc.processGame(game);\n\t});\n\n\t// send result of batch to master\n\tprocess.send({\n\t\tcntMoves: proc.cntMoves,\n\t\tgameAnalyzers: proc.gameAnalyzers,\n\t\tmoveAnalyzers: proc.moveAnalyzers\n\t});\n});\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.profilingActive = false;\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tanalyze(data) {\n\t\tif (this.profilingActive) this.t0 = performance.now();\n\t\tthis.track(data);\n\t\tif (this.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","import BaseTracker from './BaseTracker';\n\nclass GameTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t\tthis.ECO = {};\n\t}\n\n\tadd(tracker) {\n\t\tthis.wins[0] += tracker.wins[0];\n\t\tthis.wins[1] += tracker.wins[1];\n\t\tthis.wins[2] += tracker.wins[2];\n\t\tthis.cntGames += tracker.cntGames;\n\t\tthis.time += tracker.time;\n\n\t\tObject.keys(tracker.ECO).forEach(key => {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, key)) {\n\t\t\t\tthis.ECO[key] += tracker.ECO[key];\n\t\t\t} else {\n\t\t\t\tthis.ECO[key] = tracker.ECO[key];\n\t\t\t}\n\t\t});\n\t}\n\n\ttrack(game) {\n\t\tthis.cntGames += 1;\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, game.ECO)) {\n\t\t\tthis.ECO[game.ECO] += 1;\n\t\t} else {\n\t\t\tthis.ECO[game.ECO] = 1;\n\t\t}\n\t}\n\n\tfinish() {\n\t\t// sort keys\n\t\tthis.ECO = Object.keys(this.ECO)\n\t\t\t.sort()\n\t\t\t.reduce((accumulator, currentValue) => {\n\t\t\t\taccumulator[currentValue] = this.ECO[currentValue];\n\t\t\t\treturn accumulator;\n\t\t\t}, {});\n\t}\n}\n\nexport default GameTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach(key => {\n\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\n\t\tpawnTemplate.forEach(pawn => {\n\t\t\tpieceTemplate.forEach(piece => {\n\t\t\t\tthis.w[pawn][piece] += tracker.w[pawn][piece];\n\t\t\t\tthis.b[pawn][piece] += tracker.b[pawn][piece];\n\t\t\t});\n\t\t\tpawnTemplate.forEach(pawn2 => {\n\t\t\t\tthis.w[pawn][pawn2] += tracker.w[pawn][pawn2];\n\t\t\t\tthis.b[pawn][pawn2] += tracker.b[pawn][pawn2];\n\t\t\t});\n\t\t});\n\t\tpieceTemplate.forEach(piece => {\n\t\t\tpieceTemplate.forEach(piece2 => {\n\t\t\t\tthis.w[piece][piece2] += tracker.w[piece][piece2];\n\t\t\t\tthis.b[piece][piece2] += tracker.b[piece][piece2];\n\t\t\t});\n\t\t\tpawnTemplate.forEach(pawn => {\n\t\t\t\tthis.w[piece][pawn] += tracker.w[piece][pawn];\n\t\t\t\tthis.b[piece][pawn] += tracker.b[piece][pawn];\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (piece.length > 1 && takes.piece.length > 1) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass Piece {\n\tconstructor(piece, color) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.lastMovedOn = 0;\n\t}\n}\n\nclass TileTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.cntMovesGame = 0;\n\t\tthis.cntMovesTotal = 0;\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\t\tthis.cntMovesGame += tracker.cntMovesGame;\n\t\tthis.cntMovesTotal += tracker.cntMovesTotal;\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].b.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].b.movedTo;\n\t\t\t\tthis.tiles[row][col].w.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].w.movedTo;\n\n\t\t\t\tthis.tiles[row][col].b.wasOn += tracker.tiles[row][col].b.wasOn;\n\t\t\t\tthis.tiles[row][col].w.wasOn += tracker.tiles[row][col].w.wasOn;\n\n\t\t\t\tthis.tiles[row][col].b.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.killedOn;\n\t\t\t\tthis.tiles[row][col].w.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.killedOn;\n\n\t\t\t\tthis.tiles[row][col].b.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.wasKilledOn;\n\t\t\t\tthis.tiles[row][col].w.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.wasKilledOn;\n\n\t\t\t\tpawnTemplate.forEach(piece => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\n\t\t\t\tpieceTemplate.forEach(piece => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tresetCurrentPiece(row, col) {\n\t\tlet color;\n\t\tlet piece;\n\t\tlet hasPiece = false;\n\n\t\tif (row === 0) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 1) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 6) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 7) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t}\n\n\t\tif (hasPiece) {\n\t\t\tthis.tiles[row][col].currentPiece = new Piece(piece, color);\n\t\t} else {\n\t\t\tthis.tiles[row][col].currentPiece = null;\n\t\t}\n\t}\n\n\ttrack(moveData) {\n\t\tconst { to } = moveData;\n\t\tconst { from } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\tthis.processMove(from, to, player, piece);\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tlet srcRookCol = 7;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\tsrcRookCol = 0;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, 4], [row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove(\n\t\t\t\t[row, srcRookCol],\n\t\t\t\t[row, tarRookCol],\n\t\t\t\tplayer,\n\t\t\t\trook\n\t\t\t);\n\n\t\t\t// game end\n\t\t} else {\n\t\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t\tconst { currentPiece } = this.tiles[row][col];\n\t\t\t\t\tif (currentPiece !== null) {\n\t\t\t\t\t\tthis.addOccupation([row, col]);\n\t\t\t\t\t}\n\t\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cntMovesTotal += this.cntMovesGame;\n\t\t\tthis.cntMovesGame = 0;\n\t\t}\n\t}\n\n\tprocessMove(from, to, player, piece) {\n\t\tif (piece.length > 1) {\n\t\t\tthis.addOccupation(from);\n\n\t\t\tthis.tiles[to[0]][to[1]].currentPiece = this.tiles[from[0]][\n\t\t\t\tfrom[1]\n\t\t\t].currentPiece;\n\t\t\tthis.tiles[to[0]][\n\t\t\t\tto[1]\n\t\t\t].currentPiece.lastMovedOn = this.cntMovesGame;\n\n\t\t\tthis.tiles[from[0]][from[1]].currentPiece = null;\n\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takenPiece.length > 1) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\n\t\t\tthis.addOccupation(pos);\n\t\t\tthis.tiles[pos[0]][pos[1]].currentPiece = null;\n\t\t}\n\n\t\tif (takingPiece.length > 1) {\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t}\n\t}\n\n\taddOccupation(pos) {\n\t\tconst { currentPiece } = this.tiles[pos[0]][pos[1]];\n\t\tconst toAdd = this.cntMovesGame - currentPiece.lastMovedOn;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color].wasOn += toAdd;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color][\n\t\t\tcurrentPiece.piece\n\t\t].wasOn += toAdd;\n\t}\n}\n\nexport default TileTrackerBase;\n","module.exports = require(\"chalk\");;","module.exports = require(\"cluster\");;","module.exports = require(\"events\");;","module.exports = require(\"fs\");;","module.exports = require(\"line-by-line\");;","module.exports = require(\"perf_hooks\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(827);\n"],"sourceRoot":""}