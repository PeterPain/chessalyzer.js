{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/./src/ChessPiece.js","webpack://chessalyzer/./src/ChessTile.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"perf_hooks\""],"names":["pawnTemplate","pieceTemplate","ChessBoard","stats","cntMoves","cntGames","pieces","tiles","Array","row","currRow","col","push","initPiece","length","moveData","moves","takes","promotes","move","to","piece","from","color","alive","updateDeadCount","processMove","promotePiece","updateTileStats","toPiece","fromPiece","killPiece","killedPiece","updatePosition","i","reset","slice","resetPiece","initStats","coords","pieceType","rowArray","name","console","log","pos","updateOccupationStats","ChessPiece","promoted","defaultPos","logHistory","history","maxHistory","cntMoved","at","movedTo","killedByPiece","cntWasKilled","killedBy","cntHasKilled","killed","ChessTile","defaultPiece","cntHasPiece","white","black","wasOnTile","cntTakenPieces","require","performance","fs","Chessalyzer","dataStore","gameProcessor","path","cfg","bank","refreshRate","Promise","resolve","t0","now","processPGN","then","board","dataset","JSON","parse","stringify","t1","tdiff","Math","round","mps","writeFile","err","error","readFileSync","square","fun","algebraicToCoords","map","max","min","dataRow","j","bank1","bank2","data0","generateHeatmap","data1","a","b","list","val","toFixed","abs","sort","LineByLineReader","EventEmitter","files","GameProcessor","activePlayer","config","checkConfig","reject","lr","skipEmptyLines","game","processLine","line","startsWith","hasFilter","key","match","value","replace","split","filter","processGame","emit","close","end","resume","on","pause","parseMove","resetStats","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","castle","moveSan","direction","includes","parseInt","indexOf","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","isInCheck","diff","checkFor","srcTilePiece","tarTilePiece","obstructed","from1","from2","to1","to2","Object","prototype","hasOwnProperty","call","Infinity","temp"],"mappings":"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","file":"chessalyzer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import ChessTile from './ChessTile';\nimport ChessPiece from './ChessPiece';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Class that contains the board status and tracks statistics. */\nclass ChessBoard {\n\t/** Creates a new 8x8 Chessboard out of 64 {@link ChessTile}s and 32 {@link ChessPiece}s */\n\tconstructor() {\n\t\t/**\n\t\t * Tracks number of moves and games\n\t\t * @member {Object}\n\t\t */\n\t\tthis.stats = {\n\t\t\tcntMoves: 0,\n\t\t\tcntGames: 0\n\t\t};\n\n\t\t/**\n\t\t * Contains all pieces on the board\n\t\t * @member {ChessPiece[]}\n\t\t */\n\t\tthis.pieces = [];\n\n\t\t/**\n\t\t * 8x8 array of {@link ChessTile}s\n\t\t * @member {Array[]}\n\t\t */\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = new ChessTile();\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pieceTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pawnTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t}\n\n\t/**\n\t * Moves a piece from source to target. Automatically handles the events 'move',\n\t *  'take', 'en passant', 'castle' and 'promote'.\n\t * Use this function instead of {@link ChessBoard#processMove} to input a move to the board!\n\t * @param {Object} moveData\n\t * @param {Object[]} moveData.moves - An array containing up to 2 moves in the\n\t *  syntax {from: [], to: []}\n\t * @param {Boolean} moveData.takes - True if the move takes a piece\n\t * @param {String} moveData.promotes - Type of promoted piece in case of pawn promotion, else null\n\t */\n\tmove(moveData) {\n\t\tif (moveData !== null) {\n\t\t\tthis.stats.cntMoves += 1;\n\n\t\t\tconst { moves } = moveData;\n\t\t\tconst { takes } = moveData;\n\t\t\tconst { promotes } = moveData;\n\n\t\t\t// move\n\t\t\tif (moves.length === 1) {\n\t\t\t\tconst move = moves[0];\n\n\t\t\t\tswitch (takes) {\n\t\t\t\t\tcase true:\n\t\t\t\t\t\t// en passant\n\t\t\t\t\t\tif (this.tiles[move.to[0]][move.to[1]].piece === null) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.tiles[move.from[0]][move.from[1]].piece\n\t\t\t\t\t\t\t\t\t.color === 'white'\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] + 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece.alive = false;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] + 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece = null;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] + 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].updateDeadCount();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] - 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece.alive = false;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] - 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece = null;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] - 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].updateDeadCount();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.tiles[move.to[0]][\n\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t].updateDeadCount();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase false:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.processMove(move);\n\n\t\t\t\tif (promotes !== null) {\n\t\t\t\t\tthis.promotePiece(move.to, promotes);\n\t\t\t\t}\n\t\t\t\t// castle\n\t\t\t} else {\n\t\t\t\tthis.processMove(moves[0]);\n\t\t\t\tthis.processMove(moves[1]);\n\t\t\t}\n\n\t\t\tthis.updateTileStats();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the move commanded by {@link ChessBoard#move}. Don't call this function directly,\n\t *  use {@link ChessBoard#move} to input a move!\n\t * @private\n\t * @param {Object} move\n\t * @param {Number[]} move.from - Coordinates of start tile\n\t * @param {Number[]} move.to - Coordinates of target tile\n\t */\n\tprocessMove(move) {\n\t\t// takes?\n\t\tconst { from } = move;\n\t\tconst { to } = move;\n\t\tconst toPiece = this.tiles[to[0]][to[1]].piece;\n\t\tconst fromPiece = this.tiles[from[0]][from[1]].piece;\n\n\t\tif (toPiece !== null) {\n\t\t\ttoPiece.killPiece(fromPiece);\n\t\t\tfromPiece.killedPiece(toPiece);\n\t\t}\n\t\tthis.tiles[to[0]][to[1]].piece = fromPiece;\n\t\tthis.tiles[to[0]][to[1]].piece.updatePosition(to);\n\t\tthis.tiles[from[0]][from[1]].piece = null;\n\t}\n\n\t/** Resets the board to the default state: removes promoted pieces and puts the standard\n\t *  pieces back to their starting positions.\n\t *\n\t *  Does not reset the stats recorded. If you wish to reset the stats,\n\t *  call {@link ChessBoard#resetStats}. */\n\treset() {\n\t\tthis.stats.cntGames += 1;\n\t\t// reset the pieces to default\n\t\tfor (let i = 0; i < this.pieces.length; i += 1) {\n\t\t\tthis.pieces[i].reset();\n\t\t}\n\n\t\t// remove promoted pieces\n\t\tthis.pieces = this.pieces.slice(0, 32);\n\n\t\t// reset the tiles\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].resetPiece();\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Resets the stats recorded. */\n\tresetStats() {\n\t\t// reset the tiles\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].initStats();\n\t\t\t}\n\t\t}\n\n\t\t// reset the pieces to default\n\t\tfor (let i = 0; i < this.pieces.length; i += 1) {\n\t\t\tthis.pieces[i].initStats();\n\t\t}\n\n\t\tthis.stats.cntMoves = 0;\n\t\tthis.stats.cntGames = 0;\n\t}\n\n\t/**\n\t * Promotes a pawn to a piece.\n\t * @private\n\t * @param {Number[]} coords An array containing the row and column of the pawn to be promoted.\n\t * @param {String} pieceType Target piece type in SAN notation ('N', 'B', 'Q', 'R').\n\t */\n\tpromotePiece(coords, pieceType) {\n\t\t// change alive directly instead of killPiece to not update stats\n\t\tthis.tiles[coords[0]][coords[1]].piece.alive = false;\n\t\tthis.tiles[coords[0]][coords[1]].piece = null;\n\n\t\tthis.pieces.push(\n\t\t\tnew ChessPiece(pieceType, [coords[0], coords[1]], true)\n\t\t);\n\t\tthis.tiles[coords[0]][coords[1]].piece = this.pieces[\n\t\t\tthis.pieces.length - 1\n\t\t];\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst { piece } = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('..');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n\n\t/** Is called after each {@link ChessBoard#move} to record the stats for the ChessTiles.\n\t * Only every tile, that has a piece on it, is updated.\n\t * @private\n\t */\n\tupdateTileStats() {\n\t\tfor (let i = 0; i < 32; i += 1) {\n\t\t\tif (this.pieces[i].alive) {\n\t\t\t\tthis.tiles[this.pieces[i].pos[0]][\n\t\t\t\t\tthis.pieces[i].pos[1]\n\t\t\t\t].updateOccupationStats();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","/**\n * Class that represents a chess piece and tracks statistics.\n */\nclass ChessPiece {\n\t/**\n\t * Creates a new ChessPiece.\n\t * @param {String} piece The name of the piece, e.g. 'Pd' for a D pawn.\n\t * @param {Number[]} pos Row and column the piece is on at start.\n\t * @param {Boolean} [promoted=false] Denotes if this piece is created by pawn promotion.\n\t */\n\tconstructor(piece, pos, promoted = false) {\n\t\t/**\n\t\t * Name of the piece, e.g 'Pb' for the b pawn\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = piece; // piece type\n\n\t\t/**\n\t\t * Current position of this piece: [row,col], with [0,0] being the top left square\n\t\t * @member {Number[]}\n\t\t */\n\t\tthis.pos = pos; // current position in [row, col] notation\n\n\t\t/**\n\t\t * Starting position of this piece: [row,col], with [0,0] being the top left square\n\t\t * @member {Number[]}\n\t\t */\n\t\tthis.defaultPos = pos; // starting position of this piece\n\n\t\t/**\n\t\t * Color of this piece: 'black' or 'white'\n\t\t * @member {String}\n\t\t */\n\t\tthis.color = '';\n\t\tif (promoted) {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'white' : 'black'; // color of piece: 0 white, 1 black\n\t\t} else {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'black' : 'white'; // color of piece: 0 white, 1 black\n\t\t}\n\n\t\tthis.alive = true; // piece alive?\n\n\t\t/**\n\t\t * Object that contains the tracked statistics\n\t\t * @member {Object}\n\t\t */\n\t\tthis.stats = {};\n\n\t\t/**\n\t\t * Is this piece alive?\n\t\t * @member {Object}\n\t\t */\n\n\t\tthis.initStats();\n\n\t\t// option to track the move history of each piece\n\t\t// currently unused, costs a lot of performance\n\t\tthis.logHistory = false;\n\t\tthis.history = []; // position history\n\t\tthis.history.push(pos);\n\t\tthis.maxHistory = 2000; // max length of history array\n\t}\n\n\t/**\n\t * Resets this piece to its default position and denotes a new game in the move history tracker.\n\t * @private\n\t */\n\treset() {\n\t\tif (this.logHistory && this.history.length < this.maxHistory) {\n\t\t\tthis.history.push(null);\n\t\t\tthis.history.push(this.defaultPos);\n\t\t}\n\n\t\tthis.pos = this.defaultPos;\n\t\tthis.alive = true;\n\t}\n\n\t/**\n\t * Moves this piece to a new position and updates move statistics.\n\t * @private\n\t * @param {Number[]} pos Target row and column of the tile the piece shall move to.\n\t */\n\tupdatePosition(pos) {\n\t\tthis.stats.cntMoved += 1;\n\t\tthis.pos = pos;\n\t\tif (this.logHistory && this.history.length < this.maxHistory) {\n\t\t\tthis.history.push(pos);\n\t\t}\n\t\tthis.stats.at[pos[0]][pos[1]].movedTo += 1;\n\t}\n\n\t/**\n\t * Marks this piece as taken and updates the statistics of the piece it was taken by.\n\t * @private\n\t * @param {ChessPiece} killedBy Piece this piece was taken by.\n\t */\n\tkillPiece(killedByPiece) {\n\t\tthis.alive = false;\n\t\tthis.stats.cntWasKilled += 1;\n\n\t\t// if killer is not promoted pawn...\n\t\tif (!(killedByPiece.name.length === 1 || this.name.length === 1)) {\n\t\t\t// update killedBy of this piece\n\t\t\tthis.stats.at[killedByPiece.defaultPos[0]][\n\t\t\t\tkilledByPiece.defaultPos[1]\n\t\t\t].killedBy += 1;\n\t\t}\n\t}\n\n\tkilledPiece(killedPiece) {\n\t\tthis.stats.cntHasKilled += 1;\n\n\t\t// if killer is not promoted pawn...\n\t\tif (!(killedPiece.name.length === 1 || this.name.length === 1)) {\n\t\t\t// update killed stat of killer piece\n\t\t\tthis.stats.at[killedPiece.defaultPos[0]][\n\t\t\t\tkilledPiece.defaultPos[1]\n\t\t\t].killed += 1;\n\t\t}\n\t}\n\n\t/**\n\t * Inits the statistics array of this piece.\n\t * @private\n\t */\n\tinitStats() {\n\t\tthis.stats = { cntMoved: 0, cntWasKilled: 0, cntHasKilled: 0 };\n\t\tthis.stats.at = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { movedTo: 0, killedBy: 0, killed: 0 };\n\t\t\t}\n\t\t\tthis.stats.at[row] = currRow;\n\t\t}\n\t}\n}\n\nexport default ChessPiece;\n","/** Class that represents a single Tile. Tracks statistics for itself. */\nclass ChessTile {\n\t/** Creates a new Tile. */\n\tconstructor() {\n\t\t/**\n\t\t * Piece that is currently on this tile.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.piece = null;\n\n\t\t/**\n\t\t * Piece that is on this tile at start of game.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.defaultPiece = null;\n\n\t\t/**\n\t\t * Object that contains the tracked statistics\n\t\t * @member {Object}\n\t\t */\n\t\tthis.stats = {};\n\n\t\tthis.initStats();\n\t}\n\n\t/**\n\t * Places a piece on this tile. Should only be called at board init.\n\t * @private\n\t * @param {ChessPiece} piece The piece that is on this square by default.\n\t */\n\tinitPiece(piece) {\n\t\tthis.piece = piece;\n\t\tthis.defaultPiece = piece;\n\t}\n\n\t/**\n\t * Sets the currently active piece of this square to the default piece.\n\t * @private\n\t */\n\tresetPiece() {\n\t\tthis.piece = this.defaultPiece;\n\t}\n\n\t/**\n\t * Updates the statistics of this tile.\n\t * @private\n\t */\n\tupdateOccupationStats() {\n\t\t// this.stats.cntHasPiece[this.piece.color] is slow for some reason, so use if\n\t\tif (this.piece.color === 'white') {\n\t\t\tthis.stats.cntHasPiece.white += 1;\n\t\t} else {\n\t\t\tthis.stats.cntHasPiece.black += 1;\n\t\t}\n\n\t\t// only non-promoted pieces are counted\n\t\tif (this.piece.name.length !== 1) {\n\t\t\tthis.stats.at[this.piece.defaultPos[0]][\n\t\t\t\tthis.piece.defaultPos[1]\n\t\t\t].wasOnTile += 1;\n\t\t}\n\t}\n\n\tupdateDeadCount() {\n\t\tthis.stats.cntTakenPieces += 1;\n\t}\n\n\t/**\n\t * Inits the statistics array. Is called by the constructor.\n\t * @private\n\t */\n\tinitStats() {\n\t\tthis.stats.cntHasPiece = { white: 0, black: 0 };\n\t\tthis.stats.cntTakenPieces = 0;\n\n\t\tthis.stats.at = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { wasOnTile: 0 };\n\t\t\t}\n\t\t\tthis.stats.at[row] = currRow;\n\t\t}\n\t}\n}\n\nexport default ChessTile;\n","import GameProcessor from './GameProcessor';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/**\n * @typedef {Object} cfg\n * @property {Function} filter - Descr\n * @property {Number} cntGames - Descr\n * @property {Boolean} split - Descr\n */\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\tconstructor() {\n\t\t/**\n\t\t * Contains the tracked data of the processed PGN files. Has two different banks for\n\t\t * heat map comparison. Each object contains the following keys:\n\t\t * <ul>\n\t\t * <li>data: {cntMoves, cntGames}. Information about the count of processed moves and games</li>\n\t\t * <li>tiles: 8x8 array of {@link ChessTile}s.</li>\n\t\t * </ul>\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis.dataStore = new Array(2);\n\t\t/**\n\t\t * Does the analysis part\n\t\t * @private\n\t\t * @member {GameProcessor}\n\t\t */\n\t\tthis.gameProcessor = new GameProcessor();\n\t}\n\n\t/**\n\t * Starts the batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {Object} cfg\n\t * @param {Function} cfg.filter - Filter function for selecting games\n\t * @param {Function} cfg.cntGames - Max amount of games to process\n\t * @param {Number} [bank = 0] - The data bank the results shall be saved to\n\t * @param {Number} [refreshRate = 250] - Defines how often the current status of the\n\t *  analysis shall be exposed. Every number of processed games an event is emitted\n\t *  containing the current number of processed games. The event can be handled via\n\t *  \"chessalyzer.gameProcessor.on('status', function(gameCnt) {// do handling here});\",\n\t *  e.g. to update an UI.\n\t * @returns {Promise} Promise that contains the number of processed games when finished\n\t */\n\tstartBatch(path, cfg = {}, bank = 0, refreshRate = 250) {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst t0 = performance.now();\n\t\t\tthis.gameProcessor\n\t\t\t\t.processPGN(path, cfg, refreshRate)\n\t\t\t\t.then((board) => {\n\t\t\t\t\tconst dataset = {};\n\t\t\t\t\tdataset.stats = board.stats;\n\t\t\t\t\tdataset.tiles = board.tiles;\n\t\t\t\t\tthis.dataStore[bank] = JSON.parse(JSON.stringify(dataset));\n\t\t\t\t\tconst t1 = performance.now();\n\t\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\t\tconst mps = Math.round(dataset.stats.cntMoves / tdiff);\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`${dataset.stats.cntGames} games (${\n\t\t\t\t\t\t\tdataset.stats.cntMoves\n\t\t\t\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t\t);\n\t\t\t\t\tthis.gameProcessor.reset();\n\t\t\t\t\tresolve(this.dataStore[bank].stats.cntGames);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Number} [bank = 0] - The data bank the data shall be taken from\n\t */\n\tsaveData(path, bank = 0) {\n\t\tfs.writeFile(path, JSON.stringify(this.dataStore[bank]), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @param {Number} [bank = 0] - The data bank the data shall be loaded to.\n\t * @returns {Number} Count of loaded games\n\t */\n\tloadData(path, bank) {\n\t\tthis.dataStore[bank] = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded to bank ${bank}.`);\n\t\treturn this.dataStore[bank].cntGames;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Number} bank - The data bank the data shall be taken from\n\t * @param {String} square - The square the data shall be generated for. For example, if you\n\t * wanted to know how often a specific piece was on a specific tile, you would pass the\n\t * identifier of the tile to the function, e.g. \"a2\"\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. This function gets passed the following arguments:\n\t * <ol>\n\t * <li>The complete data stored in the chosen bank. See the member description of the dataStore\n\t * member to see which data is available.</li>\n\t * <li>The coords of the tile passed as the square argument.</li>\n\t * <li>The current coordinates of the tile the data should be generated for.\n\t * The function must return a Number with the heat map value for the square passed as the\n\t * third argument.</li>\n\t * </ol>\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tgenerateHeatmap(bank, square, fun) {\n\t\tconst coords = GameProcessor.algebraicToCoords(square);\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tdataRow[j] = fun(this.dataStore[bank], coords, [i, j]);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks are calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {String} square - The square the data shall be generated for.\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link Chessalyzer#generateHeatmap} for a more detailed description.\n\t * @param {Number} [bank1 = 0] - Bank number of dataset 1\n\t * @param {Number} [bank2 = 1] - Bank number of dataset 2\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tgenerateComparisonHeatmap(square, fun, bank1 = 0, bank2 = 1) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst data0 = this.generateHeatmap(bank1, square, fun);\n\t\tconst data1 = this.generateHeatmap(bank2, square, fun);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = data0[0][i][j];\n\t\t\t\tconst b = data1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic generateList(map) {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tlet val = map[i][j];\n\t\t\t\tval = val.toFixed(2);\n\t\t\t\tif (Math.abs(val) > 0.001) {\n\t\t\t\t\tif (i === 0) list.push([`b${pieceTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 1) list.push([`b${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 6) list.push([`w${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 7) list.push([`w${pieceTemplate[j]}`, val]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist.sort((a, b) => b[1] - a[1]);\n\t\treturn list;\n\t}\n}\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.activePlayer = 0;\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\t// TODO: currently without function\n\t\tcfg.split = Object.prototype.hasOwnProperty.call(config, 'split')\n\t\t\t? config.split\n\t\t\t: false;\n\n\t\treturn cfg;\n\t}\n\n\tprocessPGN(path, config, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// data tag\n\t\t\t\tif (line.startsWith('[') && cfg.hasFilter) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.board.stats.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.board.stats.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.board.stats.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve(this.board);\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\t\t\tconst moveData = this.parseMove(moves[i]);\n\t\t\tthis.board.move(moveData);\n\t\t}\n\t\tthis.board.reset();\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.board.resetStats();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * @typedef {Object} MoveData\n\t * @property {Object[]} moves - Array of {from: [], to: []} objects\n\t * @property {Boolean} takes - Move takes a piece true/false\n\t * @property {String} promotes - Piece type in case of pawn promotion else null\n\t */\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t *  the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t * @returns {MoveData}\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tlet moveData = {};\n\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) !== null) {\n\t\t\tmoveData = null;\n\t\t} else if (token.toLowerCase() === token) {\n\t\t\tmoveData = this.pawnMove(move);\n\t\t} else if (token !== 'O') {\n\t\t\tmoveData = this.pieceMove(move);\n\t\t} else {\n\t\t\tmoveData = this.castle(move);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t * @returns {MoveData}\n\t */\n\tpawnMove(moveSan) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tlet move = moveSan;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol].piece !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].piece.name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmoveData.moves.push({ from, to });\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tmoveData.promotes = move.substring(move.length - 1, move.length);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t * @returns {MoveData}\n\t */\n\tpieceMove(moveSan) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tlet move = moveSan;\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tfrom[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\t\t\tto[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tto[1] = files.indexOf(move.substring(2, 3));\n\t\t\tmoveData.moves.push({ from, to });\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tmoveData.moves.push(\n\t\t\t\tthis.findPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token)\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tmoveData.moves.push(this.findPiece(tarRow, tarCol, -1, -1, token));\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst opColor = this.activePlayer % 2 ? 'white' : 'black';\n\t\tconst king = this.board.pieces[color === 'white' ? 28 : 4].pos;\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]].piece;\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]].piece;\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]].piece = null;\n\t\tthis.board.tiles[to[0]][to[1]].piece = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col].piece !== null\n\t\t\t) {\n\t\t\t\tconst { piece } = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]].piece = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]].piece = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\t/**\n\t * Returns the board coordinates for castling.\n\t * @param {string} move The move to be parsed, e.g. 'O-O'.\n\t * @returns {MoveData.moves}\n\t */\n\tcastle(move) {\n\t\tconst row = this.activePlayer % 2 ? 0 : 7;\n\t\tconst from1 = [];\n\t\tconst from2 = [];\n\t\tconst to1 = [];\n\t\tconst to2 = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\n\t\t// O-O\n\t\tif (move.length === 3) {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 6;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 7;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 5;\n\n\t\t\t// O-O-O\n\t\t} else {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 2;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 0;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 3;\n\t\t}\n\t\tmoveData.moves.push({ from: from1, to: to1 });\n\t\tmoveData.moves.push({ from: from2, to: to2 });\n\t\treturn moveData;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","/* eslint-disable */\nimport Chessalyzer from './Chessalyzer';\n\nexport default Chessalyzer;\n","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"line-by-line\");","module.exports = require(\"perf_hooks\");"],"sourceRoot":""}