{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/./src/ChessPiece.js","webpack://chessalyzer/./src/ChessTile.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"perf_hooks\""],"names":["pawnTemplate","pieceTemplate","ChessBoard","cntMoves","cntGames","pieces","tiles","Array","row","currRow","col","push","initPiece","length","moveData","moves","takes","promotes","move","to","piece","from","color","alive","processMove","promotePiece","updateTileStats","toPiece","fromPiece","killPiece","killedPiece","updatePosition","i","reset","slice","resetPiece","initStats","coords","pieceType","rowArray","name","console","log","pos","updateStats","ChessPiece","promoted","defaultPos","history","dataMap","cntMoved","cntWasKilled","cntHasKilled","logHistory","maxHistory","killedBy","ChessTile","defaultPiece","cntHasPiece","index","require","performance","fs","Chessalyzer","ds","gp","path","bank","refreshRate","Promise","resolve","t0","now","processPGN","then","gameCnt","JSON","parse","stringify","board","t1","tdiff","Math","round","mps","writeFile","err","error","readFileSync","square","fun","algebraicToCoords","map","max","min","dataRow","j","bank1","bank2","data0","generateHeatmap","data1","a","b","list","val","toFixed","abs","sort","LineByLineReader","EventEmitter","files","GameProcessor","activePlayer","reject","lr","skipEmptyLines","game","processLine","line","startsWith","replace","processGame","emit","on","pause","resume","split","parseMove","resetStats","rawMove","token","substring","preProcess","match","toLowerCase","pawnMove","castle","pieceMove","moveFen","direction","includes","parseInt","indexOf","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","isInCheck","diff","checkFor","srcTilePiece","tarTilePiece","obstructed","from1","from2","to1","to2","temp"],"mappings":"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","file":"chessalyzer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import ChessTile from './ChessTile';\nimport ChessPiece from './ChessPiece';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Class that contains the board status and tracks statistics. */\n/** Class that contains the board status and tracks statistics. */\nclass ChessBoard {\n\t/** Creates a new 8x8 Chessboard out of 64 {@link ChessTile}s and 32 {@link ChessPiece}s */\n\tconstructor() {\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\n\t\t// contains all pieces\n\t\tthis.pieces = [];\n\n\t\t// init tiles\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = new ChessTile();\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pieceTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pawnTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t}\n\n\t/**\n\t * Moves a piece from source to target. Automatically handles the events 'move',\n\t *  'take', 'en passant', 'castle' and 'promote'.\n\t * Use this function instead of {@link ChessBoard.processMove} to input a move to the board!\n\t * @param {Array} coords An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile,\n\t *      [4]: takes true/false,\n\t *      [5]: new piece type in case of pawn promotion.\n\t *\n\t *      If the move is castling, the array is assigned differently:\n\t *      [0-3]: king move,\n\t *      [4-7]: rook move.\n\t *\n\t *      Uses coords.length to differentiate between the different inputs.\n\t */\n\tmove(moveData) {\n\t\tif (moveData !== null) {\n\t\t\tthis.cntMoves += 1;\n\n\t\t\tconst { moves } = moveData;\n\t\t\tconst { takes } = moveData;\n\t\t\tconst { promotes } = moveData;\n\n\t\t\t// move\n\t\t\tif (moves.length === 1) {\n\t\t\t\tconst move = moves[0];\n\n\t\t\t\tswitch (takes) {\n\t\t\t\t\tcase true:\n\t\t\t\t\t\t// en passant\n\t\t\t\t\t\tif (this.tiles[move.to[0]][move.to[1]].piece === null) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tthis.tiles[move.from[0]][move.from[1]].piece\n\t\t\t\t\t\t\t\t\t.color === 'white'\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] + 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece.alive = false;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] + 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece = null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] - 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece.alive = false;\n\t\t\t\t\t\t\t\tthis.tiles[move.to[0] - 1][\n\t\t\t\t\t\t\t\t\tmove.to[1]\n\t\t\t\t\t\t\t\t].piece = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase false:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis.processMove(move);\n\n\t\t\t\tif (promotes !== null) {\n\t\t\t\t\tthis.promotePiece(move.to, promotes);\n\t\t\t\t}\n\t\t\t\t// castle\n\t\t\t} else {\n\t\t\t\tthis.processMove(moves[0]);\n\t\t\t\tthis.processMove(moves[1]);\n\t\t\t}\n\n\t\t\tthis.updateTileStats();\n\t\t}\n\t}\n\n\t/**\n\t * Handles the move commanded by {@link ChessBoard.move}. Don't call this function directly,\n\t *  use {@link ChessBoard.move} to input a move!\n\t * @private\n\t * @param {Array} coords An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile,\n\t */\n\tprocessMove(move) {\n\t\t// takes?\n\t\tconst { from } = move;\n\t\tconst { to } = move;\n\t\tconst toPiece = this.tiles[to[0]][to[1]].piece;\n\t\tconst fromPiece = this.tiles[from[0]][from[1]].piece;\n\n\t\tif (toPiece !== null) {\n\t\t\ttoPiece.killPiece(fromPiece);\n\t\t\tfromPiece.killedPiece(toPiece);\n\t\t}\n\t\tthis.tiles[to[0]][to[1]].piece = fromPiece;\n\t\tthis.tiles[to[0]][to[1]].piece.updatePosition(to);\n\t\tthis.tiles[from[0]][from[1]].piece = null;\n\t}\n\n\t/** Resets the board to the default state: removes promoted pieces and puts the standard\n\t *  pieces back to their starting positions.\n\t *\n\t *  Does not reset the stats recorded. If you wish to reset the stats,\n\t *  call {@link ChessBoard.resetStats}. */\n\treset() {\n\t\tthis.cntGames += 1;\n\t\t// reset the pieces to default\n\t\tfor (let i = 0; i < this.pieces.length; i += 1) {\n\t\t\tthis.pieces[i].reset();\n\t\t}\n\n\t\t// remove promoted pieces\n\t\tthis.pieces = this.pieces.slice(0, 32);\n\n\t\t// reset the tiles\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].resetPiece();\n\t\t\t}\n\t\t}\n\t}\n\n\t/** Resets the stats recorded. */\n\tresetStats() {\n\t\t// reset the tiles\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].initStats();\n\t\t\t}\n\t\t}\n\n\t\t// reset the pieces to default\n\t\tfor (let i = 0; i < this.pieces.length; i += 1) {\n\t\t\tthis.pieces[i].initStats();\n\t\t}\n\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t}\n\n\t/**\n\t * Promotes a pawn to a piece.\n\t * @param {Array} coords An array containing the row and column of the pawn to be promoted.\n\t * @param {String} pieceType Target piece type in SAN notation ('N', 'B', 'Q', 'R').\n\t */\n\tpromotePiece(coords, pieceType) {\n\t\t// change alive directly instead of killPiece to not update stats\n\t\tthis.tiles[coords[0]][coords[1]].piece.alive = false;\n\t\tthis.tiles[coords[0]][coords[1]].piece = null;\n\n\t\tthis.pieces.push(\n\t\t\tnew ChessPiece(pieceType, [coords[0], coords[1]], true)\n\t\t);\n\t\tthis.tiles[coords[0]][coords[1]].piece = this.pieces[\n\t\t\tthis.pieces.length - 1\n\t\t];\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst { piece } = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('..');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n\n\t/** Is called after each {@link ChessBoard.move} to record the stats for the ChessTiles.\n\t * Only every tile, that has a piece on it, is updated.\n\t */\n\tupdateTileStats() {\n\t\tfor (let i = 0; i < 32; i += 1) {\n\t\t\tif (this.pieces[i].alive) {\n\t\t\t\tthis.tiles[this.pieces[i].pos[0]][\n\t\t\t\t\tthis.pieces[i].pos[1]\n\t\t\t\t].updateStats();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","/**\n * Class that represents a chess piece and tracks statistics.\n */\nclass ChessPiece {\n\t/**\n\t * Creates a new ChessPiece.\n\t * @param {String} piece The name of the piece, e.g. 'Pd' for a D pawn.\n\t * @param {Number[]} pos Row and column the piece is on at start.\n\t * @param {Boolean} [promoted=false] Denotes if this piece is created by pawn promotion.\n\t */\n\tconstructor(piece, pos, promoted = false) {\n\t\tthis.name = piece; // piece type\n\t\tthis.pos = pos; // current position in [row, col] notation\n\t\tthis.defaultPos = pos; // starting position of this piece\n\t\tif (promoted) {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'white' : 'black'; // color of piece: 0 white, 1 black\n\t\t} else {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'black' : 'white'; // color of piece: 0 white, 1 black\n\t\t}\n\n\t\tthis.history = []; // position history\n\t\tthis.history.push(pos);\n\n\t\t/* 8x8 matrix that contains 3 informations for every tile\n\t\t\t0: counts how often this piece moved to the tile at these coordinates\n\t\t\t1: counts how often this piece was killed by the piece, that starts at these coordinates\n\t\t\t2: counts how often this piece killed a piece, that starts at these coordinates */\n\t\tthis.dataMap = null;\n\t\tthis.cntMoved = 0;\n\t\tthis.cntWasKilled = 0;\n\t\tthis.cntHasKilled = 0;\n\t\tthis.initStats();\n\n\t\tthis.alive = true; // piece alive?\n\t\tthis.logHistory = false;\n\n\t\tthis.maxHistory = 2000; // max length of history array\n\t}\n\n\t/**\n\t * Resets this piece to its default position and denotes a new game in the move history tracker.\n\t */\n\treset() {\n\t\tif (this.logHistory && this.history.length < this.maxHistory) {\n\t\t\tthis.history.push(null);\n\t\t\tthis.history.push(this.defaultPos);\n\t\t}\n\n\t\tthis.pos = this.defaultPos;\n\t\tthis.alive = true;\n\t}\n\n\t/**\n\t * Moves this piece to a new position and updates move statistics.\n\t * @param {Number[]} pos Target row and column of the tile the piece shall move to.\n\t */\n\tupdatePosition(pos) {\n\t\tthis.cntMoved += 1;\n\t\tthis.pos = pos;\n\t\tif (this.logHistory && this.history.length < this.maxHistory) {\n\t\t\tthis.history.push(pos);\n\t\t}\n\t\tthis.dataMap[pos[0]][pos[1]][0] += 1;\n\t}\n\n\t/**\n\t * Marks this piece as taken and updates the statistics of the piece it was taken by.\n\t * @param {ChessPiece} killedBy Piece this piece was taken by.\n\t */\n\tkillPiece(killedBy) {\n\t\tthis.alive = false;\n\t\tthis.cntWasKilled += 1;\n\n\t\t// if killer is not promoted pawn...\n\t\tif (!(killedBy.name.length === 1 || this.name.length === 1)) {\n\t\t\t// update killedBy of this piece\n\t\t\tthis.dataMap[killedBy.defaultPos[0]][\n\t\t\t\tkilledBy.defaultPos[1]\n\t\t\t][1] += 1;\n\t\t}\n\t}\n\n\tkilledPiece(killedPiece) {\n\t\tthis.cntHasKilled += 1;\n\n\t\t// if killer is not promoted pawn...\n\t\tif (!(killedPiece.name.length === 1 || this.name.length === 1)) {\n\t\t\t// update killed stat of killer piece\n\t\t\tthis.dataMap[killedPiece.defaultPos[0]][\n\t\t\t\tkilledPiece.defaultPos[1]\n\t\t\t][2] += 1;\n\t\t}\n\t}\n\n\t/**\n\t * Inits the statistics array of this piece.\n\t */\n\tinitStats() {\n\t\tthis.cntMoved = 0;\n\t\tthis.cntWasKilled = 0;\n\t\tthis.cntHasKilled = 0;\n\t\tthis.dataMap = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t// [movedToTile, killedBy, killed]\n\t\t\t\tcurrRow[col] = [0, 0, 0];\n\t\t\t}\n\t\t\tthis.dataMap[row] = currRow;\n\t\t}\n\t}\n}\n\nexport default ChessPiece;\n","/** Class that represents a single Tile. Tracks statistics for itself. */\nclass ChessTile {\n\t/** Creates a new Tile. */\n\tconstructor() {\n\t\t/**\n\t\t * Piece that is currently on this tile.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.piece = null;\n\n\t\t/**\n\t\t * Piece that is on this tile at start of game.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.defaultPiece = null;\n\n\t\t/* 8x8 matrix that contains 2 informations for every tile\n\t\t\t0: counts how often the piece, that starts at these coordinates, was on this tile\n\t\t\t1: ? */\n\t\tthis.dataMap = null;\n\t\tthis.initStats();\n\t\t// counts amount of half moves, this tile has a piece on it [white, black]\n\t\tthis.cntHasPiece = [0, 0];\n\t}\n\n\t/**\n\t * Places a piece on this tile. Should only be called at board init.\n\t * @param {ChessPiece} piece The piece that is on this square by default.\n\t */\n\tinitPiece(piece) {\n\t\tthis.piece = piece;\n\t\tthis.defaultPiece = piece;\n\t}\n\n\t/**\n\t * Sets the currently active piece of this square to the default piece.\n\t */\n\tresetPiece() {\n\t\tthis.piece = this.defaultPiece;\n\t}\n\n\t/**\n\t * Updates the statistics of this tile.\n\t */\n\tupdateStats() {\n\t\tconst index = this.piece.color === 'white' ? 0 : 1;\n\t\tthis.cntHasPiece[index] += 1;\n\t\t// only non-promoted pieces are counted\n\t\tif (this.piece.name.length !== 1) {\n\t\t\tthis.dataMap[this.piece.defaultPos[0]][\n\t\t\t\tthis.piece.defaultPos[1]\n\t\t\t][0] += 1;\n\t\t}\n\t}\n\n\t/**\n\t * Inits the statistics array. Is called by the constructor.\n\t */\n\tinitStats() {\n\t\tthis.cntHasPiece = [0, 0];\n\t\tthis.dataMap = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = [0, 0];\n\t\t\t}\n\t\t\tthis.dataMap[row] = currRow;\n\t\t}\n\t}\n}\n\nexport default ChessTile;\n","import GameProcessor from './GameProcessor';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass Chessalyzer {\n\tconstructor() {\n\t\tthis.ds = new Array(2);\n\t\tthis.gp = new GameProcessor();\n\t}\n\n\tstartBatch(path, bank = 0, refreshRate = 1000) {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst t0 = performance.now();\n\t\t\tthis.gp.processPGN(path, refreshRate).then((gameCnt) => {\n\t\t\t\tthis.ds[bank] = JSON.parse(JSON.stringify(this.gp.board));\n\t\t\t\tconst t1 = performance.now();\n\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\tconst mps = Math.round(this.gp.board.cntMoves / tdiff);\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${\n\t\t\t\t\t\tthis.gp.board.cntMoves\n\t\t\t\t\t} moves processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t);\n\t\t\t\tthis.gp.reset();\n\t\t\t\tresolve(gameCnt);\n\t\t\t});\n\t\t});\n\t}\n\n\tsaveAnalysis(path, bank = 0) {\n\t\tfs.writeFile(path, JSON.stringify(this.ds[bank]), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created');\n\t\t});\n\t}\n\n\tloadAnalysis(path, bank) {\n\t\tthis.ds[bank] = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded to bank ${bank}.`);\n\t\treturn this.ds[bank].cntGames;\n\t}\n\n\tgenerateHeatmap(bank, square, fun) {\n\t\tconst coords = GameProcessor.algebraicToCoords(square);\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tdataRow[j] = fun(this.ds[bank], coords, [i, j]);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tgenerateComparisonHeatmap(bank1, bank2, square, fun) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst data0 = this.generateHeatmap(bank1, square, fun);\n\t\tconst data1 = this.generateHeatmap(bank2, square, fun);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = data0[0][i][j];\n\t\t\t\tconst b = data1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic generateList(map) {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tlet val = map[i][j];\n\t\t\t\tval = val.toFixed(2);\n\t\t\t\tif (Math.abs(val) > 0.001) {\n\t\t\t\t\tif (i === 0) list.push([`b${pieceTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 1) list.push([`b${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 6) list.push([`w${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 7) list.push([`w${pieceTemplate[j]}`, val]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist.sort((a, b) => b[1] - a[1]);\n\t\treturn list;\n\t}\n}\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.activePlayer = 0;\n\t}\n\n\tprocessPGN(path, refreshRate) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = { moves: '' };\n\t\t\tlet gameCnt = 0;\n\t\t\t// let blankLineCnt = 0;\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// let currLine;\n\n\t\t\t\t// data tag\n\t\t\t\tif (line.startsWith('[')) {\n\t\t\t\t\t// currLine = line.replace(/[[\\]']+/g, '');\n\t\t\t\t\t// currLine = currLine.split(' \"');\n\t\t\t\t\t// let key = currLine[0];\n\t\t\t\t\t// let value = currLine[1].replace('\"', '');\n\t\t\t\t\t// // compact some strings to save space\n\t\t\t\t\t// if (key === 'Site') {\n\t\t\t\t\t// \tvalue = value.replace('https://lichess.org/', '');\n\t\t\t\t\t// \tkey = 'id';\n\t\t\t\t\t// } else if (key === 'UTCDate') key = 'Date';\n\t\t\t\t\t// else if (key === 'Event') {\n\t\t\t\t\t// \tvalue = value\n\t\t\t\t\t// \t\t.replace('Rated', 'R')\n\t\t\t\t\t// \t\t.replace('Unrated', 'U')\n\t\t\t\t\t// \t\t.replace(' game', '');\n\t\t\t\t\t// \tvalue = value.replace(/\\s+tournament.*$/, '');\n\t\t\t\t\t// }\n\t\t\t\t\t// // convert to int if Elo\n\t\t\t\t\t// if (key === 'WhiteElo' || key === 'BlackElo') {\n\t\t\t\t\t// \tvalue = +value;\n\t\t\t\t\t// }\n\t\t\t\t\t// // omit some values\n\t\t\t\t\t// if (\n\t\t\t\t\t// \t!(\n\t\t\t\t\t// \t\tkey === 'UTCTime' ||\n\t\t\t\t\t// \t\tkey === 'WhiteRatingDiff' ||\n\t\t\t\t\t// \t\tkey === 'BlackRatingDiff' ||\n\t\t\t\t\t// \t\tkey === 'Opening'\n\t\t\t\t\t// \t)\n\t\t\t\t\t// ) {\n\t\t\t\t\t// \tgame[key] = value;\n\t\t\t\t\t// }\n\t\t\t\t\t// // next game\n\t\t\t\t\t// } else if (line === '' && blankLineCnt === 1) {\n\t\t\t\t\t// \tblankLineCnt = 0;\n\t\t\t\t\t// \t// separator between tags and moves\n\t\t\t\t\t// } else if (line === '' && blankLineCnt === 0) {\n\t\t\t\t\t// blankLineCnt += 1;\n\t\t\t\t\t// // moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{.*?\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '');\n\t\t\t\t\t// if (!(game.white === '?' || game.black === '?')) {\n\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\tgameCnt += 1;\n\t\t\t\t\t// }\n\t\t\t\t\tif (gameCnt % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', gameCnt);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = { moves: '' };\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\t// ...do your asynchronous line processing..\n\t\t\t\tprocessLine(line);\n\t\t\t\tlr.resume();\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve(gameCnt);\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst moves = game.moves.split(' ');\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\t\t\tconst moveData = this.parseMove(moves[i]);\n\t\t\tthis.board.move(moveData);\n\t\t}\n\t\tthis.board.reset();\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.board.resetStats();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t *  the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile,\n\t *      [4]: takes true/false,\n\t *      [5]: new piece type in case of pawn promotion.\n\t *\n\t *      If the move is castling, the array is assigned differently:\n\t *      [0-3]: king move,\n\t *      [4-7]: rook move.\n\t *\n\t *      Returns 'null' on game end (move is '1-0', '0-1' or '1/2-1/2').\n\t *\n\t *      Use coords.length to differentiate between the different outputs\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tlet moveData = {};\n\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) !== null) {\n\t\t\tmoveData = null;\n\t\t} else if (token.toLowerCase() === token) {\n\t\t\t// pawn move\n\t\t\tmoveData = this.pawnMove(move);\n\t\t} else if (token === 'O') {\n\t\t\tmoveData = this.castle(move);\n\t\t} else {\n\t\t\tmoveData = this.pieceMove(move);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveFen The move to be parsed, e.g. 'e5'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile,\n\t *      [4]: takes true/false,\n\t *      [5]: new piece type in case of promotion.\n\t */\n\tpawnMove(moveFen) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tlet move = moveFen;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol].piece !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].piece.name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmoveData.moves.push({ from, to });\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tmoveData.promotes = move.substring(move.length - 1, move.length);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveFen The move to be parsed, e.g. 'Be3'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile,\n\t *      [4]: takes true/false.\n\t */\n\tpieceMove(moveFen) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tlet move = moveFen;\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tfrom[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\t\t\tto[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tto[1] = files.indexOf(move.substring(2, 3));\n\t\t\tmoveData.moves.push({ from, to });\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tmoveData.moves.push(\n\t\t\t\tthis.findPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token)\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tmoveData.moves.push(this.findPiece(tarRow, tarCol, -1, -1, token));\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile.\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile.\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile.\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Array} An array containing:\n\t *      [0-1]: start tile,\n\t *      [2-3]: target tile.\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Array} coords Coordinates of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst opColor = this.activePlayer % 2 ? 'white' : 'black';\n\t\tconst king = this.board.pieces[color === 'white' ? 28 : 4].pos;\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]].piece;\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]].piece;\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]].piece = null;\n\t\tthis.board.tiles[to[0]][to[1]].piece = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col].piece !== null\n\t\t\t) {\n\t\t\t\tconst { piece } = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]].piece = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]].piece = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\t/**\n\t * Returns the board coordinates for castling.\n\t * @param {string} move The move to be parsed, e.g. 'O-O'.\n\t * @returns {Array} An array containing:\n\t *      [0-3]: king move coordinates,\n\t *      [4-7]: rook move coordinates.\n\t */\n\tcastle(move) {\n\t\tconst row = this.activePlayer % 2 ? 0 : 7;\n\t\tconst from1 = [];\n\t\tconst from2 = [];\n\t\tconst to1 = [];\n\t\tconst to2 = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\n\t\t// O-O\n\t\tif (move.length === 3) {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 6;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 7;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 5;\n\n\t\t\t// O-O-O\n\t\t} else {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 2;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 0;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 3;\n\t\t}\n\t\tmoveData.moves.push({ from: from1, to: to1 });\n\t\tmoveData.moves.push({ from: from2, to: to2 });\n\t\treturn moveData;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","/* eslint-disable */\nimport Chessalyzer from './Chessalyzer';\n\nexport default Chessalyzer;\n","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"line-by-line\");","module.exports = require(\"perf_hooks\");"],"sourceRoot":""}