{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/./src/ChessPiece.js","webpack://chessalyzer/./src/ChessTile.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"perf_hooks\""],"names":["pawnTemplate","pieceTemplate","ChessBoard","cfg","setConfig","pieces","tiles","Array","row","currRow","col","push","initPiece","length","moveData","moves","takes","promotes","move","processTakes","processMove","promotePiece","to","from","offset","piece","color","killPiece","updatePosition","i","pos","resetPiece","defaultPos","reset","slice","coords","pieceType","alive","rowArray","name","console","log","config","logPieceHistory","Object","prototype","hasOwnProperty","call","logTileOccupation","ChessPiece","promoted","ChessTile","defaultPiece","require","performance","fs","Chessalyzer","dataStore","gameProcessor","path","bank","refreshRate","Promise","resolve","t0","now","processPGN","then","t1","tdiff","Math","round","mps","cntMoves","cntGames","writeFile","JSON","stringify","err","error","parse","readFileSync","square","fun","optData","algebraicToCoords","map","max","min","dataRow","j","bank1","bank2","data0","generateHeatmap","data1","a","b","list","val","toFixed","abs","sort","LineByLineReader","EventEmitter","files","GameProcessor","board","activePlayer","checkConfig","stats","reject","lr","skipEmptyLines","game","processLine","line","startsWith","hasFilter","key","match","value","replace","split","filter","processGame","emit","close","end","resume","on","pause","parseMove","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","castle","moveSan","direction","includes","parseInt","indexOf","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","isInCheck","diff","checkFor","srcTilePiece","tarTilePiece","obstructed","from1","from2","to1","to2","Infinity","temp"],"mappings":"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","file":"chessalyzer.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import ChessTile from './ChessTile';\nimport ChessPiece from './ChessPiece';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Class that contains the board status and tracks statistics. */\nclass ChessBoard {\n\t/** Creates a new 8x8 Chessboard out of 64 {@link ChessTile}s and 32 {@link ChessPiece}s */\n\tconstructor(cfg = {}) {\n\t\tthis.cfg = {};\n\t\tthis.setConfig(cfg);\n\n\t\t/**\n\t\t * Contains all pieces on the board\n\t\t * @member {ChessPiece[]}\n\t\t */\n\t\tthis.pieces = [];\n\n\t\t/**\n\t\t * 8x8 array of {@link ChessTile}s\n\t\t * @member {Array[]}\n\t\t */\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = new ChessTile();\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pieceTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tthis.pieces.push(\n\t\t\t\t\t\tnew ChessPiece(pawnTemplate[col], [row, col])\n\t\t\t\t\t);\n\t\t\t\t\tcurrRow[col].initPiece(this.pieces[this.pieces.length - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t}\n\n\t/**\n\t * Moves a piece from source to target. Automatically handles the events 'move',\n\t *  'take', 'en passant', 'castle' and 'promote'.\n\t * Use this function instead of {@link ChessBoard#processMove} to input a move to the board!\n\t * @param {Object} moveData\n\t * @param {Object[]} moveData.moves - An array containing up to 2 moves in the\n\t *  syntax {from: [], to: []}\n\t * @param {Boolean} moveData.takes - True if the move takes a piece\n\t * @param {String} moveData.promotes - Type of promoted piece in case of pawn promotion, else null\n\t */\n\tmove(moveData) {\n\t\tif (moveData !== null) {\n\t\t\tconst { moves } = moveData;\n\t\t\tconst { takes } = moveData;\n\t\t\tconst { promotes } = moveData;\n\n\t\t\t// move\n\t\t\tif (moves.length === 1) {\n\t\t\t\tconst move = moves[0];\n\n\t\t\t\tif (takes) {\n\t\t\t\t\tthis.processTakes(move);\n\t\t\t\t}\n\n\t\t\t\tthis.processMove(move);\n\n\t\t\t\tif (promotes !== null) {\n\t\t\t\t\tthis.promotePiece(move.to, promotes);\n\t\t\t\t}\n\t\t\t\t// castle\n\t\t\t} else {\n\t\t\t\tthis.processMove(moves[0]);\n\t\t\t\tthis.processMove(moves[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the 'takes' processing commanded by {@link ChessBoard#move}.\n\t * Don't call this function directly, use {@link ChessBoard#move} to input a move!\n\t * @private\n\t * @param {Object} move\n\t * @param {Number[]} move.from - Coordinates of start tile\n\t * @param {Number[]} move.to - Coordinates of target tile\n\t */\n\tprocessTakes(move) {\n\t\tconst { from } = move;\n\t\tconst { to } = move;\n\t\tlet offset = 0;\n\n\t\t// en passant\n\t\tif (this.tiles[to[0]][to[1]].piece === null) {\n\t\t\toffset =\n\t\t\t\tthis.tiles[from[0]][from[1]].piece.color === 'white' ? 1 : -1;\n\t\t}\n\t\tthis.tiles[to[0] + offset][to[1]].piece.killPiece();\n\t\tthis.tiles[to[0] + offset][to[1]].piece = null;\n\t}\n\n\t/**\n\t * Handles the 'move' processing commanded by {@link ChessBoard#move}.\n\t * Don't call this function directly, use {@link ChessBoard#move} to input a move!\n\t * @private\n\t * @param {Object} move\n\t * @param {Number[]} move.from - Coordinates of start tile\n\t * @param {Number[]} move.to - Coordinates of target tile\n\t */\n\tprocessMove(move) {\n\t\tconst { from } = move;\n\t\tconst { to } = move;\n\n\t\tthis.tiles[to[0]][to[1]].piece = this.tiles[from[0]][from[1]].piece;\n\t\tthis.tiles[to[0]][to[1]].piece.updatePosition(to);\n\t\tthis.tiles[from[0]][from[1]].piece = null;\n\t}\n\n\t/** Resets the board to the default state: removes promoted pieces and puts the standard\n\t *  pieces back to their starting positions.\n\t *\n\t *  Does not reset the stats recorded. If you wish to reset the stats,\n\t *  call {@link ChessBoard#resetStats}. */\n\treset() {\n\t\t// reset tiles and pieces to default\n\t\tfor (let i = 0; i < this.pieces.length; i += 1) {\n\t\t\tconst piece = this.pieces[i];\n\t\t\tthis.tiles[piece.pos[0]][piece.pos[1]].resetPiece();\n\t\t\tthis.tiles[piece.defaultPos[0]][piece.defaultPos[1]].resetPiece();\n\t\t\tpiece.reset();\n\t\t}\n\n\t\t// remove promoted pieces\n\t\tthis.pieces = this.pieces.slice(0, 32);\n\t}\n\n\t/**\n\t * Promotes a pawn to a piece.\n\t * @private\n\t * @param {Number[]} coords An array containing the row and column of the pawn to be promoted.\n\t * @param {String} pieceType Target piece type in SAN notation ('N', 'B', 'Q', 'R').\n\t */\n\tpromotePiece(coords, pieceType) {\n\t\t// change alive directly instead of killPiece to not update stats\n\t\tthis.tiles[coords[0]][coords[1]].piece.alive = false;\n\t\tthis.tiles[coords[0]][coords[1]].piece = null;\n\n\t\tthis.pieces.push(\n\t\t\tnew ChessPiece(pieceType, [coords[0], coords[1]], true)\n\t\t);\n\t\tthis.tiles[coords[0]][coords[1]].piece = this.pieces[\n\t\t\tthis.pieces.length - 1\n\t\t];\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst { piece } = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('..');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n\n\tsetConfig(config) {\n\t\tthis.cfg.logPieceHistory = Object.prototype.hasOwnProperty.call(\n\t\t\tconfig,\n\t\t\t'logPieceHistory'\n\t\t)\n\t\t\t? config.logPieceHistory\n\t\t\t: false;\n\t\tthis.cfg.logTileOccupation = Object.prototype.hasOwnProperty.call(\n\t\t\tconfig,\n\t\t\t'logTileOccupation'\n\t\t)\n\t\t\t? config.logTileOccupation\n\t\t\t: true;\n\t}\n}\n\nexport default ChessBoard;\n","/**\n * Class that represents a chess piece and tracks statistics.\n */\nclass ChessPiece {\n\t/**\n\t * Creates a new ChessPiece.\n\t * @param {String} piece The name of the piece, e.g. 'Pd' for a D pawn.\n\t * @param {Number[]} pos Row and column the piece is on at start.\n\t * @param {Boolean} [promoted=false] Denotes if this piece is created by pawn promotion.\n\t */\n\tconstructor(piece, pos, promoted = false) {\n\t\t/**\n\t\t * Name of the piece, e.g 'Pb' for the b pawn\n\t\t * @member {String}\n\t\t */\n\t\tthis.name = piece; // piece type\n\n\t\t/**\n\t\t * Current position of this piece: [row,col], with [0,0] being the top left square\n\t\t * @member {Number[]}\n\t\t */\n\t\tthis.pos = pos; // current position in [row, col] notation\n\n\t\t/**\n\t\t * Starting position of this piece: [row,col], with [0,0] being the top left square\n\t\t * @member {Number[]}\n\t\t */\n\t\tthis.defaultPos = pos; // starting position of this piece\n\n\t\t/**\n\t\t * Color of this piece: 'black' or 'white'\n\t\t * @member {String}\n\t\t */\n\t\tthis.color = '';\n\t\tif (promoted) {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'white' : 'black'; // color of piece: 0 white, 1 black\n\t\t} else {\n\t\t\tthis.color = this.defaultPos[0] <= 1 ? 'black' : 'white'; // color of piece: 0 white, 1 black\n\t\t}\n\n\t\tthis.alive = true; // piece alive?\n\t}\n\n\t/**\n\t * Resets this piece to its default position and denotes a new game in the move history tracker.\n\t * @private\n\t */\n\treset() {\n\t\tthis.pos = this.defaultPos;\n\t\tthis.alive = true;\n\t}\n\n\t/**\n\t * Moves this piece to a new position and updates move statistics.\n\t * @private\n\t * @param {Number[]} pos Target row and column of the tile the piece shall move to.\n\t */\n\tupdatePosition(pos) {\n\t\tthis.pos = pos;\n\t}\n\n\t/**\n\t * Marks this piece as taken and updates the statistics of the piece it was taken by.\n\t * @private\n\t * @param {ChessPiece} killedBy Piece this piece was taken by.\n\t */\n\tkillPiece() {\n\t\tthis.alive = false;\n\t}\n}\n\nexport default ChessPiece;\n","/** Class that represents a single Tile. Tracks statistics for itself. */\nclass ChessTile {\n\t/** Creates a new Tile. */\n\tconstructor() {\n\t\t/**\n\t\t * Piece that is currently on this tile.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.piece = null;\n\n\t\t/**\n\t\t * Piece that is on this tile at start of game.\n\t\t * @member {ChessPiece}\n\t\t */\n\t\tthis.defaultPiece = null;\n\t}\n\n\t/**\n\t * Places a piece on this tile. Should only be called at board init.\n\t * @private\n\t * @param {ChessPiece} piece The piece that is on this square by default.\n\t */\n\tinitPiece(piece) {\n\t\tthis.piece = piece;\n\t\tthis.defaultPiece = piece;\n\t}\n\n\t/**\n\t * Sets the currently active piece of this square to the default piece.\n\t * @private\n\t */\n\tresetPiece() {\n\t\tthis.piece = this.defaultPiece;\n\t}\n}\n\nexport default ChessTile;\n","import GameProcessor from './GameProcessor';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/**\n * @typedef {Object} cfg\n * @property {Function} filter - Descr\n * @property {Number} cntGames - Descr\n * @property {Boolean} split - Descr\n */\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\tconstructor() {\n\t\t/**\n\t\t * Contains the tracked data of the processed PGN files. Has two different banks for\n\t\t * heat map comparison. Each object contains the following keys:\n\t\t * <ul>\n\t\t * <li>data: {cntMoves, cntGames}. Information about the count of processed moves and games</li>\n\t\t * <li>tiles: 8x8 array of {@link ChessTile}s.</li>\n\t\t * </ul>\n\t\t * @member {Object[]}\n\t\t */\n\t\tthis.dataStore = new Array(2);\n\t\t/**\n\t\t * Does the analysis part\n\t\t * @private\n\t\t * @member {GameProcessor}\n\t\t */\n\t\tthis.gameProcessor = new GameProcessor();\n\t}\n\n\t/**\n\t * Starts the batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} cfg.stats - Configuration for data aquisition\n\t * @param {Boolean} [cfg.stats.logPieceHistory = false] - Option for logging the position\n\t * of every piece.\n\t * @param {Boolean} [cfg.stats.logTileOccupation = true] - Option for logging the piece\n\t * on every tile after every move.\n\t * @param {Number} [bank = 0] - The data bank the results shall be saved to\n\t * @param {Number} [refreshRate = 250] - Defines how often the current status of the\n\t *  analysis shall be exposed. Every number of processed games an event is emitted\n\t *  containing the current number of processed games. The event can be handled via\n\t *  \"chessalyzer.gameProcessor.on('status', function(gameCnt) {// do handling here});\",\n\t *  e.g. to update an UI.\n\t * @returns {Promise} Promise that contains the number of processed games when finished\n\t */\n\tstartBatch(path, cfg = {}, bank = 0, refreshRate = 250) {\n\t\treturn new Promise((resolve) => {\n\t\t\tconst t0 = performance.now();\n\t\t\tthis.gameProcessor.processPGN(path, cfg, refreshRate).then(() => {\n\t\t\t\tconst t1 = performance.now();\n\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\tconst mps = Math.round(this.gameProcessor.cntMoves / tdiff);\n\t\t\t\tconsole.log(\n\t\t\t\t\t`${this.gameProcessor.cntGames} games (${\n\t\t\t\t\t\tthis.gameProcessor.cntMoves\n\t\t\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t);\n\t\t\t\tthis.gameProcessor.reset();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Number} [bank = 0] - The data bank the data shall be taken from\n\t */\n\tsaveData(path, bank = 0) {\n\t\tfs.writeFile(path, JSON.stringify(this.dataStore[bank]), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @param {Number} [bank = 0] - The data bank the data shall be loaded to.\n\t * @returns {Number} Count of loaded games\n\t */\n\tloadData(path, bank) {\n\t\tthis.dataStore[bank] = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded to bank ${bank}.`);\n\t\treturn this.dataStore[bank].cntGames;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Number} bank - The data bank the data shall be taken from\n\t * @param {String} square - The square the data shall be generated for. For example, if you\n\t * wanted to know how often a specific piece was on a specific tile, you would pass the\n\t * identifier of the tile to the function, e.g. \"a2\"\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. This function gets passed the following arguments:\n\t * <ol>\n\t * <li>The complete data stored in the chosen bank. See the member description of the dataStore\n\t * member to see which data is available.</li>\n\t * <li>The coords of the tile passed as the 'square' argument.</li>\n\t * <li>The current coordinates of the tile the data should be generated for.\n\t * The function must return a Number with the heat map value for the square passed as the\n\t * third argument.</li>\n\t * <li>An optional data field, you passed for 'optData'</li>\n\t * </ol>\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tgenerateHeatmap(bank, square, fun, optData) {\n\t\tconst coords = GameProcessor.algebraicToCoords(square);\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tdataRow[j] = fun(this.dataStore[bank], coords, [i, j], optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks are calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {String} square - The square the data shall be generated for.\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link Chessalyzer#generateHeatmap} for a more detailed description.\n\t * @param {Number} [bank1 = 0] - Bank number of dataset 1\n\t * @param {Number} [bank2 = 1] - Bank number of dataset 2\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tgenerateComparisonHeatmap(square, fun, bank1 = 0, bank2 = 1, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst data0 = this.generateHeatmap(bank1, square, fun, optData);\n\t\tconst data1 = this.generateHeatmap(bank2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = data0[0][i][j];\n\t\t\t\tconst b = data1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic generateList(map) {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tlet val = map[i][j];\n\t\t\t\tval = val.toFixed(2);\n\t\t\t\tif (Math.abs(val) > 0.001) {\n\t\t\t\t\tif (i === 0) list.push([`b${pieceTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 1) list.push([`b${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 6) list.push([`w${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 7) list.push([`w${pieceTemplate[j]}`, val]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist.sort((a, b) => b[1] - a[1]);\n\t\treturn list;\n\t}\n}\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\tcfg.stats = Object.prototype.hasOwnProperty.call(config, 'stats')\n\t\t\t? config.stats\n\t\t\t: {};\n\n\t\t// TODO: currently without function\n\t\tcfg.split = Object.prototype.hasOwnProperty.call(config, 'split')\n\t\t\t? config.split\n\t\t\t: false;\n\n\t\treturn cfg;\n\t}\n\n\tprocessPGN(path, config, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tthis.board.setConfig(cfg.stats);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// data tag\n\t\t\t\tif (line.startsWith('[') && cfg.hasFilter) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\t\t\tconst moveData = this.parseMove(moves[i]);\n\t\t\tthis.board.move(moveData);\n\t\t}\n\t\tthis.cntMoves += moves.length;\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * @typedef {Object} MoveData\n\t * @property {Object[]} moves - Array of {from: [], to: []} objects\n\t * @property {Boolean} takes - Move takes a piece true/false\n\t * @property {String} promotes - Piece type in case of pawn promotion else null\n\t */\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t *  the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t * @returns {MoveData}\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tlet moveData = {};\n\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) !== null) {\n\t\t\tmoveData = null;\n\t\t} else if (token.toLowerCase() === token) {\n\t\t\tmoveData = this.pawnMove(move);\n\t\t} else if (token !== 'O') {\n\t\t\tmoveData = this.pieceMove(move);\n\t\t} else {\n\t\t\tmoveData = this.castle(move);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t * @returns {MoveData}\n\t */\n\tpawnMove(moveSan) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tlet move = moveSan;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol].piece !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].piece.name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmoveData.moves.push({ from, to });\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tmoveData.promotes = move.substring(move.length - 1, move.length);\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t * @returns {MoveData}\n\t */\n\tpieceMove(moveSan) {\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\t\tlet move = moveSan;\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmoveData.takes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tfrom[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\t\t\tto[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tto[1] = files.indexOf(move.substring(2, 3));\n\t\t\tmoveData.moves.push({ from, to });\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tmoveData.moves.push(\n\t\t\t\tthis.findPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token)\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tmoveData.moves.push(this.findPiece(tarRow, tarCol, -1, -1, token));\n\t\t}\n\n\t\treturn moveData;\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2].piece !== null\n\t\t\t\t) {\n\t\t\t\t\tconst { piece } = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.activePlayer % 2 ? 'black' : 'white';\n\t\tconst opColor = this.activePlayer % 2 ? 'white' : 'black';\n\t\tconst king = this.board.pieces[color === 'white' ? 28 : 4].pos;\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]].piece;\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]].piece;\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]].piece = null;\n\t\tthis.board.tiles[to[0]][to[1]].piece = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col].piece !== null\n\t\t\t) {\n\t\t\t\tconst { piece } = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]].piece = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]].piece = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\t/**\n\t * Returns the board coordinates for castling.\n\t * @param {string} move The move to be parsed, e.g. 'O-O'.\n\t * @returns {MoveData.moves}\n\t */\n\tcastle(move) {\n\t\tconst row = this.activePlayer % 2 ? 0 : 7;\n\t\tconst from1 = [];\n\t\tconst from2 = [];\n\t\tconst to1 = [];\n\t\tconst to2 = [];\n\t\tconst moveData = {\n\t\t\tmoves: [],\n\t\t\ttakes: false,\n\t\t\tpromotes: null\n\t\t};\n\n\t\t// O-O\n\t\tif (move.length === 3) {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 6;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 7;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 5;\n\n\t\t\t// O-O-O\n\t\t} else {\n\t\t\tfrom1[0] = row;\n\t\t\tfrom1[1] = 4;\n\t\t\tto1[0] = row;\n\t\t\tto1[1] = 2;\n\t\t\tfrom2[0] = row;\n\t\t\tfrom2[1] = 0;\n\t\t\tto2[0] = row;\n\t\t\tto2[1] = 3;\n\t\t}\n\t\tmoveData.moves.push({ from: from1, to: to1 });\n\t\tmoveData.moves.push({ from: from2, to: to2 });\n\t\treturn moveData;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","/* eslint-disable */\r\nimport Chessalyzer from './Chessalyzer';\r\n\r\nexport default Chessalyzer;\r\n","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"line-by-line\");","module.exports = require(\"perf_hooks\");"],"sourceRoot":""}