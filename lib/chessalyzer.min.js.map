{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/BaseTracker.js","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/./src/PieceTracker.js","webpack://chessalyzer/./src/TileTracker.js","webpack://chessalyzer/./src/GameTracker.js","webpack://chessalyzer/external \"fs\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","performance","require","BaseTracker","type","_classCallCheck","this","profilingActive","time","t0","undefined","track","Error","now","_GameProcessor","_interopRequireDefault","_PieceTracker","_TileTracker","_GameTracker","_BaseTracker","fs","pawnTemplate","pieceTemplate","Chessalyzer","path","analyzer","cfg","arguments","length","callback","fun","rate","analyzerArray","Array","isArray","gameProcessor","default","on","gameCnt","Promise","resolve","processPGN","then","t1","tdiff","Math","round","mps","cntMoves","console","log","concat","cntGames","data","writeFile","JSON","stringify","err","error","parse","readFileSync","square","optData","sqrCoords","sqrAlg","algebraicToCoords","coordsToAlgebraic","sqrData","alg","coords","piece","getStartingPiece","map","max","min","dataRow","j","loopSqrCoords","loopSqrData","push","data1","data2","map0","generateHeatmap","map1","a","b","list","val","toFixed","abs","sort","sqr","color","Tracker","Game","Piece","Tile","Base","_ChessBoard","LineByLineReader","EventEmitter","files","MoveData","san","player","castles","takes","promotesTo","from","to","GameProcessor","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","board","currentMove","activePlayer","gameAnalyzers","moveAnalyzers","config","hasFilter","filter","Infinity","split","temp","indexOf","move","replace","analyzers","refreshRate","_this2","checkConfig","forEach","cntGameAnalyers","reject","lr","skipEmptyLines","game","line","pause","startsWith","match","moves","processGame","emit","close","end","resume","processLine","_this3","parseMove","reset","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","includes","parseInt","tiles","pos","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","kingPos","isInCheck","diff","checkFor","srcTilePiece","tarTilePiece","obstructed","row","col","ChessPiece","ChessBoard","currRow","defaultTiles","arr","slice","w","moveData","castle","tarKingCol","srcRookCol","tarRookCol","rowArray","_BaseTracker2","PieceTracker","keys","startTimer","processTakes","endTimer","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","lastMovedOn","TileTracker","cntMovesGame","cntMovesTotal","_loop","_loop2","resetCurrentPiece","hasPiece","currentPiece","processMove","rook","addOccupation","opPlayer","toAdd","GameTracker","wins","Result"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,iBAAAH,GACA,iBAAAC,QACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,8QClFQC,EAAgBC,EAAQ,GAAxBD,yBAGP,SAAAE,EAAYC,GAMX,+FANiBC,CAAAC,KAAAH,GACjBG,KAAKF,KAAOA,EACZE,KAAKC,iBAAkB,EACvBD,KAAKE,KAAO,EACZF,KAAKG,GAAK,OAESC,IAAfJ,KAAKK,MACR,MAAM,IAAIC,MAAM,kDAEjB,QAAkBF,IAAdJ,KAAKF,KACR,MAAM,IAAIQ,MAAM,kGAKbN,KAAKC,kBAAiBD,KAAKG,GAAKR,EAAYY,0CAI5CP,KAAKC,kBAAiBD,KAAKE,MAAQP,EAAYY,MAAQP,KAAKG,wFCtBlE/C,EAAAD,QAAAyC,QAAA,4CCCA,kFAAAnC,EAAA,yKCDA,IAAA+C,EAAAC,EAAAhD,EAAA,IAEAiD,EAAAD,EAAAhD,EAAA,IACAkD,EAAAF,EAAAhD,EAAA,IACAmD,EAAAH,EAAAhD,EAAA,KACAoD,EAAAJ,EAAAhD,EAAA,iOAEQkC,EAAgBC,EAAQ,GAAxBD,YAEFmB,EAAKlB,EAAQ,IAEbmB,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1DC,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAG3DC,yLAeJC,EACAC,GAGC,IAFDC,EAECC,UAAAC,OAAA,QAAAlB,IAAAiB,UAAA,GAAAA,UAAA,GAFK,GACNE,EACCF,UAAAC,OAAA,QAAAlB,IAAAiB,UAAA,GAAAA,UAAA,GADU,CAAEG,IAAK,aAAUC,KAAM,KAG9BC,EAAgBP,EACfQ,MAAMC,QAAQF,KAClBA,EAAgB,CAACP,IAGlB,IAAMU,EAAgB,IAAArB,EAAAsB,QAOtB,OAJAD,EAAcE,GAAG,SAAU,SAACC,GAC3BT,EAASC,IAAIQ,KAGP,IAAIC,QAAQ,SAACC,GACnB,IAAM/B,EAAKR,EAAYY,MACvBsB,EACEM,WAAWjB,EAAME,EAAKM,EAAeH,EAASE,MAC9CW,KAAK,WACL,IAAMC,EAAK1C,EAAYY,MACjB+B,EAAQC,KAAKC,MAAMH,EAAKlC,GAAM,IAC9BsC,EAAMF,KAAKC,MAAMX,EAAca,SAAWJ,GAEhDK,QAAQC,IAAR,GAAAC,OACIhB,EAAciB,SADlB,YAAAD,OAEEhB,EAAca,SAFhB,yBAAAG,OAGyBP,EAHzB,OAAAO,OAGoCJ,EAHpC,cAKAP,yCAUYhB,EAAM6B,GACrBjC,EAAGkC,UAAU9B,EAAM+B,KAAKC,UAAUH,GAAO,SAACI,GACrCA,EACHR,QAAQS,MAAMD,GAGfR,QAAQC,IAAI,6DASE1B,GACf,IAAM6B,EAAOE,KAAKI,MAAMvC,EAAGwC,aAAapC,EAAM,SAE9C,OADAyB,QAAQC,IAAR,SAAAC,OAAqB3B,EAArB,uBACO6B,0CAoBeA,EAAMQ,EAAQ/B,EAAKgC,GACzC,IAAIC,EACAC,EAGkB,iBAAXH,GACVE,EAAYjD,EAAAsB,QAAc6B,kBAAkBJ,GAC5CG,EAASH,IAITE,EAAYF,EACZG,EAASlD,EAAAsB,QAAc8B,kBAAkBL,IAa1C,IAVA,IACMM,EAAU,CACfC,IAAKJ,EACLK,OAAQN,EACRO,MAJqB/C,EAAYgD,iBAAiBR,IAM7CS,EAAM,GACRC,EAAM,EACNC,EAAM,IAEDzG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE9B,IADA,IAAM0G,EAAU,IAAI1C,MAAM,GACjB2C,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC9B,IAAMC,EAAgB,CAAC5G,EAAG2G,GAKpBE,EAAc,CACnBV,IALkBtD,EAAAsB,QAAc8B,kBAChCW,GAKAR,OAAQQ,EACRP,MAJiB/C,EAAYgD,iBAAiBM,IAO/CF,EAAQC,GAAK9C,EAAIuB,EAAMc,EAASW,EAAahB,GACzCa,EAAQC,GAAKH,IAAKA,EAAME,EAAQC,IAChCD,EAAQC,GAAKF,IAAKA,EAAMC,EAAQC,IAErCJ,EAAIO,KAAKJ,GAGV,MAAO,CAACH,EAAKE,EAAKD,qDAsBcO,EAAOC,EAAOpB,EAAQ/B,EAAKgC,GAS3D,IARA,IAAMU,EAAM,GACRC,EAAM,EACNC,EAAM,IAGJQ,EAAO3D,EAAY4D,gBAAgBH,EAAOnB,EAAQ/B,EAAKgC,GACvDsB,EAAO7D,EAAY4D,gBAAgBF,EAAOpB,EAAQ/B,EAAKgC,GAEpD7F,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE9B,IADA,IAAM0G,EAAU,IAAI1C,MAAM,GACjB2C,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC9B,IAAMS,EAAIH,EAAK,GAAGjH,GAAG2G,GACfU,EAAIF,EAAK,GAAGnH,GAAG2G,GACGD,EAAQC,GAAtB,IAANS,GAAiB,IAANC,EAAsB,EACiB,KAAnCD,GAAKC,EAAID,EAAIC,EAAI,GAAKA,EAAID,EAAI,GAE7CV,EAAQC,GAAKH,IAAKA,EAAME,EAAQC,IAChCD,EAAQC,GAAKF,IAAKA,EAAMC,EAAQC,IAErCJ,EAAIO,KAAKJ,GAGV,MAAO,CAACH,EAAKE,EAAKD,wCAGCD,GAEnB,IADA,IAAMe,EAAO,GACJtH,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC3B,IAAK,IAAI2G,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC9B,IAAIY,EAAMhB,EAAIvG,GAAG2G,GACjBY,EAAMA,EAAIC,QAAQ,GACd5C,KAAK6C,IAAIF,GAAO,OACT,IAANvH,EAASsH,EAAKR,KAAK,KAAA5B,OAAK7B,EAAcsD,IAAMY,IACjC,IAANvH,EAASsH,EAAKR,KAAK,KAAA5B,OAAK9B,EAAauD,IAAMY,IACrC,IAANvH,EAASsH,EAAKR,KAAK,KAAA5B,OAAK9B,EAAauD,IAAMY,IACrC,IAANvH,GAASsH,EAAKR,KAAK,KAAA5B,OAAK7B,EAAcsD,IAAMY,KAKxD,OADAD,EAAKI,KAAK,SAACN,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,KACtBE,2CAGgBK,GACvB,IAAIC,EAAQ,GACRrH,EAAO,GAeX,OAde,IAAXoH,EAAI,IACPC,EAAQ,IACRrH,EAAO8C,EAAcsE,EAAI,KACJ,IAAXA,EAAI,IACdC,EAAQ,IACRrH,EAAO6C,EAAauE,EAAI,KACH,IAAXA,EAAI,IACdC,EAAQ,IACRrH,EAAO6C,EAAauE,EAAI,KACH,IAAXA,EAAI,KACdC,EAAQ,IACRrH,EAAO8C,EAAcsE,EAAI,KAGnB,CAAEC,QAAOrH,qDAIlB+C,EAAYuE,QAAU,CACrBC,KAAI7E,EAAAkB,QACJ4D,MAAKhF,EAAAoB,QACL6D,KAAIhF,EAAAmB,QACJ8D,KAAI/E,EAAAiB,eAGUb,kIC1Pf,MAAA4E,KAAApI,EAAA,oyBAEA,IAAMqI,EAAmBlG,EAAQ,GAC3BmG,EAAenG,EAAQ,GAEvBoG,EAAQ,WAERC,EACL,SAAAA,IAAclG,EAAAC,KAAAiG,GACbjG,KAAKkG,IAAM,GACXlG,KAAKmG,OAAS,GACdnG,KAAKgE,MAAQ,GACbhE,KAAKoG,QAAU,GACfpG,KAAKqG,MAAQ,GACbrG,KAAKsG,WAAa,GAClBtG,KAAKuG,KAAO,EAAE,GAAI,GAClBvG,KAAKwG,GAAK,EAAE,GAAI,kBAQjB,SAAAC,IAAc,IAAAC,EAAA,OAAA3G,EAAAC,KAAAyG,IACbC,EAAAC,EAAA3G,MAAAyG,EAAAG,WAAAvI,OAAAwI,eAAAJ,IAAA3I,KAAAkC,QACK8G,MAAQ,IAAAjB,EAAA/D,QACb4E,EAAKK,YAAc,IAAId,EACvBS,EAAKM,aAAe,EACpBN,EAAKhE,SAAW,EAChBgE,EAAK5D,SAAW,EAChB4D,EAAKO,cAAgB,GACrBP,EAAKQ,cAAgB,GARRR,wPADaX,4CAYRoB,GAClB,IAAM/F,EAAM,GAaZ,OAZAA,EAAIgG,UAAY/I,OAAOkB,UAAUC,eAAe1B,KAAKqJ,EAAQ,UAC7D/F,EAAIiG,OAASjG,EAAIgG,UAAYD,EAAOE,OAAS,kBAAM,GAEnDjG,EAAI0B,SAAWzE,OAAOkB,UAAUC,eAAe1B,KAAKqJ,EAAQ,YACzDA,EAAOrE,SACPwE,IAGHlG,EAAImG,QAAQlJ,OAAOkB,UAAUC,eAAe1B,KAAKqJ,EAAQ,UACtDA,EAAOI,MAGHnG,4CA4nBiBmC,GACxB,IAAMQ,EAAS,GACTyD,EAAOjE,EAAOgE,MAAM,IAI1B,OAHAxD,EAAOU,KAAK,EAAI+C,EAAK,IACrBzD,EAAOU,KAAKuB,EAAMyB,QAAQD,EAAK,KAExBzD,4CAGiBA,GACxB,IAAI7F,EAAO8H,EAAMjC,EAAO,IAGxB,OAFA7F,GAAQ,EAAI6F,EAAO,sCAUF2D,GACjB,OAAOA,EAAKC,QAAQ,aAAc,4CA/oBxBzG,EAAMiG,EAAQS,EAAWC,GAAa,IAAAC,EAAA9H,KAC1CoB,EAAMqF,EAAcsB,YAAYZ,GAEtCS,EAAUI,QAAQ,SAACjD,GACH,SAAXA,EAAEjF,KACLgI,EAAKZ,cAAczC,KAAKM,GACH,SAAXA,EAAEjF,MACZgI,EAAKb,cAAcxC,KAAKM,KAI1B,IAAMkD,EAAkBjI,KAAKiH,cAAc3F,OAE3C,OAAO,IAAIW,QAAQ,SAACC,EAASgG,GAC5B,IAAMC,EAAK,IAAIrC,EAAiB5E,EAAM,CAAEkH,gBAAgB,IACpDC,EAAO,GAyCXF,EAAGpG,GAAG,QAAS,SAACoB,GACfR,QAAQC,IAAIO,GACZ+E,MAGDC,EAAGpG,GAAG,OAAQ,SAACuG,GAEdH,EAAGI,QA7CgB,SAACD,GAEpB,GACCA,EAAKE,WAAW,OACfpH,EAAIgG,WAAaa,EAAkB,GACnC,CACD,IAAM/I,EAAMoJ,EAAKG,MAAM,aAAa,GAC9B7J,EAAQ0J,EAAKG,MAAM,WAAW,GAEpCJ,EAAKnJ,GAAON,OAGF0J,EAAKE,WAAW,OAC1BH,EAAKK,MAAQJ,EACXX,QAAQ,eAAgB,IACxBA,QAAQ,YAAa,IACrBA,QAAQ,KAAM,IACdJ,MAAM,MAEJnG,EAAIiG,OAAOgB,IAAUjH,EAAIgG,WAC5BU,EAAKa,YAAYN,GAIdP,EAAKhF,SAAW+E,GAAgB,GACnCC,EAAKc,KAAK,SAAUd,EAAKhF,UAG1BuF,EAAO,IAEJP,EAAKhF,UAAY1B,EAAI0B,UACxBqF,EAAGU,QACHV,EAAGW,OAEHX,EAAGY,SAaJC,CAAYV,KAGbH,EAAGpG,GAAG,MAAO,WACZY,QAAQC,IAAI,qBACZV,4CAKSmG,GAGX,IAHiB,IAAAY,EAAAjJ,KACT0I,EAAUL,EAAVK,MAEC/K,EAAI,EAAGA,EAAI+K,EAAMpH,OAAQ3D,GAAK,EACtCqC,KAAKgH,aAAerJ,EAAI,EAGxBqC,KAAKkJ,UAAUR,EAAM/K,IAGrBqC,KAAKkH,cAAcc,QAAQ,SAACjD,GAC3BA,EAAE1E,MAAM4I,EAAKlC,eAGd/G,KAAK8G,MAAMY,KAAK1H,KAAK+G,aAEtB/G,KAAK0C,UAAYgG,EAAMpH,OAAS,EAChCtB,KAAK8C,UAAY,EACjB9C,KAAK8G,MAAMqC,QAGXnJ,KAAKiH,cAAce,QAAQ,SAACjD,GAC3BA,EAAE1E,MAAMgI,qCAKTrI,KAAK8G,MAAMqC,QACXnJ,KAAKgH,aAAe,oCAQXoC,GACT,IAAMC,EAAQD,EAAQE,UAAU,EAAG,GAC7B5B,EAAOjB,EAAc8C,WAAWH,GAEtCpJ,KAAK+G,YAAc,IAAId,EACvBjG,KAAK+G,YAAYb,IAAMkD,EACvBpJ,KAAK+G,YAAYZ,OAA+B,IAAtBnG,KAAKgH,aAAqB,IAAM,IAGhC,OAAtBqC,EAAMZ,MAAM,QACXY,EAAMG,gBAAkBH,EAC3BrJ,KAAKyJ,SAAS/B,GACM,MAAV2B,EACVrJ,KAAK0J,UAAUhC,GAEf1H,KAAK+G,YAAYX,QAAUsB,oCASrBiC,GACR,IAAMC,EAAkB5J,KAAKgH,aAAe,GAAzB,EAA8B,EAC3CT,EAAO,GACPC,EAAK,GACPkB,EAAOiC,EACPE,EAAS,EAGb,GAAInC,EAAKoC,SAAS,KACjBpC,EAAOA,EAAKC,QAAQ,IAAK,IAEzBnB,EAAG,GAAK,EAAIuD,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAC3C9C,EAAG,GAAKR,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IACxC/C,EAAK,GAAKC,EAAG,GAAKoD,EAClBrD,EAAK,GAAKP,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IAGH,OAAnCtJ,KAAK8G,MAAMkD,MAAMxD,EAAG,IAAIA,EAAG,MAC9BqD,EAAqC,MAA5B7J,KAAK+G,YAAYZ,OAAiB,GAAK,GAGjDnG,KAAK+G,YAAYV,MAAMrC,MAAQhE,KAAK8G,MAAMkD,MAAMxD,EAAG,GAAKqD,GACvDrD,EAAG,IACFtI,KACF8B,KAAK+G,YAAYV,MAAM4D,IAAM,CAACzD,EAAG,GAAKqD,EAAQrD,EAAG,QAG3C,CACN,IAAM0D,EAAS,EAAIH,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAC5Ca,EAASnE,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IAE/C/C,EAAK,GAAK4D,EACV3D,EAAG,GAAK0D,EACR1D,EAAG,GAAK2D,EACR,IAAK,IAAIxM,EAAIuM,EAASN,EAAWjM,EAAI,GAAKA,GAAK,EAAGA,GAAKiM,EACtD,GAAoC,OAAhC5J,KAAK8G,MAAMkD,MAAMrM,GAAGwM,IACnBnK,KAAK8G,MAAMkD,MAAMrM,GAAGwM,GAAQjM,KAAK4L,SAAS,KAAM,CACnDvD,EAAK,GAAK5I,EACV,OAMJqC,KAAK+G,YAAYP,GAAKA,EACtBxG,KAAK+G,YAAYR,KAAOA,EACxBvG,KAAK+G,YAAY/C,MAAQhE,KAAK8G,MAAMkD,MAAMzD,EAAK,IAAIA,EAAK,IAAIrI,KAGxDwJ,EAAKoC,SAAS,OACjB9J,KAAK+G,YAAYT,WAAaoB,EAAK4B,UAClC5B,EAAKpG,OAAS,EACdoG,EAAKpG,2CASEqI,GACT,IAAIjC,EAAOiC,EACPtD,GAAQ,EACRtC,EAAS,CAAEwC,KAAM,GAAIC,GAAI,IACvB6C,EAAQ3B,EAAK4B,UAAU,EAAG,GAYhC,IATA5B,EAAOA,EAAK4B,UAAU,EAAG5B,EAAKpG,SAGrBwI,SAAS,OACjBzD,GAAQ,EACRqB,EAAOA,EAAKC,QAAQ,IAAK,KAIN,IAAhBD,EAAKpG,OACRyC,EAAOwC,KAAK,GAAK,EAAIwD,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IACpDvF,EAAOwC,KAAK,GAAKP,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IACjDvF,EAAOyC,GAAG,GAAK,EAAIuD,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAClDvF,EAAOyC,GAAG,GAAKR,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,SAGzC,GAAoB,IAAhB5B,EAAKpG,OAAc,CAC7B,IAAM4I,EAAS,EAAIH,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAC5Ca,EAASnE,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IAC3Cc,GAAe,EACfC,GAAe,EAGfrE,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,KAAO,EAC1Ce,EAAcrE,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IAI9Cc,EAAc,EAAIL,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAElDvF,EAAS/D,KAAKsK,UACbJ,EACAC,EACAC,EACAC,EACAhB,OAIK,CACN,IAAMa,EAAS,EAAIH,SAASrC,EAAK4B,UAAU,EAAG,GAAI,IAC5Ca,EAASnE,EAAMyB,QAAQC,EAAK4B,UAAU,EAAG,IAC/CvF,EAAS/D,KAAKsK,UAAUJ,EAAQC,GAAS,GAAI,EAAGd,GAIjDrJ,KAAK+G,YAAYR,KAAOxC,EAAOwC,KAC/BvG,KAAK+G,YAAYP,GAAKzC,EAAOyC,GAC7BxG,KAAK+G,YAAY/C,MAAQhE,KAAK8G,MAAMkD,MAAMjG,EAAOwC,KAAK,IACrDxC,EAAOwC,KAAK,IACXrI,KAEEmI,IACHrG,KAAK+G,YAAYV,MAAMrC,MAAQhE,KAAK8G,MAAMkD,MACzChK,KAAK+G,YAAYP,GAAG,IACnBxG,KAAK+G,YAAYP,GAAG,IAAItI,KAC1B8B,KAAK+G,YAAYV,MAAM4D,IAAMjK,KAAK+G,YAAYP,sCAatC0D,EAAQC,EAAQC,EAAaC,EAAahB,GACnD,IAAI3B,EAqDJ,MAnDc,MAAV2B,EACH3B,EAAO1H,KAAKuK,SACXL,EACAC,EACAC,EACAC,EACAhB,GAEmB,MAAVA,EACV3B,EAAO1H,KAAKwK,SACXN,EACAC,EACAC,EACAC,EACAhB,GAEmB,MAAVA,GAA2B,MAAVA,GAQL,KAPtB3B,EAAO1H,KAAKwK,SACXN,EACAC,EACAC,EACAC,EACAhB,IAEQ9C,KAAK,KACbmB,EAAO1H,KAAKuK,SACXL,EACAC,EACAC,EACAC,EACAhB,IAGkB,MAAVA,IACV3B,EAAO1H,KAAKyK,WACXP,EACAC,EACAC,EACAC,EACAhB,KAGoB,IAAlB3B,EAAKnB,KAAK,KACb5D,QAAQC,IAAR,4BAAAC,OAC6BwG,EAD7B,SAAAxG,OAC0CqH,EAD1C,KAAArH,OACoDsH,EADpD,aAGAxH,QAAQC,IAAI5C,KAAK8C,UACjBH,QAAQC,IAAI5C,KAAK+G,aACjB/G,KAAK8G,MAAM4D,iBAGLhD,mCAYCwC,EAAQC,EAAQC,EAAaC,EAAahB,GAClD,IAAM9D,EAAQvF,KAAK+G,YAAYZ,OAEzBI,EAAO,GACPC,EAAK,GACXD,EAAK,IAAM,EACXA,EAAK,IAAM,EACXC,EAAG,GAAK0D,EACR1D,EAAG,GAAK2D,EAER,IAAK,IAAIxM,GAAK,EAAGA,GAAK,EAAGA,GAAK,EAG7B,IAFA,IAAIgN,GAAc,EACdC,GAAc,EACTtG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC9B,IAAMuG,EAAOrE,EAAG,GAAK7I,EAAI2G,EACnBwG,EAAOtE,EAAG,GAAKlC,EACfyG,EAAOvE,EAAG,GAAK7I,EAAI2G,EACnB0G,EAAOxE,EAAG,GAAKlC,EAErB,IACEqG,GACDE,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjC9K,KAAK8G,MAAMkD,MAAMa,GAAMC,GACtB,CACD,IAAM9G,EAAQhE,KAAK8G,MAAMkD,MAAMa,GAAMC,GACrC,IACC9G,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,IACE,IAAjB6E,GAAsBS,IAAST,IACd,IAAjBC,GAAsBS,IAAST,EAQhCM,GAAc,OANd,IAAK3K,KAAKiL,WAAW,CAACJ,EAAMC,GAAO,CAACtE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKsE,EACVtE,EAAK,GAAKuE,EACH,CAAEvE,OAAMC,MAOlB,IACEoE,GACDG,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjChL,KAAK8G,MAAMkD,MAAMe,GAAMC,GACtB,CACD,IAAMhH,EAAQhE,KAAK8G,MAAMkD,MAAMe,GAAMC,GACrC,IACChH,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,IACE,IAAjB6E,GAAsBW,IAASX,IACd,IAAjBC,GAAsBW,IAASX,EAQhCO,GAAc,OANd,IAAK5K,KAAKiL,WAAW,CAACF,EAAMC,GAAO,CAACxE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKwE,EACVxE,EAAK,GAAKyE,EACH,CAAEzE,OAAMC,OAQpB,MAAO,CAAED,OAAMC,uCAYP0D,EAAQC,EAAQC,EAAaC,EAAahB,GAClD,IAAM9D,EAAQvF,KAAK+G,YAAYZ,OACzBI,EAAO,GACPC,EAAK,GACXD,EAAK,IAAM,EACXA,EAAK,IAAM,EACXC,EAAG,GAAK0D,EACR1D,EAAG,GAAK2D,EAER,IAAK,IAAIxM,GAAK,EAAGA,GAAK,EAAGA,GAAK,EAG7B,IAFA,IAAIgN,GAAc,EACdC,GAAc,EACTtG,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAC9B,IAAMuG,EAAOrE,EAAG,GACVsE,EAAOtE,EAAG,GAAK7I,EAAI2G,EACnByG,EAAOvE,EAAG,GAAK7I,EAAI2G,EACnB0G,EAAOxE,EAAG,GAEhB,IACEmE,GACDE,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjC9K,KAAK8G,MAAMkD,MAAMa,GAAMC,GACtB,CACD,IAAM9G,EAAQhE,KAAK8G,MAAMkD,MAAMa,GAAMC,GACrC,IACC9G,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,IACE,IAAjB6E,GAAsBS,IAAST,IACd,IAAjBC,GAAsBS,IAAST,EAQhCM,GAAc,OANd,IAAK3K,KAAKiL,WAAW,CAACJ,EAAMC,GAAO,CAACtE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKsE,EACVtE,EAAK,GAAKuE,EACH,CAAEvE,OAAMC,MAMlB,IACEoE,GACDG,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjChL,KAAK8G,MAAMkD,MAAMe,GAAMC,GACtB,CACD,IAAMhH,EAAQhE,KAAK8G,MAAMkD,MAAMe,GAAMC,GACrC,IACChH,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,IACE,IAAjB6E,GAAsBW,IAASX,IACd,IAAjBC,GAAsBW,IAASX,EAQhCO,GAAc,OANd,IAAK5K,KAAKiL,WAAW,CAACF,EAAMC,GAAO,CAACxE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKwE,EACVxE,EAAK,GAAKyE,EACH,CAAEzE,OAAMC,OAQpB,MAAO,CAAED,OAAMC,yCAYL0D,EAAQC,EAAQC,EAAaC,EAAahB,GACpD,IAAM9D,EAAQvF,KAAK+G,YAAYZ,OACzBI,EAAO,GACPC,EAAK,GACXD,EAAK,IAAM,EACXA,EAAK,IAAM,EACXC,EAAG,GAAK0D,EACR1D,EAAG,GAAK2D,EAER,IAAK,IAAIxM,GAAK,EAAGA,GAAK,EAAGA,GAAK,EAC7B,IAAK,IAAI2G,GAAK,EAAGA,GAAK,EAAGA,GAAK,EAAG,CAChC,IAAMuG,EAAOrE,EAAG,GAAK7I,EACfmN,EAAOtE,EAAG,GAAKlC,EACfyG,EAAOvE,EAAG,GAAKlC,EACf0G,EAAOxE,EAAG,GAAK7I,EACrB,GACCkN,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjC9K,KAAK8G,MAAMkD,MAAMa,GAAMC,GACtB,CACD,IAAM9G,EAAQhE,KAAK8G,MAAMkD,MAAMa,GAAMC,GACrC,GACC9G,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,KACE,IAAjB6E,GAAsBS,IAAST,MACd,IAAjBC,GAAsBS,IAAST,KAE3BrK,KAAKiL,WAAW,CAACJ,EAAMC,GAAO,CAACtE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKsE,EACVtE,EAAK,GAAKuE,EACH,CAAEvE,OAAMC,MAIlB,GACCuE,GAAQ,GACRA,EAAO,GACPC,GAAQ,GACRA,EAAO,GAC0B,OAAjChL,KAAK8G,MAAMkD,MAAMe,GAAMC,GACtB,CACD,IAAMhH,EAAQhE,KAAK8G,MAAMkD,MAAMe,GAAMC,GACrC,GACChH,EAAM9F,KAAK4L,SAAST,IACpBrF,EAAMuB,QAAUA,KACE,IAAjB6E,GAAsBW,IAASX,MACd,IAAjBC,GAAsBW,IAASX,KAE3BrK,KAAKiL,WAAW,CAACF,EAAMC,GAAO,CAACxE,EAAG,GAAIA,EAAG,KAG7C,OAFAD,EAAK,GAAKwE,EACVxE,EAAK,GAAKyE,EACH,CAAEzE,OAAMC,OAMpB,MAAO,CAAED,OAAMC,yCASLD,EAAMC,GAChB,IAAMjB,EAAQvF,KAAK+G,YAAYZ,OACzB+E,EAAsC,MAA5BlL,KAAK+G,YAAYZ,OAAiB,IAAM,IAClDgF,EAAOnL,KAAK8G,MAAMsE,QAAQ7F,GAC5B8F,GAAY,EAGhB,GAAIF,EAAK,KAAO5E,EAAK,IAAM4E,EAAK,KAAO5E,EAAK,GAAI,OAAO,EAGvD,IAAM+E,EAAO,GACbA,EAAK,GAAK/E,EAAK,GAAK4E,EAAK,GACzBG,EAAK,GAAK/E,EAAK,GAAK4E,EAAK,GACzB,IAAMI,EAAW,GACjB,GAAgB,IAAZD,EAAK,IAAwB,IAAZA,EAAK,GACzBC,EAAS,GAAK,IACdA,EAAS,GAAK,QACR,IAAIhJ,KAAK6C,IAAIkG,EAAK,MAAQ/I,KAAK6C,IAAIkG,EAAK,IAI9C,OAAO,EAHPC,EAAS,GAAK,IACdA,EAAS,GAAK,IAIC,IAAZD,EAAK,KAAUA,EAAK,IAAM/I,KAAK6C,IAAIkG,EAAK,KAC5B,IAAZA,EAAK,KAAUA,EAAK,IAAM/I,KAAK6C,IAAIkG,EAAK,KAE5C,IAAME,EAAexL,KAAK8G,MAAMkD,MAAMzD,EAAK,IAAIA,EAAK,IAC9CkF,EAAezL,KAAK8G,MAAMkD,MAAMxD,EAAG,IAAIA,EAAG,IAGhDxG,KAAK8G,MAAMkD,MAAMzD,EAAK,IAAIA,EAAK,IAAM,KACrCvG,KAAK8G,MAAMkD,MAAMxD,EAAG,IAAIA,EAAG,IAAMgF,EAIjC,IADA,IAAIE,GAAa,EACRpH,EAAI,EAAGA,EAAI,IAAM+G,IAAcK,EAAYpH,GAAK,EAAG,CAC3D,IAAMqH,EAAMR,EAAK,GAAK7G,EAAIgH,EAAK,GACzBM,EAAMT,EAAK,GAAK7G,EAAIgH,EAAK,GAE/B,GACCK,GAAO,GACPA,EAAM,GACNC,GAAO,GACPA,EAAM,GACyB,OAA/B5L,KAAK8G,MAAMkD,MAAM2B,GAAKC,GACrB,CACD,IAAM5H,EAAQhE,KAAK8G,MAAMkD,MAAM2B,GAAKC,IAElC5H,EAAM9F,KAAK4L,SAASyB,EAAS,KAC7BvH,EAAM9F,KAAK4L,SAASyB,EAAS,MAC9BvH,EAAMuB,QAAU2F,EAEhBG,GAAY,EAEZK,GAAa,GAQhB,OAHA1L,KAAK8G,MAAMkD,MAAMzD,EAAK,IAAIA,EAAK,IAAMiF,EACrCxL,KAAK8G,MAAMkD,MAAMxD,EAAG,IAAIA,EAAG,IAAMiF,EAE1BJ,2aC1qBT,IAAMtK,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1DC,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAE3D6K,EACL,SAAAA,EAAY3N,EAAMqH,GAAOxF,EAAAC,KAAA6L,GACxB7L,KAAK9B,KAAOA,EACZ8B,KAAKuF,MAAQA,gBAKd,SAAAuG,IAAc/L,EAAAC,KAAA8L,GACb9L,KAAKgK,MAAQ,IAAIrI,MAAM,GACvB,IAAK,IAAIgK,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CAEpC,IADA,IAAMI,EAAU,IAAIpK,MAAM,GACjBiK,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACpCG,EAAQH,GAAO,KACf,IAAMrG,EAAgB,IAARoG,GAAqB,IAARA,EAAY,IAAM,IAGjC,IAARA,GAAqB,IAARA,EAChBI,EAAQH,GAAO,IAAIC,EAAW7K,EAAc4K,GAAMrG,GAChC,IAARoG,GAAqB,IAARA,IACvBI,EAAQH,GAAO,IAAIC,EAAW9K,EAAa6K,GAAMrG,IAGnDvF,KAAKgK,MAAM2B,GAAOI,EAEnB/L,KAAKgM,aAAehM,KAAKgK,MAAM9F,IAAI,SAAC+H,GAAD,OAASA,EAAIC,UAChDlM,KAAKoL,QAAU,CAAEe,EAAG,CAAC,EAAG,GAAInH,EAAG,CAAC,EAAG,wDAG/BoH,GAAU,IACN7F,EAAS6F,EAAT7F,KACAC,EAAO4F,EAAP5F,GAGiB,KAArB4F,EAAShG,QACZpG,KAAKqM,OAAOD,EAAShG,QAASgG,EAASjG,SAGhB,IAAbI,EAAK,KAEX,QAAS6F,EAAS/F,QACrBrG,KAAKgK,MAAMoC,EAAS/F,MAAM4D,IAAI,IAAImC,EAAS/F,MAAM4D,IAAI,IAAM,MAG5DjK,KAAKgK,MAAMxD,EAAG,IAAIA,EAAG,IAAMxG,KAAKgK,MAAMzD,EAAK,IAAIA,EAAK,IACpDvG,KAAKgK,MAAMzD,EAAK,IAAIA,EAAK,IAAM,KAEH,KAAxB6F,EAAS9F,aACZtG,KAAKgK,MAAMxD,EAAG,IAAIA,EAAG,IAAM,IAAIqF,EAC9BO,EAAS9F,WACT8F,EAASjG,SAI0B,MAAjCiG,EAASlG,IAAIoD,UAAU,EAAG,KAC7BtJ,KAAKoL,QAAQgB,EAASjG,QAAUK,mCAK5BkB,EAAMvB,GACZ,IAAMwF,EAAiB,MAAXxF,EAAiB,EAAI,EAE7BmG,EAAa,EACbC,EAAa,EACbC,EAAa,EAEJ,UAAT9E,IACH4E,EAAa,EACbE,EAAa,EACbD,EAAa,GAEdvM,KAAKgK,MAAM2B,GAAKW,GAActM,KAAKgK,MAAM2B,GAVtB,GAWnB3L,KAAKgK,MAAM2B,GAAKa,GAAcxM,KAAKgK,MAAM2B,GAAKY,GAC9CvM,KAAKgK,MAAM2B,GAZQ,GAYW,KAC9B3L,KAAKgK,MAAM2B,GAAKY,GAAc,KAC9BvM,KAAKoL,QAAQjF,GAAU,CAACwF,EAAKW,mCAI7BtM,KAAKgK,MAAQhK,KAAKgM,aAAa9H,IAAI,SAAC+H,GAAD,OAASA,EAAIC,UAChDlM,KAAKoL,QAAU,CAAEe,EAAG,CAAC,EAAG,GAAInH,EAAG,CAAC,EAAG,4CAKnC,IAAK,IAAI2G,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CAEpC,IADA,IAAMc,EAAW,GACRb,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CACpC,IAAM5H,EAAQhE,KAAKgK,MAAM2B,GAAKC,GAChB,OAAV5H,EACHyI,EAAShI,KAAKT,EAAMuB,MAAQvB,EAAM9F,MAElCuO,EAAShI,KAAK,OAGhB9B,QAAQC,IAAI6J,wFCnGfrP,EAAAD,QAAAyC,QAAA,+BCAAxC,EAAAD,QAAAyC,QAAA,0GCAA,MAAA8M,KAAAjP,EAAA,ssBAEA,IAAMsD,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1DC,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,oBAGhE,SAAA2L,IAAc,IAAAjG,EAAA,mGAAA3G,CAAAC,KAAA2M,IACbjG,EAAAC,EAAA3G,MAAA2M,EAAA/F,WAAAvI,OAAAwI,eAAA8F,IAAA7O,KAAAkC,KAAM,UACDgF,EAAI,GACT0B,EAAKyF,EAAI,GAGTpL,EAAaiH,QAAQ,SAAC9C,GACrBwB,EAAKyF,EAAEjH,GAAO,GACdwB,EAAK1B,EAAEE,GAAO,KAEflE,EAAcgH,QAAQ,SAAC9C,GACtBwB,EAAKyF,EAAEjH,GAAO,GACdwB,EAAK1B,EAAEE,GAAO,KAIf7G,OAAOuO,KAAKlG,EAAKyF,GAAGnE,QAAQ,SAAC9I,GAC5B6B,EAAaiH,QAAQ,SAAC9C,GACrBwB,EAAKyF,EAAEjN,GAAKgG,GAAO,EACnBwB,EAAK1B,EAAE9F,GAAKgG,GAAO,IAEpBlE,EAAcgH,QAAQ,SAAC9C,GACtBwB,EAAKyF,EAAEjN,GAAKgG,GAAO,EACnBwB,EAAK1B,EAAE9F,GAAKgG,GAAO,MAvBRwB,uSA4BR0F,GACLpM,KAAK6M,aADU,IAEP1G,EAAWiG,EAAXjG,OACAnC,EAAUoI,EAAVpI,MACAqC,EAAU+F,EAAV/F,WAEYjG,IAAhBiG,EAAMrC,OACLA,EAAM1C,OAAS,GAAK+E,EAAMrC,MAAM1C,OAAS,GAC5CtB,KAAK8M,aAAa3G,EAAQnC,EAAOqC,EAAMrC,OAGzChE,KAAK+M,gDAGO5G,EAAQ6G,EAAaC,GACjCjN,KAAKmG,GAAQ6G,GAAaC,IAAe,uKCjD3C,MAAAP,KAAAjP,EAAA,oyBAEA,IAAMsD,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC1DC,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAE3DkM,EACL,SAAAA,IAAcnN,EAAAC,KAAAkN,GACblN,KAAKmN,QAAU,EACfnN,KAAKoN,MAAQ,EACbpN,KAAKqN,SAAW,EAChBrN,KAAKsN,YAAc,GAIf5H,EACL,SAAAA,EAAY1B,EAAOuB,GAAOxF,EAAAC,KAAA0F,GACzB1F,KAAKgE,MAAQA,EACbhE,KAAKuF,MAAQA,EACbvF,KAAKuN,YAAc,iBAKpB,SAAAC,IAAc,IAAA9G,EAAA3G,EAAAC,KAAAwN,IACb9G,EAAAC,EAAA3G,MAAAwN,EAAA5G,WAAAvI,OAAAwI,eAAA2G,IAAA1P,KAAAkC,KAAM,UACDyN,aAAe,EACpB/G,EAAKgH,cAAgB,EACrBhH,EAAKsD,MAAQ,IAAIrI,MAAM,GACvB,IALa,IAAAgM,EAAA,SAKJhC,GAER,IADA,IAAMI,EAAU,IAAIpK,MAAM,GANdiM,EAAA,SAOHhC,GACRG,EAAQH,GAAO,CAAE5G,EAAG,GAAImH,EAAG,IAE3BJ,EAAQH,GAAK5G,EAAI,IAAIkI,EACrBnB,EAAQH,GAAKO,EAAI,IAAIe,EACrBnM,EAAaiH,QAAQ,SAAC9C,GACrB6G,EAAQH,GAAK5G,EAAEE,GAAO,IAAIgI,EAC1BnB,EAAQH,GAAKO,EAAEjH,GAAO,IAAIgI,IAE3BlM,EAAcgH,QAAQ,SAAC9C,GACtB6G,EAAQH,GAAK5G,EAAEE,GAAO,IAAIgI,EAC1BnB,EAAQH,GAAKO,EAAEjH,GAAO,IAAIgI,KAXnBtB,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAGgC,EAA5BhC,GAcTlF,EAAKsD,MAAM2B,GAAOI,GAhBVJ,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAGgC,EAA5BhC,GAmBT,IAASA,EAAM,EAAGA,EAAM,EAAGA,GAAO,EACjC,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EACjClF,EAAKmH,kBAAkBlC,EAAKC,GA1BjB,OAAAlF,mTA+BIiF,EAAKC,GACtB,IAAIrG,EACAvB,EACA8J,GAAW,EAEH,IAARnC,GACHpG,EAAQ,IACRvB,EAAQhD,EAAc4K,GACtBkC,GAAW,GACO,IAARnC,GACVpG,EAAQ,IACRvB,EAAQjD,EAAa6K,GACrBkC,GAAW,GACO,IAARnC,GACVpG,EAAQ,IACRvB,EAAQjD,EAAa6K,GACrBkC,GAAW,GACO,IAARnC,IACVpG,EAAQ,IACRvB,EAAQhD,EAAc4K,GACtBkC,GAAW,GAIX9N,KAAKgK,MAAM2B,GAAKC,GAAKmC,aADlBD,EACiC,IAAIpI,EAAM1B,EAAOuB,GAEjB,mCAIhC6G,GACLpM,KAAK6M,aADU,IAGPrG,EAAO4F,EAAP5F,GACAD,EAAS6F,EAAT7F,KACAJ,EAAWiG,EAAXjG,OACAnC,EAAUoI,EAAVpI,MACAqC,EAAU+F,EAAV/F,MACAD,EAAYgG,EAAZhG,QAGR,IAAe,IAAXI,EAAG,GACNxG,KAAKyN,cAAgB,OAEDrN,IAAhBiG,EAAMrC,OACThE,KAAK8M,aAAazG,EAAM4D,IAAK9D,EAAQnC,EAAOqC,EAAMrC,OAGnDhE,KAAKgO,YAAYzH,EAAMC,EAAIL,EAAQnC,QAG7B,GAAgB,KAAZoC,EAAgB,CAC1BpG,KAAKyN,cAAgB,EAErB,IAAM9B,EAAiB,MAAXxF,EAAiB,EAAI,EAC7B8H,EAAO,KACP3B,EAAa,EACbE,EAAa,EACbD,EAAa,EACD,UAAZnG,IACHkG,EAAa,EACbE,EAAa,EACbD,EAAa,EACb0B,EAAO,MAERjO,KAAKgO,YAAY,CAACrC,EAAK,GAAI,CAACA,EAAKW,GAAanG,EAAQ,MACtDnG,KAAKgO,YACJ,CAACrC,EAAKY,GACN,CAACZ,EAAKa,GACNrG,EACA8H,OAIK,CACN,IAAK,IAAItC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EACjC,IAAK,IAAIC,EAAM,EAAGA,EAAM,EAAGA,GAAO,EAAG,CAEf,OADI5L,KAAKgK,MAAM2B,GAAKC,GAAjCmC,cAEP/N,KAAKkO,cAAc,CAACvC,EAAKC,IAE1B5L,KAAK6N,kBAAkBlC,EAAKC,GAG9B5L,KAAK0N,eAAiB1N,KAAKyN,aAC3BzN,KAAKyN,aAAe,EAErBzN,KAAK+M,+CAGMxG,EAAMC,EAAIL,EAAQnC,GACzBA,EAAM1C,OAAS,IAClBtB,KAAKkO,cAAc3H,GAEnBvG,KAAKgK,MAAMxD,EAAG,IAAIA,EAAG,IAAIuH,aAAe/N,KAAKgK,MAAMzD,EAAK,IACvDA,EAAK,IACJwH,aACF/N,KAAKgK,MAAMxD,EAAG,IACbA,EAAG,IACFuH,aAAaR,YAAcvN,KAAKyN,aAElCzN,KAAKgK,MAAMzD,EAAK,IAAIA,EAAK,IAAIwH,aAAe,KAE5C/N,KAAKgK,MAAMxD,EAAG,IAAIA,EAAG,IAAIL,GAAQgH,SAAW,EAC5CnN,KAAKgK,MAAMxD,EAAG,IAAIA,EAAG,IAAIL,GAAQnC,GAAOmJ,SAAW,wCAIxClD,EAAK9D,EAAQ6G,EAAaC,GACtC,GAAIA,EAAW3L,OAAS,EAAG,CAC1B,IAAM6M,EAAsB,MAAXhI,EAAiB,IAAM,IACxCnG,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAIkE,GAAUb,aAAe,EACpDtN,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAIkE,GAAUlB,GAAYK,aAAe,EAEhEtN,KAAKkO,cAAcjE,GACnBjK,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAI8D,aAAe,KAGvCf,EAAY1L,OAAS,IACxBtB,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAI9D,GAAQkH,UAAY,EAC/CrN,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAI9D,GAAQ6G,GAAaK,UAAY,yCAIhDpD,GAAK,IACV8D,EAAiB/N,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAxC8D,aACFK,EAAQpO,KAAKyN,aAAeM,EAAaR,YAC/CvN,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAI8D,EAAaxI,OAAO6H,OAASgB,EACxDpO,KAAKgK,MAAMC,EAAI,IAAIA,EAAI,IAAI8D,EAAaxI,OACvCwI,EAAa/J,OACZoJ,OAASgB,uKCxLb,MAAA1B,KAAAjP,EAAA,wtBAGC,SAAA4Q,IAAc,IAAA3H,EAAA,mGAAA3G,CAAAC,KAAAqO,IACb3H,EAAAC,EAAA3G,MAAAqO,EAAAzH,WAAAvI,OAAAwI,eAAAwH,IAAAvQ,KAAAkC,KAAM,UACDsO,KAAO,CAAC,EAAG,EAAG,GACnB5H,EAAK5D,SAAW,EAHH4D,uSAMR2B,GAIL,OAHArI,KAAK6M,aACL7M,KAAK8C,UAAY,EAETuF,EAAKkG,QACZ,IAAK,MACJvO,KAAKsO,KAAK,IAAM,EAChB,MAED,IAAK,UACJtO,KAAKsO,KAAK,IAAM,EAChB,MAED,IAAK,MACJtO,KAAKsO,KAAK,IAAM,EAMlBtO,KAAK+M,+FC7BP3P,EAAAD,QAAAyC,QAAA","file":"chessalyzer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.profilingActive = false;\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tstartTimer() {\n\t\tif (this.profilingActive) this.t0 = performance.now();\n\t}\n\n\tendTimer() {\n\t\tif (this.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","module.exports = require(\"perf_hooks\");","/* eslint-disable */\nimport Chessalyzer from './Chessalyzer';\n\nexport default Chessalyzer;\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from './PieceTracker';\nimport TileTracker from './TileTracker';\nimport GameTracker from './GameTracker';\nimport BaseTracker from './BaseTracker';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {Array|Object} analyzer - The analysis functions that shall be run\n\t *  during batch processing\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Function} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic startBatch(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\t// callback handler\n\t\tgameProcessor.on('status', (gameCnt) => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tconst t0 = performance.now();\n\t\t\tgameProcessor\n\t\t\t\t.processPGN(path, cfg, analyzerArray, callback.rate)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst t1 = performance.now();\n\t\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\t\tconst mps = Math.round(gameProcessor.cntMoves / tdiff);\n\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`${gameProcessor.cntGames} games (${\n\t\t\t\t\t\t\tgameProcessor.cntMoves\n\t\t\t\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t\t);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {String|Array[Number]} square - The square the data shall be generated for.\n\t * For example, if you wanted to know how often a specific piece was on a specific tile,\n\t * you would pass the identifier of the tile to the function, e.g. \"a2\" or [7,1].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * data.\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tlet sqrCoords;\n\t\tlet sqrAlg;\n\n\t\t// square input type 'a2'\n\t\tif (typeof square === 'string') {\n\t\t\tsqrCoords = GameProcessor.algebraicToCoords(square);\n\t\t\tsqrAlg = square;\n\n\t\t\t// input type [6,0]\n\t\t} else {\n\t\t\tsqrCoords = square;\n\t\t\tsqrAlg = GameProcessor.coordsToAlgebraic(square);\n\t\t}\n\n\t\tconst startingPiece = Chessalyzer.getStartingPiece(sqrCoords);\n\t\tconst sqrData = {\n\t\t\talg: sqrAlg,\n\t\t\tcoords: sqrCoords,\n\t\t\tpiece: startingPiece\n\t\t};\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst loopSqrCoords = [i, j];\n\t\t\t\tconst loopSqrAlg = GameProcessor.coordsToAlgebraic(\n\t\t\t\t\tloopSqrCoords\n\t\t\t\t);\n\t\t\t\tconst loopPiece = Chessalyzer.getStartingPiece(loopSqrCoords);\n\t\t\t\tconst loopSqrData = {\n\t\t\t\t\talg: loopSqrAlg,\n\t\t\t\t\tcoords: loopSqrCoords,\n\t\t\t\t\tpiece: loopPiece\n\t\t\t\t};\n\n\t\t\t\tdataRow[j] = fun(data, sqrData, loopSqrData, optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks is calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {String} square - The square the data shall be generated for.\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link Chessalyzer#generateHeatmap} for a more detailed description.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(data1, data2, square, fun, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic generateList(map) {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tlet val = map[i][j];\n\t\t\t\tval = val.toFixed(2);\n\t\t\t\tif (Math.abs(val) > 0.001) {\n\t\t\t\t\tif (i === 0) list.push([`b${pieceTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 1) list.push([`b${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 6) list.push([`w${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 7) list.push([`w${pieceTemplate[j]}`, val]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist.sort((a, b) => b[1] - a[1]);\n\t\treturn list;\n\t}\n\n\tstatic getStartingPiece(sqr) {\n\t\tlet color = '';\n\t\tlet name = '';\n\t\tif (sqr[0] === 0) {\n\t\t\tcolor = 'b';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 1) {\n\t\t\tcolor = 'b';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 6) {\n\t\t\tcolor = 'w';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 7) {\n\t\t\tcolor = 'w';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t}\n\n\t\treturn { color, name };\n\t}\n}\n\nChessalyzer.Tracker = {\n\tGame: GameTracker,\n\tPiece: PieceTracker,\n\tTile: TileTracker,\n\tBase: BaseTracker\n};\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\t// TODO: currently without function\n\t\tcfg.split = Object.prototype.hasOwnProperty.call(config, 'split')\n\t\t\t? config.split\n\t\t\t: false;\n\n\t\treturn cfg;\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tanalyzers.forEach((a) => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach((a) => {\n\t\t\t\ta.track(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach((a) => {\n\t\t\ta.track(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t * the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tconsole.log(this.cntGames);\n\t\t\tconsole.log(this.currentMove);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.kingPos[color];\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t\tthis.defaultTiles = this.tiles.map((arr) => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// castles\n\t\tif (moveData.castles !== '') {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// takes\n\t\t\tif ('pos' in moveData.takes) {\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// moves\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo !== '') {\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tmoveData.promotesTo,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (moveData.san.substring(0, 1) === 'K') {\n\t\t\t\tthis.kingPos[moveData.player] = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\t\tthis.tiles[row][srcRookCol] = null;\n\t\tthis.kingPos[player] = [row, tarKingCol];\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map((arr) => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.color + piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('...');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","module.exports = require(\"line-by-line\");","module.exports = require(\"events\");","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach((key) => {\n\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tthis.startTimer();\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (piece.length > 1 && takes.piece.length > 1) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t\tthis.endTimer();\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTracker;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass Piece {\n\tconstructor(piece, color) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.lastMovedOn = 0;\n\t}\n}\n\nclass TileTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.cntMovesGame = 0;\n\t\tthis.cntMovesTotal = 0;\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tresetCurrentPiece(row, col) {\n\t\tlet color;\n\t\tlet piece;\n\t\tlet hasPiece = false;\n\n\t\tif (row === 0) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 1) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 6) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 7) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t}\n\n\t\tif (hasPiece) {\n\t\t\tthis.tiles[row][col].currentPiece = new Piece(piece, color);\n\t\t} else {\n\t\t\tthis.tiles[row][col].currentPiece = null;\n\t\t}\n\t}\n\n\ttrack(moveData) {\n\t\tthis.startTimer();\n\n\t\tconst { to } = moveData;\n\t\tconst { from } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\tthis.processMove(from, to, player, piece);\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tlet srcRookCol = 7;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\tsrcRookCol = 0;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, 4], [row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove(\n\t\t\t\t[row, srcRookCol],\n\t\t\t\t[row, tarRookCol],\n\t\t\t\tplayer,\n\t\t\t\trook\n\t\t\t);\n\n\t\t\t// game end\n\t\t} else {\n\t\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t\tconst { currentPiece } = this.tiles[row][col];\n\t\t\t\t\tif (currentPiece !== null) {\n\t\t\t\t\t\tthis.addOccupation([row, col]);\n\t\t\t\t\t}\n\t\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cntMovesTotal += this.cntMovesGame;\n\t\t\tthis.cntMovesGame = 0;\n\t\t}\n\t\tthis.endTimer();\n\t}\n\n\tprocessMove(from, to, player, piece) {\n\t\tif (piece.length > 1) {\n\t\t\tthis.addOccupation(from);\n\n\t\t\tthis.tiles[to[0]][to[1]].currentPiece = this.tiles[from[0]][\n\t\t\t\tfrom[1]\n\t\t\t].currentPiece;\n\t\t\tthis.tiles[to[0]][\n\t\t\t\tto[1]\n\t\t\t].currentPiece.lastMovedOn = this.cntMovesGame;\n\n\t\t\tthis.tiles[from[0]][from[1]].currentPiece = null;\n\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takenPiece.length > 1) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\n\t\t\tthis.addOccupation(pos);\n\t\t\tthis.tiles[pos[0]][pos[1]].currentPiece = null;\n\t\t}\n\n\t\tif (takingPiece.length > 1) {\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t}\n\t}\n\n\taddOccupation(pos) {\n\t\tconst { currentPiece } = this.tiles[pos[0]][pos[1]];\n\t\tconst toAdd = this.cntMovesGame - currentPiece.lastMovedOn;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color].wasOn += toAdd;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color][\n\t\t\tcurrentPiece.piece\n\t\t].wasOn += toAdd;\n\t}\n}\n\nexport default TileTracker;\n","import BaseTracker from './BaseTracker';\n\nclass GameTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t}\n\n\ttrack(game) {\n\t\tthis.startTimer();\n\t\tthis.cntGames += 1;\n\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.endTimer();\n\t}\n}\n\nexport default GameTracker;\n","module.exports = require(\"fs\");"],"sourceRoot":""}