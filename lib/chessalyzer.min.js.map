{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/BaseTracker.js","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/./src/PieceTracker.js","webpack://chessalyzer/./src/TileTracker.js","webpack://chessalyzer/./src/GameTracker.js","webpack://chessalyzer/external \"fs\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","performance","require","constructor","type","this","profilingActive","time","t0","undefined","track","Error","analyze","data","now","Chessalyzer","fs","pawnTemplate","pieceTemplate","[object Object]","path","analyzer","cfg","callback","fun","rate","analyzerArray","Array","isArray","gameProcessor","GameProcessor","on","gameCnt","Promise","resolve","processPGN","then","header","t1","tdiff","Math","round","mps","cntMoves","console","log","cntGames","writeFile","JSON","stringify","err","error","parse","readFileSync","square","optData","sqrCoords","sqrAlg","algebraicToCoords","coordsToAlgebraic","startingPiece","getStartingPiece","sqrData","alg","coords","piece","map","max","min","dataRow","j","loopSqrCoords","loopSqrAlg","loopPiece","loopSqrData","push","data1","data2","map0","generateHeatmap","map1","a","b","sqr","color","Tracker","Game","GameTracker","Piece","PieceTracker","Tile","TileTracker","Base","BaseTracker","LineByLineReader","EventEmitter","files","MoveData","san","player","castles","takes","promotesTo","from","to","super","board","ChessBoard","currentMove","activePlayer","gameAnalyzers","moveAnalyzers","config","hasFilter","filter","Infinity","analyzers","refreshRate","checkConfig","forEach","cntGameAnalyers","length","reject","lr","skipEmptyLines","game","processLine","line","startsWith","match","moves","replace","split","processGame","emit","close","end","resume","pause","parseMove","move","reset","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","includes","parseInt","indexOf","tiles","pos","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","kingPos","isInCheck","diff","checkFor","abs","srcTilePiece","tarTilePiece","obstructed","row","col","temp","ChessPiece","currRow","defaultTiles","arr","slice","w","moveData","castle","tarKingCol","srcRookCol","tarRookCol","rowArray","val","keys","processTakes","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","lastMovedOn","cntMovesGame","cntMovesTotal","resetCurrentPiece","hasPiece","currentPiece","processMove","rook","addOccupation","opPlayer","toAdd","wins","Result"],"mappings":"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","file":"chessalyzer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.profilingActive = false;\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tanalyze(data) {\n\t\tif (this.profilingActive) this.t0 = performance.now();\n\t\tthis.track(data);\n\t\tif (this.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","module.exports = require(\"perf_hooks\");","/* eslint-disable */\nimport Chessalyzer from './Chessalyzer';\n\nexport default Chessalyzer;\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from './PieceTracker';\nimport TileTracker from './TileTracker';\nimport GameTracker from './GameTracker';\nimport BaseTracker from './BaseTracker';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Number} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic startBatch(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\t// callback handler\n\t\tgameProcessor.on('status', gameCnt => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\treturn new Promise(resolve => {\n\t\t\tconst t0 = performance.now();\n\t\t\tgameProcessor\n\t\t\t\t.processPGN(path, cfg, analyzerArray, callback.rate)\n\t\t\t\t.then(header => {\n\t\t\t\t\tconst t1 = performance.now();\n\t\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`${header.cntGames} games (${\n\t\t\t\t\t\t\theader.cntMoves\n\t\t\t\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t\t);\n\t\t\t\t\tresolve(header);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), err => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {(String|Array)} square - The square the data shall be generated for.\n\t * For example, if you wanted to know how often a specific piece was on a specific tile,\n\t * you would pass the identifier of the tile to the function, e.g. \"a2\" or [7,1].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * data.\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tlet sqrCoords;\n\t\tlet sqrAlg;\n\n\t\t// square input type 'a2'\n\t\tif (typeof square === 'string') {\n\t\t\tsqrCoords = GameProcessor.algebraicToCoords(square);\n\t\t\tsqrAlg = square;\n\n\t\t\t// input type [6,0]\n\t\t} else {\n\t\t\tsqrCoords = square;\n\t\t\tsqrAlg = GameProcessor.coordsToAlgebraic(square);\n\t\t}\n\n\t\tconst startingPiece = Chessalyzer.getStartingPiece(sqrCoords);\n\t\tconst sqrData = {\n\t\t\talg: sqrAlg,\n\t\t\tcoords: sqrCoords,\n\t\t\tpiece: startingPiece\n\t\t};\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst loopSqrCoords = [i, j];\n\t\t\t\tconst loopSqrAlg = GameProcessor.coordsToAlgebraic(\n\t\t\t\t\tloopSqrCoords\n\t\t\t\t);\n\t\t\t\tconst loopPiece = Chessalyzer.getStartingPiece(loopSqrCoords);\n\t\t\t\tconst loopSqrData = {\n\t\t\t\t\talg: loopSqrAlg,\n\t\t\t\t\tcoords: loopSqrCoords,\n\t\t\t\t\tpiece: loopPiece\n\t\t\t\t};\n\n\t\t\t\tdataRow[j] = fun(data, sqrData, loopSqrData, optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks is calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {(String|Array)} square - The square the data shall be generated for. Notation\n\t * can be 'a1' or [7,0].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link generateHeatmap} for a more detailed description.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(data1, data2, square, fun, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic getStartingPiece(sqr) {\n\t\tlet color = '';\n\t\tlet name = '';\n\t\tif (sqr[0] === 0) {\n\t\t\tcolor = 'b';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 1) {\n\t\t\tcolor = 'b';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 6) {\n\t\t\tcolor = 'w';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 7) {\n\t\t\tcolor = 'w';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t}\n\n\t\treturn { color, name };\n\t}\n}\n\nChessalyzer.Tracker = {\n\tGame: GameTracker,\n\tPiece: PieceTracker,\n\tTile: TileTracker,\n\tBase: BaseTracker\n};\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\treturn cfg;\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tanalyzers.forEach(a => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = line => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', line => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve({ cntGames: this.cntGames, cntMoves: this.cntMoves });\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach(a => {\n\t\t\t\ta.analyze(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach(a => {\n\t\t\ta.analyze(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t * the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tconsole.log(this.cntGames);\n\t\t\tconsole.log(this.currentMove);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.kingPos[color];\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t\tthis.defaultTiles = this.tiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// castles\n\t\tif (moveData.castles !== '') {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// takes\n\t\t\tif ('pos' in moveData.takes) {\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// moves\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo !== '') {\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tmoveData.promotesTo,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (moveData.san.substring(0, 1) === 'K') {\n\t\t\t\tthis.kingPos[moveData.player] = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\t\tthis.tiles[row][srcRookCol] = null;\n\t\tthis.kingPos[player] = [row, tarKingCol];\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map(arr => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.color + piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('...');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","module.exports = require(\"line-by-line\");","module.exports = require(\"events\");","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach(val => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach(key => {\n\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (piece.length > 1 && takes.piece.length > 1) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTracker;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass Piece {\n\tconstructor(piece, color) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.lastMovedOn = 0;\n\t}\n}\n\nclass TileTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.cntMovesGame = 0;\n\t\tthis.cntMovesTotal = 0;\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach(val => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tresetCurrentPiece(row, col) {\n\t\tlet color;\n\t\tlet piece;\n\t\tlet hasPiece = false;\n\n\t\tif (row === 0) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 1) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 6) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 7) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t}\n\n\t\tif (hasPiece) {\n\t\t\tthis.tiles[row][col].currentPiece = new Piece(piece, color);\n\t\t} else {\n\t\t\tthis.tiles[row][col].currentPiece = null;\n\t\t}\n\t}\n\n\ttrack(moveData) {\n\t\tconst { to } = moveData;\n\t\tconst { from } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\tthis.processMove(from, to, player, piece);\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tlet srcRookCol = 7;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\tsrcRookCol = 0;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, 4], [row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove(\n\t\t\t\t[row, srcRookCol],\n\t\t\t\t[row, tarRookCol],\n\t\t\t\tplayer,\n\t\t\t\trook\n\t\t\t);\n\n\t\t\t// game end\n\t\t} else {\n\t\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t\tconst { currentPiece } = this.tiles[row][col];\n\t\t\t\t\tif (currentPiece !== null) {\n\t\t\t\t\t\tthis.addOccupation([row, col]);\n\t\t\t\t\t}\n\t\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cntMovesTotal += this.cntMovesGame;\n\t\t\tthis.cntMovesGame = 0;\n\t\t}\n\t}\n\n\tprocessMove(from, to, player, piece) {\n\t\tif (piece.length > 1) {\n\t\t\tthis.addOccupation(from);\n\n\t\t\tthis.tiles[to[0]][to[1]].currentPiece = this.tiles[from[0]][\n\t\t\t\tfrom[1]\n\t\t\t].currentPiece;\n\t\t\tthis.tiles[to[0]][\n\t\t\t\tto[1]\n\t\t\t].currentPiece.lastMovedOn = this.cntMovesGame;\n\n\t\t\tthis.tiles[from[0]][from[1]].currentPiece = null;\n\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takenPiece.length > 1) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\n\t\t\tthis.addOccupation(pos);\n\t\t\tthis.tiles[pos[0]][pos[1]].currentPiece = null;\n\t\t}\n\n\t\tif (takingPiece.length > 1) {\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t}\n\t}\n\n\taddOccupation(pos) {\n\t\tconst { currentPiece } = this.tiles[pos[0]][pos[1]];\n\t\tconst toAdd = this.cntMovesGame - currentPiece.lastMovedOn;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color].wasOn += toAdd;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color][\n\t\t\tcurrentPiece.piece\n\t\t].wasOn += toAdd;\n\t}\n}\n\nexport default TileTracker;\n","import BaseTracker from './BaseTracker';\n\nclass GameTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t}\n\n\ttrack(game) {\n\t\tthis.cntGames += 1;\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default GameTracker;\n","module.exports = require(\"fs\");"],"sourceRoot":""}