{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/./src/core/ChessBoard.js","webpack://chessalyzer/./src/core/Chessalyzer.js","webpack://chessalyzer/./src/core/GameProcessor.js","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/./src/tracker/BaseTracker.js","webpack://chessalyzer/./src/tracker/GameTrackerBase.js","webpack://chessalyzer/./src/tracker/PieceTrackerBase.js","webpack://chessalyzer/./src/tracker/TileTrackerBase.js","webpack://chessalyzer/external \"chalk\"","webpack://chessalyzer/external \"cluster\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/external \"fs\"","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/webpack/startup"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","global","pawnTemplate","pieceTemplate","PiecePositionTable","constructor","this","posMap","w","R","Ra","Rh","N","Nb","Ng","B","Bc","Bf","Q","Qd","K","Ke","b","takes","player","piece","includes","substring","moves","to","promotes","on","ChessPiece","name","color","ChessBoard","tiles","Array","row","currRow","col","defaultTiles","map","arr","slice","pieces","promoteCounter","move","moveData","from","castles","castle","pos","promotesTo","pieceName","scrKingCol","tarKingCol","srcRookCol","tarRookCol","reset","printPosition","process","stdout","write","performance","require","chalk","fs","Chessalyzer","path","analyzer","cfg","callback","fun","rate","analyzerArray","isArray","gameProcessor","GameProcessor","gameCnt","t0","now","header","processPGN","t1","tdiff","Math","round","mps","cntMoves","console","log","cntGames","batchSize","nThreads","processPGNMultiCore","data","writeFile","JSON","stringify","err","error","parse","readFileSync","square","optData","sqrCoords","sqrAlg","algebraicToCoords","coordsToAlgebraic","sqrData","alg","coords","getStartingPiece","max","min","i","dataRow","j","loopSqrCoords","loopSqrData","push","data1","data2","map0","generateHeatmap","map1","a","bgColor","length","cnt","alpha","sqrt","toFixed","colorOut","bgRgb","sqr","Tracker","Game","GameTracker","Piece","PieceTracker","Tile","TileTracker","Base","BaseTracker","LineByLineReader","EventEmitter","files","cluster","MoveData","san","super","board","currentMove","activePlayer","gameAnalyzers","moveAnalyzers","config","hasFilter","Object","prototype","hasOwnProperty","call","filter","Infinity","attachAnalyzers","analyzers","forEach","type","Promise","resolve","cntGameAnalyzer","gameAnalyzerStore","moveAnalyzerStore","analyzerNames","analyzerConfigs","readerFinished","customPath","checkAllWorkersFinished","keys","workers","finish","addTrackerData","gameTracker","moveTracker","nMoves","add","forkWorker","games","fork","send","msg","kill","setupMaster","exec","__dirname","checkConfig","game","lr","skipEmptyLines","line","pause","startsWith","key","match","value","replace","split","close","end","resume","nEndForks","ceil","refreshRate","cntGameAnalyers","reject","processLine","processGame","emit","parseMove","analyze","rawMove","token","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","parseInt","indexOf","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","moveCfg","diag","validPieces","values","val","mustBeInFulfilled","abs","idx","diff","steps","apply","dir","sign","obstructed","checkCheck","opColor","king","isInCheck","checkFor","srcTilePiece","tarTilePiece","temp","profilingActive","time","undefined","track","Error","GameTrackerBase","wins","ECO","tracker","Result","sort","reduce","accumulator","currentValue","PieceTrackerBase","pawn","pawn2","piece2","processTakes","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","lastMovedOn","TileTrackerBase","cntMovesGame","cntMovesTotal","resetCurrentPiece","hasPiece","currentPiece","processMove","rook","addOccupation","opPlayer","toAdd","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"chessalyzer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn ","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PiecePositionTable {\n\tconstructor() {\n\t\tthis.posMap = {\n\t\t\tw: {\n\t\t\t\tR: {\n\t\t\t\t\tRa: [7, 0],\n\t\t\t\t\tRh: [7, 7]\n\t\t\t\t},\n\t\t\t\tN: {\n\t\t\t\t\tNb: [7, 1],\n\t\t\t\t\tNg: [7, 6]\n\t\t\t\t},\n\t\t\t\tB: {\n\t\t\t\t\tBc: [7, 2],\n\t\t\t\t\tBf: [7, 5]\n\t\t\t\t},\n\t\t\t\tQ: {\n\t\t\t\t\tQd: [7, 3]\n\t\t\t\t},\n\t\t\t\tK: {\n\t\t\t\t\tKe: [7, 4]\n\t\t\t\t}\n\t\t\t},\n\t\t\tb: {\n\t\t\t\tR: {\n\t\t\t\t\tRa: [0, 0],\n\t\t\t\t\tRh: [0, 7]\n\t\t\t\t},\n\t\t\t\tN: {\n\t\t\t\t\tNb: [0, 1],\n\t\t\t\t\tNg: [0, 6]\n\t\t\t\t},\n\t\t\t\tB: {\n\t\t\t\t\tBc: [0, 2],\n\t\t\t\t\tBf: [0, 5]\n\t\t\t\t},\n\t\t\t\tQ: {\n\t\t\t\t\tQd: [0, 3]\n\t\t\t\t},\n\t\t\t\tK: {\n\t\t\t\t\tKe: [0, 4]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\ttakes(player, piece) {\n\t\tif (!piece.includes('P')) {\n\t\t\tdelete this.posMap[player][piece.substring(0, 1)][piece];\n\t\t}\n\t}\n\n\tmoves(player, piece, to) {\n\t\tif (!piece.includes('P')) {\n\t\t\tthis.posMap[player][piece.substring(0, 1)][piece] = to;\n\t\t}\n\t}\n\n\tpromotes(player, piece, on) {\n\t\tif (!piece.includes('P')) {\n\t\t\tthis.posMap[player][piece.substring(0, 1)][piece] = on;\n\t\t}\n\t}\n}\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tthis.defaultTiles = this.tiles.map((arr) => arr.slice());\n\t\tthis.pieces = new PiecePositionTable();\n\t\tthis.promoteCounter = 0;\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// === castles ===\n\t\tif (moveData.castles) {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// === takes ===\n\t\t\tif (moveData.takes.pos) {\n\t\t\t\t// update piece map\n\t\t\t\tthis.pieces.takes(\n\t\t\t\t\tmoveData.player === 'w' ? 'b' : 'w',\n\t\t\t\t\tmoveData.takes.piece\n\t\t\t\t);\n\n\t\t\t\t// update board\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// === moves ===\n\t\t\t// update piece map\n\t\t\tthis.pieces.moves(moveData.player, moveData.piece, to);\n\n\t\t\t// update board\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo) {\n\t\t\t\tconst pieceName = `${moveData.promotesTo}${this.promoteCounter}`;\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tpieceName,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t\tthis.pieces.promotes(moveData.player, pieceName, to);\n\t\t\t\tthis.promoteCounter += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\t// move king\n\t\tthis.pieces.moves(player, 'Ke', [row, tarKingCol]);\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\n\t\t// move rook\n\t\tthis.pieces.moves(player, this.tiles[row][srcRookCol].name, [\n\t\t\trow,\n\t\t\ttarRookCol\n\t\t]);\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][srcRookCol] = null;\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map((arr) => arr.slice());\n\t\tthis.pieces = new PiecePositionTable();\n\t\tthis.promoteCounter = 0;\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\tprocess.stdout.write(`|${piece.color}${piece.name}|`);\n\t\t\t\t} else {\n\t\t\t\t\tprocess.stdout.write('|...|');\n\t\t\t\t}\n\t\t\t}\n\t\t\tprocess.stdout.write('\\n');\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from '../tracker/PieceTrackerBase';\nimport TileTracker from '../tracker/TileTrackerBase';\nimport GameTracker from '../tracker/GameTrackerBase';\nimport BaseTracker from '../tracker/BaseTracker';\n\nconst { performance } = require('perf_hooks');\nconst chalk = require('chalk');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the singlethreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Number} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic async startBatch(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\t// callback handler\n\t\tgameProcessor.on('status', (gameCnt) => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await gameProcessor.processPGN(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tcallback.rate\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${header.cntMoves} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\treturn header;\n\t}\n\n\t/**\n\t * Starts the multithreaded batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {(Object|Object[])} analyzer - The analysis functions that shall be run\n\t *  during batch processing. Can be one single analyzer or an array of analyzers.\n\t * @param {Numer} [nCores = -1] Numbers of threads to use. Is limited to the max. amount\n\t *  of threads of the running machine.\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @returns {Promise}\n\t */\n\tstatic async startBatchMultiCore(\n\t\tpath,\n\t\tanalyzer,\n\t\tcfg = {},\n\t\tbatchSize = 8000,\n\t\tnThreads = 1\n\t) {\n\t\t// check if single analyzer or array is passed\n\t\tlet analyzerArray = analyzer;\n\t\tif (!Array.isArray(analyzerArray)) {\n\t\t\tanalyzerArray = [analyzer];\n\t\t}\n\t\tconst t0 = performance.now();\n\n\t\tconst header = await GameProcessor.processPGNMultiCore(\n\t\t\tpath,\n\t\t\tcfg,\n\t\t\tanalyzerArray,\n\t\t\tbatchSize,\n\t\t\tnThreads\n\t\t);\n\n\t\tconst t1 = performance.now();\n\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\tconst mps = Math.round(header.cntMoves / tdiff);\n\n\t\tconsole.log(\n\t\t\t`${header.cntGames} games (${header.cntMoves} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t);\n\t\theader.mps = mps;\n\t\treturn header;\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {(String|Array)} square - The square the data shall be generated for.\n\t * For example, if you wanted to know how often a specific piece was on a specific tile,\n\t * you would pass the identifier of the tile to the function, e.g. \"a2\" or [7,1].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * data.\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Object} Array with 3 entries:\n\t * <ol>\n\t * <li>map: 8x8 Array containing the heat map values for each tile</li>\n\t * <li>min: The minimum value in the heatmap.</li>\n\t * <li>max: The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tlet sqrCoords;\n\t\tlet sqrAlg;\n\n\t\t// square input type 'a2'\n\t\tif (typeof square === 'string') {\n\t\t\tsqrCoords = GameProcessor.algebraicToCoords(square);\n\t\t\tsqrAlg = square;\n\n\t\t\t// input type [6,0]\n\t\t} else {\n\t\t\tsqrCoords = square;\n\t\t\tsqrAlg = GameProcessor.coordsToAlgebraic(square);\n\t\t}\n\n\t\tconst startingPiece = Chessalyzer.getStartingPiece(sqrCoords);\n\t\tconst sqrData = {\n\t\t\talg: sqrAlg,\n\t\t\tcoords: sqrCoords,\n\t\t\tpiece: startingPiece\n\t\t};\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst loopSqrCoords = [i, j];\n\t\t\t\tconst loopSqrAlg = GameProcessor.coordsToAlgebraic(\n\t\t\t\t\tloopSqrCoords\n\t\t\t\t);\n\t\t\t\tconst loopPiece = Chessalyzer.getStartingPiece(loopSqrCoords);\n\t\t\t\tconst loopSqrData = {\n\t\t\t\t\talg: loopSqrAlg,\n\t\t\t\t\tcoords: loopSqrCoords,\n\t\t\t\t\tpiece: loopPiece\n\t\t\t\t};\n\n\t\t\t\tdataRow[j] = fun(data, sqrData, loopSqrData, optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn { map, min, max };\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks is calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {(String|Array)} square - The square the data shall be generated for. Notation\n\t * can be 'a1' or [7,0].\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link generateHeatmap} for a more detailed description.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Object} Object with 3 entries:\n\t * <ol>\n\t * <li>map: 8x8 Array containing the heat map values for each tile</li>\n\t * <li>min: The minimum value in the heatmap.</li>\n\t * <li>max: The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(data1, data2, square, fun, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn { map, min, max };\n\t}\n\n\t/**\n\t * Prints a heatmap to the terminal\n\t * @param {Array} map - The heatmap data. An (8x8) Array containing values.\n\t * @param {Number} min - The minimum value in map.\n\t * @param {Number} max - The maximum value in map.\n\t */\n\tstatic printHeatmap(map, min, max) {\n\t\tconst color = [255, 128, 0];\n\t\tconst bgColor = [255, 255, 255];\n\t\tfor (let i = 0; i < map.length; i += 1) {\n\t\t\tfor (let cnt = 0; cnt < 2; cnt += 1) {\n\t\t\t\tfor (let j = 0; j < map[i].length; j += 1) {\n\t\t\t\t\tconst alpha = Math.sqrt(map[i][j] / max).toFixed(2);\n\t\t\t\t\t// const value = map[i][j].toFixed(2);\n\t\t\t\t\tconst colorOut = [\n\t\t\t\t\t\tMath.round(color[0] * alpha + (1 - alpha) * bgColor[0]),\n\t\t\t\t\t\tMath.round(color[1] * alpha + (1 - alpha) * bgColor[1]),\n\t\t\t\t\t\tMath.round(color[2] * alpha + (1 - alpha) * bgColor[2])\n\t\t\t\t\t];\n\n\t\t\t\t\tprocess.stdout.write(\n\t\t\t\t\t\tchalk.bgRgb(\n\t\t\t\t\t\t\tcolorOut[0],\n\t\t\t\t\t\t\tcolorOut[1],\n\t\t\t\t\t\t\tcolorOut[2]\n\t\t\t\t\t\t)('    ')\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tprocess.stdout.write('\\n');\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic getStartingPiece(sqr) {\n\t\tlet color = '';\n\t\tlet name = '';\n\t\tif (sqr[0] === 0) {\n\t\t\tcolor = 'b';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 1) {\n\t\t\tcolor = 'b';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 6) {\n\t\t\tcolor = 'w';\n\t\t\tname = pawnTemplate[sqr[1]];\n\t\t} else if (sqr[0] === 7) {\n\t\t\tcolor = 'w';\n\t\t\tname = pieceTemplate[sqr[1]];\n\t\t}\n\n\t\treturn { color, name };\n\t}\n}\n\nChessalyzer.Tracker = {\n\tGame: GameTracker,\n\tPiece: PieceTracker,\n\tTile: TileTracker,\n\tBase: BaseTracker\n};\n\nexport default Chessalyzer;\n","/* eslint-disable no-inner-declarations */\nimport ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nconst cluster = require('cluster');\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\treturn cfg;\n\t}\n\n\tattachAnalyzers(analyzers) {\n\t\tanalyzers.forEach((a) => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Main analysis function for multithreading. Replays every game in the file and tracks statistics\n\t * @param {string} path Path to the PGN file.\n\t * @param {Function} config.filter - Filter function for selecting games\n\t * @param {Number} config.cntGames - Max amount of games to process\n\t * @param {Array<object>} analyzer An array of tracker objects. The data in the\n\t *  analyzers is processed by reference.\n\t * @param {number} batchSize Amount of games every worker shall process.\n\t * @param {number} nThreads Amount of parallel threads that are started, when\n\t * batchSize * nThreads games have been read in.\n\t * @returns {Promise}\n\t */\n\tstatic processPGNMultiCore(path, config, analyzer, batchSize, nThreads) {\n\t\treturn new Promise((resolve) => {\n\t\t\tlet cntGameAnalyzer = 0;\n\t\t\tconst gameAnalyzerStore = [];\n\t\t\tconst moveAnalyzerStore = [];\n\t\t\tconst analyzerNames = [];\n\t\t\tconst analyzerConfigs = [];\n\t\t\tlet cntGames = 0;\n\t\t\tlet cntMoves = 0;\n\t\t\tlet readerFinished = false;\n\t\t\tlet customPath = '';\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tcluster.setupMaster({\n\t\t\t\texec: `${__dirname}/worker.js`\n\t\t\t});\n\n\t\t\t// split game type trackers and move type trackers\n\t\t\tanalyzer.forEach((a) => {\n\t\t\t\tif (a.type === 'game') {\n\t\t\t\t\tcntGameAnalyzer += 1;\n\t\t\t\t\tgameAnalyzerStore.push(a);\n\t\t\t\t} else if (a.type === 'move') {\n\t\t\t\t\tmoveAnalyzerStore.push(a);\n\t\t\t\t}\n\t\t\t\tanalyzerNames.push(a.constructor.name);\n\t\t\t\tanalyzerConfigs.push(a.cfg);\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(a, 'path')) {\n\t\t\t\t\tcustomPath = a.path;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// checks if all games have been processed\n\t\t\tfunction checkAllWorkersFinished() {\n\t\t\t\tif (\n\t\t\t\t\tObject.keys(cluster.workers).length === 0 &&\n\t\t\t\t\treaderFinished\n\t\t\t\t) {\n\t\t\t\t\t// call finish function for each tracker\n\t\t\t\t\tanalyzer.forEach((a) => {\n\t\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\t\ta.finish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tcntGames,\n\t\t\t\t\t\tcntMoves\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// adds the tracker data of one worker to the master tracker\n\t\t\tfunction addTrackerData(gameTracker, moveTracker, nMoves) {\n\t\t\t\tfor (let i = 0; i < gameAnalyzerStore.length; i += 1) {\n\t\t\t\t\tgameAnalyzerStore[i].add(gameTracker[i]);\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < moveAnalyzerStore.length; i += 1) {\n\t\t\t\t\tmoveAnalyzerStore[i].add(moveTracker[i]);\n\t\t\t\t}\n\t\t\t\tcntMoves += nMoves;\n\t\t\t}\n\n\t\t\t// creates a new worker, that will process an array of games\n\t\t\tfunction forkWorker(games) {\n\t\t\t\tconst w = cluster.fork();\n\n\t\t\t\t// send data to worker\n\t\t\t\tw.send({\n\t\t\t\t\tgames,\n\t\t\t\t\tcustomPath,\n\t\t\t\t\tanalyzerNames,\n\t\t\t\t\tanalyzerConfigs\n\t\t\t\t});\n\n\t\t\t\t// on worker finish\n\t\t\t\tw.on('message', (msg) => {\n\t\t\t\t\taddTrackerData(\n\t\t\t\t\t\tmsg.gameAnalyzers,\n\t\t\t\t\t\tmsg.moveAnalyzers,\n\t\t\t\t\t\tmsg.cntMoves\n\t\t\t\t\t);\n\n\t\t\t\t\tw.kill();\n\n\t\t\t\t\t// if all workers finished, resolve promise\n\t\t\t\t\tcheckAllWorkersFinished();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\t\tlet games = [];\n\t\t\tlet game = {};\n\n\t\t\t// init line-by-line reader\n\t\t\tconst lr = new LineByLineReader(path, {\n\t\t\t\tskipEmptyLines: true\n\t\t\t});\n\n\t\t\t// on error\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\n\t\t\t// on new line\n\t\t\tlr.on('line', (line) => {\n\t\t\t\tlr.pause();\n\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyzer > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tcntGames += 1;\n\t\t\t\t\t\tgames.push(game);\n\n\t\t\t\t\t\t// if enough games have been read in, start worker threads and let them analyze\n\t\t\t\t\t\tif (cntGames % (batchSize * nThreads) === 0) {\n\t\t\t\t\t\t\tfor (let i = 0; i < nThreads; i += 1) {\n\t\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgames = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\t// if on end there are still unprocessed games, start a last worker batch\n\t\t\t\tif (games.length > 0) {\n\t\t\t\t\tif (games.length > batchSize) {\n\t\t\t\t\t\tconst nEndForks = Math.ceil(games.length / batchSize);\n\t\t\t\t\t\tfor (let i = 0; i < nEndForks; i += 1) {\n\t\t\t\t\t\t\tforkWorker(\n\t\t\t\t\t\t\t\tgames.slice(\n\t\t\t\t\t\t\t\t\ti * batchSize,\n\t\t\t\t\t\t\t\t\ti * batchSize + batchSize\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tforkWorker(games);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treaderFinished = true;\n\t\t\t\tcheckAllWorkersFinished();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tthis.attachAnalyzers(analyzers);\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\n\t\t\t\t// call finish routine for each analyzer\n\t\t\t\tthis.gameAnalyzers.forEach((a) => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.moveAnalyzers.forEach((a) => {\n\t\t\t\t\tif (a.finish) {\n\t\t\t\t\t\ta.finish();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresolve({ cntGames: this.cntGames, cntMoves: this.cntMoves });\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach((a) => {\n\t\t\t\ta.analyze(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach((a) => {\n\t\t\ta.analyze(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t * the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Search algorithm to find a piece.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tconst moveCfg = {\n\t\t\tQ: {\n\t\t\t\tline: true,\n\t\t\t\tdiag: true\n\t\t\t},\n\t\t\tR: {\n\t\t\t\tline: true,\n\t\t\t\tdiag: false\n\t\t\t},\n\t\t\tB: {\n\t\t\t\tline: false,\n\t\t\t\tdiag: true\n\t\t\t},\n\t\t\tN: {\n\t\t\t\tline: false,\n\t\t\t\tdiag: false\n\t\t\t}\n\t\t};\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\t// get array of positions of pieces of type <token>\n\t\tlet validPieces = Object.values(this.board.pieces.posMap[color][token]);\n\n\t\t// filter pieces that can reach target square\n\t\tif (validPieces.length > 1) {\n\t\t\tvalidPieces = validPieces.filter((val) => {\n\t\t\t\tconst mustBeInFulfilled =\n\t\t\t\t\t(mustBeInRow === -1 || val[0] === mustBeInRow) &&\n\t\t\t\t\t(mustBeInCol === -1 || val[1] === mustBeInCol);\n\t\t\t\treturn (\n\t\t\t\t\t((moveCfg[token].line &&\n\t\t\t\t\t\t(val[0] === tarRow || val[1] === tarCol)) ||\n\t\t\t\t\t\t(moveCfg[token].diag &&\n\t\t\t\t\t\t\tMath.abs(val[0] - tarRow) ===\n\t\t\t\t\t\t\t\tMath.abs(val[1] - tarCol)) ||\n\t\t\t\t\t\t(token === 'N' &&\n\t\t\t\t\t\t\t((Math.abs(val[0] - tarRow) === 2 &&\n\t\t\t\t\t\t\t\tMath.abs(val[1] - tarCol) === 1) ||\n\t\t\t\t\t\t\t\t(Math.abs(val[0] - tarRow) === 1 &&\n\t\t\t\t\t\t\t\t\tMath.abs(val[1] - tarCol) === 2)))) &&\n\t\t\t\t\tmustBeInFulfilled\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tif (validPieces.length === 1) {\n\t\t\treturn {\n\t\t\t\tfrom: validPieces[0],\n\t\t\t\tto\n\t\t\t};\n\t\t}\n\n\t\tif (validPieces.length > 1) {\n\t\t\tfor (let idx = 0; idx < validPieces.length - 1; idx += 1) {\n\t\t\t\tconst piece = validPieces[idx];\n\t\t\t\tconst diff = [tarRow - piece[0], tarCol - piece[1]];\n\t\t\t\tconst steps = Math.max.apply(null, diff.map(Math.abs));\n\t\t\t\tconst dir = [Math.sign(diff[0]), Math.sign(diff[1])];\n\t\t\t\tlet obstructed = false;\n\t\t\t\tif (token !== 'N') {\n\t\t\t\t\tfor (let i = 1; i < steps && !obstructed; i += 1) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tthis.board.tiles[piece[0] + i * dir[0]][\n\t\t\t\t\t\t\t\tpiece[1] + i * dir[1]\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tobstructed = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!obstructed && !this.checkCheck(piece, to)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfrom: piece,\n\t\t\t\t\t\tto\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tfrom: validPieces[validPieces.length - 1],\n\t\t\t\tto\n\t\t\t};\n\t\t}\n\n\t\tconsole.log(\n\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t);\n\t\tconsole.log(this.cntGames);\n\t\tconsole.log(this.currentMove);\n\t\tthis.board.printPosition();\n\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.pieces.posMap[color].K.Ke;\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","/* eslint-disable */\nimport Chessalyzer from './core/Chessalyzer';\n\nexport default Chessalyzer;\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.cfg = {\n\t\t\tprofilingActive: false\n\t\t};\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tanalyze(data) {\n\t\tif (this.cfg.profilingActive) this.t0 = performance.now();\n\t\tthis.track(data);\n\t\tif (this.cfg.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","import BaseTracker from './BaseTracker';\n\nclass GameTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t\tthis.ECO = {};\n\t}\n\n\tadd(tracker) {\n\t\tthis.wins[0] += tracker.wins[0];\n\t\tthis.wins[1] += tracker.wins[1];\n\t\tthis.wins[2] += tracker.wins[2];\n\t\tthis.cntGames += tracker.cntGames;\n\t\tthis.time += tracker.time;\n\n\t\tObject.keys(tracker.ECO).forEach(key => {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, key)) {\n\t\t\t\tthis.ECO[key] += tracker.ECO[key];\n\t\t\t} else {\n\t\t\t\tthis.ECO[key] = tracker.ECO[key];\n\t\t\t}\n\t\t});\n\t}\n\n\ttrack(game) {\n\t\tthis.cntGames += 1;\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tif (Object.prototype.hasOwnProperty.call(this.ECO, game.ECO)) {\n\t\t\tthis.ECO[game.ECO] += 1;\n\t\t} else {\n\t\t\tthis.ECO[game.ECO] = 1;\n\t\t}\n\t}\n\n\tfinish() {\n\t\t// sort keys\n\t\tthis.ECO = Object.keys(this.ECO)\n\t\t\t.sort()\n\t\t\t.reduce((accumulator, currentValue) => {\n\t\t\t\taccumulator[currentValue] = this.ECO[currentValue];\n\t\t\t\treturn accumulator;\n\t\t\t}, {});\n\t}\n}\n\nexport default GameTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach((key) => {\n\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\n\t\tpawnTemplate.forEach((pawn) => {\n\t\t\tpieceTemplate.forEach((piece) => {\n\t\t\t\tthis.w[pawn][piece] += tracker.w[pawn][piece];\n\t\t\t\tthis.b[pawn][piece] += tracker.b[pawn][piece];\n\t\t\t});\n\t\t\tpawnTemplate.forEach((pawn2) => {\n\t\t\t\tthis.w[pawn][pawn2] += tracker.w[pawn][pawn2];\n\t\t\t\tthis.b[pawn][pawn2] += tracker.b[pawn][pawn2];\n\t\t\t});\n\t\t});\n\t\tpieceTemplate.forEach((piece) => {\n\t\t\tpieceTemplate.forEach((piece2) => {\n\t\t\t\tthis.w[piece][piece2] += tracker.w[piece][piece2];\n\t\t\t\tthis.b[piece][piece2] += tracker.b[piece][piece2];\n\t\t\t});\n\t\t\tpawnTemplate.forEach((pawn) => {\n\t\t\t\tthis.w[piece][pawn] += tracker.w[piece][pawn];\n\t\t\t\tthis.b[piece][pawn] += tracker.b[piece][pawn];\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (\n\t\t\t\tpiece.length > 1 &&\n\t\t\t\ttakes.piece.length > 1 &&\n\t\t\t\t!piece.match(/\\d/g) &&\n\t\t\t\t!takes.piece.match(/\\d/g)\n\t\t\t) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTrackerBase;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass Piece {\n\tconstructor(piece, color) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.lastMovedOn = 0;\n\t}\n}\n\nclass TileTrackerBase extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.cntMovesGame = 0;\n\t\tthis.cntMovesTotal = 0;\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(tracker) {\n\t\tthis.time += tracker.time;\n\t\tthis.cntMovesGame += tracker.cntMovesGame;\n\t\tthis.cntMovesTotal += tracker.cntMovesTotal;\n\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tthis.tiles[row][col].b.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].b.movedTo;\n\t\t\t\tthis.tiles[row][col].w.movedTo +=\n\t\t\t\t\ttracker.tiles[row][col].w.movedTo;\n\n\t\t\t\tthis.tiles[row][col].b.wasOn += tracker.tiles[row][col].b.wasOn;\n\t\t\t\tthis.tiles[row][col].w.wasOn += tracker.tiles[row][col].w.wasOn;\n\n\t\t\t\tthis.tiles[row][col].b.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.killedOn;\n\t\t\t\tthis.tiles[row][col].w.killedOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.killedOn;\n\n\t\t\t\tthis.tiles[row][col].b.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].b.wasKilledOn;\n\t\t\t\tthis.tiles[row][col].w.wasKilledOn +=\n\t\t\t\t\ttracker.tiles[row][col].w.wasKilledOn;\n\n\t\t\t\tpawnTemplate.forEach((piece) => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\n\t\t\t\tpieceTemplate.forEach((piece) => {\n\t\t\t\t\tthis.tiles[row][col].b[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].movedTo;\n\t\t\t\t\tthis.tiles[row][col].w[piece].movedTo +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].movedTo;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].killedOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].killedOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].killedOn;\n\n\t\t\t\t\tthis.tiles[row][col].b[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].b[piece].wasKilledOn;\n\t\t\t\t\tthis.tiles[row][col].w[piece].wasKilledOn +=\n\t\t\t\t\t\ttracker.tiles[row][col].w[piece].wasKilledOn;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tresetCurrentPiece(row, col) {\n\t\tlet color;\n\t\tlet piece;\n\t\tlet hasPiece = false;\n\n\t\tif (row === 0) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 1) {\n\t\t\tcolor = 'b';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 6) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pawnTemplate[col];\n\t\t\thasPiece = true;\n\t\t} else if (row === 7) {\n\t\t\tcolor = 'w';\n\t\t\tpiece = pieceTemplate[col];\n\t\t\thasPiece = true;\n\t\t}\n\n\t\tif (hasPiece) {\n\t\t\tthis.tiles[row][col].currentPiece = new Piece(piece, color);\n\t\t} else {\n\t\t\tthis.tiles[row][col].currentPiece = null;\n\t\t}\n\t}\n\n\ttrack(moveData) {\n\t\tconst { to } = moveData;\n\t\tconst { from } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\tthis.processMove(from, to, player, piece);\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tthis.cntMovesGame += 1;\n\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tlet srcRookCol = 7;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\tsrcRookCol = 0;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, 4], [row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove(\n\t\t\t\t[row, srcRookCol],\n\t\t\t\t[row, tarRookCol],\n\t\t\t\tplayer,\n\t\t\t\trook\n\t\t\t);\n\n\t\t\t// game end\n\t\t} else {\n\t\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\t\tconst { currentPiece } = this.tiles[row][col];\n\t\t\t\t\tif (currentPiece !== null) {\n\t\t\t\t\t\tthis.addOccupation([row, col]);\n\t\t\t\t\t}\n\t\t\t\t\tthis.resetCurrentPiece(row, col);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.cntMovesTotal += this.cntMovesGame;\n\t\t\tthis.cntMovesGame = 0;\n\t\t}\n\t}\n\n\tprocessMove(from, to, player, piece) {\n\t\tif (piece.length > 1 && !piece.match(/\\d/g)) {\n\t\t\tthis.addOccupation(from);\n\n\t\t\tthis.tiles[to[0]][to[1]].currentPiece = this.tiles[from[0]][\n\t\t\t\tfrom[1]\n\t\t\t].currentPiece;\n\t\t\tthis.tiles[to[0]][\n\t\t\t\tto[1]\n\t\t\t].currentPiece.lastMovedOn = this.cntMovesGame;\n\n\t\t\tthis.tiles[from[0]][from[1]].currentPiece = null;\n\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takenPiece.length > 1 && !takenPiece.match(/\\d/g)) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\n\t\t\tthis.addOccupation(pos);\n\t\t\tthis.tiles[pos[0]][pos[1]].currentPiece = null;\n\t\t}\n\n\t\tif (takingPiece.length > 1 && !takingPiece.match(/\\d/g)) {\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t}\n\t}\n\n\taddOccupation(pos) {\n\t\tconst { currentPiece } = this.tiles[pos[0]][pos[1]];\n\t\tconst toAdd = this.cntMovesGame - currentPiece.lastMovedOn;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color].wasOn += toAdd;\n\t\tthis.tiles[pos[0]][pos[1]][currentPiece.color][\n\t\t\tcurrentPiece.piece\n\t\t].wasOn += toAdd;\n\t}\n}\n\nexport default TileTrackerBase;\n","module.exports = require(\"chalk\");;","module.exports = require(\"cluster\");;","module.exports = require(\"events\");;","module.exports = require(\"fs\");;","module.exports = require(\"line-by-line\");;","module.exports = require(\"perf_hooks\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(675);\n"],"sourceRoot":""}