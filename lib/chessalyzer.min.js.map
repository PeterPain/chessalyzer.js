{"version":3,"sources":["webpack://chessalyzer/webpack/universalModuleDefinition","webpack://chessalyzer/webpack/bootstrap","webpack://chessalyzer/./src/BaseTracker.js","webpack://chessalyzer/external \"perf_hooks\"","webpack://chessalyzer/./src/index.js","webpack://chessalyzer/./src/Chessalyzer.js","webpack://chessalyzer/./src/GameProcessor.js","webpack://chessalyzer/./src/ChessBoard.js","webpack://chessalyzer/external \"line-by-line\"","webpack://chessalyzer/external \"events\"","webpack://chessalyzer/./src/PieceTracker.js","webpack://chessalyzer/./src/TileTracker.js","webpack://chessalyzer/./src/GameTracker.js","webpack://chessalyzer/external \"fs\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","performance","require","BaseTracker","type","_classCallCheck","this","profilingActive","time","t0","undefined","track","Error","now","_interopRequireDefault","_GameProcessor","_PieceTracker","_TileTracker","_GameTracker","fs","pawnTemplate","pieceTemplate","Chessalyzer","path","cfg","arguments","length","analyzers","callback","fun","rate","gameProcessor","default","on","gameCnt","Promise","resolve","processPGN","then","t1","tdiff","Math","round","mps","cntMoves","console","log","concat","cntGames","data","writeFile","JSON","stringify","err","error","parse","readFileSync","square","optData","coords","algebraicToCoords","map","max","min","dataRow","Array","j","push","data1","data2","map0","generateHeatmap","map1","a","b","list","val","toFixed","abs","sort","GameTracker","PieceTracker","TileTracker","_ChessBoard","LineByLineReader","EventEmitter","files","MoveData","san","player","piece","castles","takes","promotesTo","from","to","GameProcessor","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","board","currentMove","activePlayer","gameAnalyzers","moveAnalyzers","config","refreshRate","_this2","checkConfig","forEach","cntGameAnalyers","reject","lr","skipEmptyLines","game","line","pause","startsWith","hasFilter","match","moves","replace","split","filter","processGame","emit","close","end","resume","processLine","_this3","parseMove","move","reset","rawMove","token","substring","preProcess","toLowerCase","pawnMove","pieceMove","moveSan","direction","offset","includes","parseInt","indexOf","tiles","pos","tarRow","tarCol","mustBeInRow","mustBeInCol","findPiece","findLine","findDiag","findKnight","printPosition","color","obstructed1","obstructed2","row1","col1","row2","col2","checkCheck","opColor","king","kingPos","isInCheck","diff","checkFor","srcTilePiece","tarTilePiece","obstructed","row","col","Infinity","temp","ChessPiece","ChessBoard","currRow","defaultTiles","arr","slice","w","moveData","castle","tarKingCol","srcRookCol","tarRookCol","rowArray","_BaseTracker2","keys","startTimer","processTakes","endTimer","takingPiece","takenPiece","TileStats","movedTo","wasOn","killedOn","wasKilledOn","_loop","_loop2","processMove","rook","opPlayer","wins","Result"],"mappings":"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","file":"chessalyzer.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"chessalyzer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"chessalyzer\"] = factory();\n\telse\n\t\troot[\"chessalyzer\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","const { performance } = require('perf_hooks');\n\nclass BaseTracker {\n\tconstructor(type) {\n\t\tthis.type = type;\n\t\tthis.profilingActive = false;\n\t\tthis.time = 0;\n\t\tthis.t0 = 0;\n\n\t\tif (this.track === undefined) {\n\t\t\tthrow new Error('Your analyzer must implement a track() method!');\n\t\t}\n\t\tif (this.type === undefined) {\n\t\t\tthrow new Error('Your analyzer must specify a type!');\n\t\t}\n\t}\n\n\tstartTimer() {\n\t\tif (this.profilingActive) this.t0 = performance.now();\n\t}\n\n\tendTimer() {\n\t\tif (this.profilingActive) this.time += performance.now() - this.t0;\n\t}\n}\n\nexport default BaseTracker;\n","module.exports = require(\"perf_hooks\");","/* eslint-disable */\r\nimport Chessalyzer from './Chessalyzer';\r\n\r\nexport default Chessalyzer;\r\n","import GameProcessor from './GameProcessor';\n\nimport PieceTracker from './PieceTracker';\nimport TileTracker from './TileTracker';\nimport GameTracker from './GameTracker';\n\nconst { performance } = require('perf_hooks');\n\nconst fs = require('fs');\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\n/** Main class for batch processing and generating heat maps */\nclass Chessalyzer {\n\t/**\n\t * Starts the batch processing for the selected file\n\t * @param {String} path - Path to the PGN file that should be analyzed\n\t * @param {Object} [cfg = {}]\n\t * @param {Function} [cfg.filter = ()=>true] - Filter function for selecting games\n\t * @param {Number} [cfg.cntGames = Infinite ] - Max amount of games to process\n\t * @param {Array} analyzers - The analysis functions that shall be run during batch processing\n\t * @param {Object} callback - Callback object\n\t * @param {Function} [callback.fun] - Callback function that is called every callback.rate games\n\t * @param {Function} [callback.rate] - Every 'rate' games the callback function is called.\n\t * @returns {Promise}\n\t */\n\tstatic startBatch(\n\t\tpath,\n\t\tcfg = {},\n\t\tanalyzers,\n\t\tcallback = { fun: () => {}, rate: 250 }\n\t) {\n\t\tconst gameProcessor = new GameProcessor();\n\n\t\tgameProcessor.on('status', (gameCnt) => {\n\t\t\tcallback.fun(gameCnt);\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tconst t0 = performance.now();\n\t\t\tgameProcessor\n\t\t\t\t.processPGN(path, cfg, analyzers, callback.rate)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst t1 = performance.now();\n\t\t\t\t\tconst tdiff = Math.round(t1 - t0) / 1000;\n\t\t\t\t\tconst mps = Math.round(gameProcessor.cntMoves / tdiff);\n\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t`${gameProcessor.cntGames} games (${\n\t\t\t\t\t\t\tgameProcessor.cntMoves\n\t\t\t\t\t\t} moves) processed in ${tdiff}s (${mps} moves/s)`\n\t\t\t\t\t);\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Saves a completed batch run to a JSON file\n\t * @param {String} path - Path the data file shall be saved to\n\t * @param {Object} data - The data that shall be saved\n\t */\n\tstatic saveData(path, data) {\n\t\tfs.writeFile(path, JSON.stringify(data), (err) => {\n\t\t\tif (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log('File has been created.');\n\t\t});\n\t}\n\n\t/**\n\t * Loads the stats of a previous batch run (JSON) to a data bank\n\t * @param {String} path - Path the data file shall be loaded from\n\t * @returns {Object} Returns the loaded data\n\t */\n\tstatic loadData(path) {\n\t\tconst data = JSON.parse(fs.readFileSync(path, 'utf8'));\n\t\tconsole.log(`File '${path}' has been loaded.`);\n\t\treturn data;\n\t}\n\n\t/**\n\t * Generates a heatmap out of the tracked data.\n\t * @param {Object} data - Where the data shall be taken from\n\t * @param {String} square - The square the data shall be generated for. For example, if you\n\t * wanted to know how often a specific piece was on a specific tile, you would pass the\n\t * identifier of the tile to the function, e.g. \"a2\"\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. This function gets passed the following arguments:\n\t * <ol>\n\t * <li>The complete data stored in the chosen bank. See the member description of the dataStore\n\t * member to see which data is available.</li>\n\t * <li>The coords of the tile passed as the 'square' argument.</li>\n\t * <li>The current coordinates of the tile the data should be generated for.\n\t * The function must return a Number with the heat map value for the square passed as the\n\t * third argument.</li>\n\t * <li>An optional data field, you passed for 'optData'</li>\n\t * </ol>\n\t * See ./src/exampleHeatmapConfig for examples of such a function.\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateHeatmap(data, square, fun, optData) {\n\t\tconst coords = GameProcessor.algebraicToCoords(square);\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 1000000;\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tdataRow[j] = fun(data, coords, [i, j], optData);\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\t/**\n\t * Generates a comparison heatmap out of the tracked data. There needs to data in both\n\t * banks you pass as bank1 and bank2 params. The heatmap for both banks are calculated\n\t * and then the relative differences between both banks are calculated. For example,\n\t * if the heatmap value for \"a1\" of bank1 is 10 and the value of bank2 is 5, the returned\n\t * value for \"a1\" would be 100% ([[10/5] -1] *100).\n\t * @param {String} square - The square the data shall be generated for.\n\t * @param {Function} fun - The evaluation function that generates the heatmap out of the\n\t * saved data. See {@link Chessalyzer#generateHeatmap} for a more detailed description.\n\t * @param {Object} data1 - Dataset 1\n\t * @param {Object} data2 - Dataset 2\n\t * @param {} optData - Optional data you may need in your eval function\n\t * @returns {Array} Array with 3 entries:\n\t * <ol>\n\t * <li>8x8 Array containing the heat map values for each tile</li>\n\t * <li>The minimum value in the heatmap.</li>\n\t * <li>The maximum value in the heatmap.</li>\n\t * </ol>\n\t */\n\tstatic generateComparisonHeatmap(square, fun, data1, data2, optData) {\n\t\tconst map = [];\n\t\tlet max = 0;\n\t\tlet min = 100000;\n\n\t\t// comparison heatmap\n\t\tconst map0 = Chessalyzer.generateHeatmap(data1, square, fun, optData);\n\t\tconst map1 = Chessalyzer.generateHeatmap(data2, square, fun, optData);\n\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tconst dataRow = new Array(8);\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tconst a = map0[0][i][j];\n\t\t\t\tconst b = map1[0][i][j];\n\t\t\t\tif (a === 0 || b === 0) dataRow[j] = 0;\n\t\t\t\telse dataRow[j] = (a >= b ? a / b - 1 : -b / a + 1) * 100;\n\n\t\t\t\tif (dataRow[j] > max) max = dataRow[j];\n\t\t\t\tif (dataRow[j] < min) min = dataRow[j];\n\t\t\t}\n\t\t\tmap.push(dataRow);\n\t\t}\n\n\t\treturn [map, min, max];\n\t}\n\n\tstatic generateList(map) {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < 8; i += 1) {\n\t\t\tfor (let j = 0; j < 8; j += 1) {\n\t\t\t\tlet val = map[i][j];\n\t\t\t\tval = val.toFixed(2);\n\t\t\t\tif (Math.abs(val) > 0.001) {\n\t\t\t\t\tif (i === 0) list.push([`b${pieceTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 1) list.push([`b${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 6) list.push([`w${pawnTemplate[j]}`, val]);\n\t\t\t\t\telse if (i === 7) list.push([`w${pieceTemplate[j]}`, val]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist.sort((a, b) => b[1] - a[1]);\n\t\treturn list;\n\t}\n}\n\nChessalyzer.GameTracker = GameTracker;\nChessalyzer.PieceTracker = PieceTracker;\nChessalyzer.TileTracker = TileTracker;\n\nexport default Chessalyzer;\n","import ChessBoard from './ChessBoard';\n\nconst LineByLineReader = require('line-by-line');\nconst EventEmitter = require('events');\n\nconst files = 'abcdefgh';\n\nclass MoveData {\n\tconstructor() {\n\t\tthis.san = '';\n\t\tthis.player = '';\n\t\tthis.piece = '';\n\t\tthis.castles = '';\n\t\tthis.takes = {};\n\t\tthis.promotesTo = '';\n\t\tthis.from = [-1, -1];\n\t\tthis.to = [-1, -1];\n\t}\n}\n\n/**\n * Class that processes games.\n */\nclass GameProcessor extends EventEmitter {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.board = new ChessBoard();\n\t\tthis.currentMove = new MoveData();\n\t\tthis.activePlayer = 0;\n\t\tthis.cntMoves = 0;\n\t\tthis.cntGames = 0;\n\t\tthis.gameAnalyzers = [];\n\t\tthis.moveAnalyzers = [];\n\t}\n\n\tstatic checkConfig(config) {\n\t\tconst cfg = {};\n\t\tcfg.hasFilter = Object.prototype.hasOwnProperty.call(config, 'filter');\n\t\tcfg.filter = cfg.hasFilter ? config.filter : () => true;\n\n\t\tcfg.cntGames = Object.prototype.hasOwnProperty.call(config, 'cntGames')\n\t\t\t? config.cntGames\n\t\t\t: Infinity;\n\n\t\t// TODO: currently without function\n\t\tcfg.split = Object.prototype.hasOwnProperty.call(config, 'split')\n\t\t\t? config.split\n\t\t\t: false;\n\n\t\treturn cfg;\n\t}\n\n\tprocessPGN(path, config, analyzers, refreshRate) {\n\t\tconst cfg = GameProcessor.checkConfig(config);\n\n\t\tanalyzers.forEach((a) => {\n\t\t\tif (a.type === 'move') {\n\t\t\t\tthis.moveAnalyzers.push(a);\n\t\t\t} else if (a.type === 'game') {\n\t\t\t\tthis.gameAnalyzers.push(a);\n\t\t\t}\n\t\t});\n\n\t\tconst cntGameAnalyers = this.gameAnalyzers.length;\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lr = new LineByLineReader(path, { skipEmptyLines: true });\n\t\t\tlet game = {};\n\n\t\t\t// process current line\n\t\t\tconst processLine = (line) => {\n\t\t\t\t// data tag\n\t\t\t\tif (\n\t\t\t\t\tline.startsWith('[') &&\n\t\t\t\t\t(cfg.hasFilter || cntGameAnalyers > 0)\n\t\t\t\t) {\n\t\t\t\t\tconst key = line.match(/\\[(.*?)\\s/)[1];\n\t\t\t\t\tconst value = line.match(/\"(.*?)\"/)[1];\n\n\t\t\t\t\tgame[key] = value;\n\n\t\t\t\t\t// moves\n\t\t\t\t} else if (line.startsWith('1')) {\n\t\t\t\t\tgame.moves = line\n\t\t\t\t\t\t.replace(/\\{(.*?)\\}\\s/g, '')\n\t\t\t\t\t\t.replace(/\\d+\\.+\\s/g, '')\n\t\t\t\t\t\t.replace(' *', '')\n\t\t\t\t\t\t.split(' ');\n\n\t\t\t\t\tif (cfg.filter(game) || !cfg.hasFilter) {\n\t\t\t\t\t\tthis.processGame(game);\n\t\t\t\t\t}\n\n\t\t\t\t\t// emit event\n\t\t\t\t\tif (this.cntGames % refreshRate === 0) {\n\t\t\t\t\t\tthis.emit('status', this.cntGames);\n\t\t\t\t\t}\n\n\t\t\t\t\tgame = {};\n\t\t\t\t}\n\t\t\t\tif (this.cntGames >= cfg.cntGames) {\n\t\t\t\t\tlr.close();\n\t\t\t\t\tlr.end();\n\t\t\t\t} else {\n\t\t\t\t\tlr.resume();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlr.on('error', (err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tlr.on('line', (line) => {\n\t\t\t\t// pause emitting of lines...\n\t\t\t\tlr.pause();\n\n\t\t\t\tprocessLine(line);\n\t\t\t});\n\n\t\t\tlr.on('end', () => {\n\t\t\t\tconsole.log('Read entire file.');\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n\n\tprocessGame(game) {\n\t\tconst { moves } = game;\n\n\t\tfor (let i = 0; i < moves.length; i += 1) {\n\t\t\tthis.activePlayer = i % 2;\n\n\t\t\t// fetch move data into this.currentMove\n\t\t\tthis.parseMove(moves[i]);\n\n\t\t\t// move based analyzers\n\t\t\tthis.moveAnalyzers.forEach((a) => {\n\t\t\t\ta.track(this.currentMove);\n\t\t\t});\n\n\t\t\tthis.board.move(this.currentMove);\n\t\t}\n\t\tthis.cntMoves += moves.length - 1; // don't count result (e.g. 1-0)\n\t\tthis.cntGames += 1;\n\t\tthis.board.reset();\n\n\t\t// game based analyzers\n\t\tthis.gameAnalyzers.forEach((a) => {\n\t\t\ta.track(game);\n\t\t});\n\t}\n\n\treset() {\n\t\tthis.board.reset();\n\t\tthis.activePlayer = 0;\n\t}\n\n\t/**\n\t * Parses a move in string format to board coordinates. Wrapper function for\n\t *  the different move algorithms.\n\t * @param {string} rawMove The move to be parsed, e.g. 'Ne5+'.\n\t */\n\tparseMove(rawMove) {\n\t\tconst token = rawMove.substring(0, 1);\n\t\tconst move = GameProcessor.preProcess(rawMove);\n\n\t\tthis.currentMove = new MoveData();\n\t\tthis.currentMove.san = rawMove;\n\t\tthis.currentMove.player = this.activePlayer === 0 ? 'w' : 'b';\n\n\t\t// game end on '1-0', '0-1' or '1/2-1/2' (check for digit as first char)\n\t\tif (token.match(/\\d/) === null) {\n\t\t\tif (token.toLowerCase() === token) {\n\t\t\t\tthis.pawnMove(move);\n\t\t\t} else if (token !== 'O') {\n\t\t\t\tthis.pieceMove(move);\n\t\t\t} else {\n\t\t\t\tthis.currentMove.castles = move;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for the move if it is a pawn move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'e5'.\n\t */\n\tpawnMove(moveSan) {\n\t\tconst direction = -2 * (this.activePlayer % 2) + 1;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tlet move = moveSan;\n\t\tlet offset = 0;\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\tmove = move.replace('x', '');\n\n\t\t\tto[0] = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tto[1] = files.indexOf(move.substring(1, 2));\n\t\t\tfrom[0] = to[0] + direction;\n\t\t\tfrom[1] = files.indexOf(move.substring(0, 1));\n\n\t\t\t// en passant\n\t\t\tif (this.board.tiles[to[0]][to[1]] === null) {\n\t\t\t\toffset = this.currentMove.player === 'w' ? 1 : -1;\n\t\t\t}\n\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[to[0] + offset][\n\t\t\t\tto[1]\n\t\t\t].name;\n\t\t\tthis.currentMove.takes.pos = [to[0] + offset, to[1]];\n\n\t\t\t// moves\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\n\t\t\tfrom[1] = tarCol;\n\t\t\tto[0] = tarRow;\n\t\t\tto[1] = tarCol;\n\t\t\tfor (let i = tarRow + direction; i < 8 && i >= 0; i += direction) {\n\t\t\t\tif (this.board.tiles[i][tarCol] !== null) {\n\t\t\t\t\tif (this.board.tiles[i][tarCol].name.includes('P')) {\n\t\t\t\t\t\tfrom[0] = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.currentMove.to = to;\n\t\tthis.currentMove.from = from;\n\t\tthis.currentMove.piece = this.board.tiles[from[0]][from[1]].name;\n\n\t\t// promotes\n\t\tif (move.includes('=')) {\n\t\t\tthis.currentMove.promotesTo = move.substring(\n\t\t\t\tmove.length - 1,\n\t\t\t\tmove.length\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the board coordinates for a piece (!= pawn) move.\n\t * @param {string} moveSan The move to be parsed, e.g. 'Be3'.\n\t */\n\tpieceMove(moveSan) {\n\t\tlet move = moveSan;\n\t\tlet takes = false;\n\t\tlet coords = { from: [], to: [] };\n\t\tconst token = move.substring(0, 1);\n\n\t\t// remove token\n\t\tmove = move.substring(1, move.length);\n\n\t\t// takes\n\t\tif (move.includes('x')) {\n\t\t\ttakes = true;\n\t\t\tmove = move.replace('x', '');\n\t\t}\n\n\t\t// e.g. Re3f5\n\t\tif (move.length === 4) {\n\t\t\tcoords.from[0] = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tcoords.from[1] = files.indexOf(move.substring(0, 1));\n\t\t\tcoords.to[0] = 8 - parseInt(move.substring(3, 4), 10);\n\t\t\tcoords.to[1] = files.indexOf(move.substring(2, 3));\n\n\t\t\t// e.g. Ref3\n\t\t} else if (move.length === 3) {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(2, 3), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(1, 2));\n\t\t\tlet mustBeInRow = -1;\n\t\t\tlet mustBeInCol = -1;\n\n\t\t\t// file is specified\n\t\t\tif (files.indexOf(move.substring(0, 1)) >= 0) {\n\t\t\t\tmustBeInCol = files.indexOf(move.substring(0, 1));\n\n\t\t\t\t// rank is specified\n\t\t\t} else {\n\t\t\t\tmustBeInRow = 8 - parseInt(move.substring(0, 1), 10);\n\t\t\t}\n\t\t\tcoords = this.findPiece(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\t// e.g. Rf3\n\t\t} else {\n\t\t\tconst tarRow = 8 - parseInt(move.substring(1, 2), 10);\n\t\t\tconst tarCol = files.indexOf(move.substring(0, 1));\n\t\t\tcoords = this.findPiece(tarRow, tarCol, -1, -1, token);\n\t\t}\n\n\t\t// set move data\n\t\tthis.currentMove.from = coords.from;\n\t\tthis.currentMove.to = coords.to;\n\t\tthis.currentMove.piece = this.board.tiles[coords.from[0]][\n\t\t\tcoords.from[1]\n\t\t].name;\n\n\t\tif (takes) {\n\t\t\tthis.currentMove.takes.piece = this.board.tiles[\n\t\t\t\tthis.currentMove.to[0]\n\t\t\t][this.currentMove.to[1]].name;\n\t\t\tthis.currentMove.takes.pos = this.currentMove.to;\n\t\t}\n\t}\n\n\t/**\n\t * Wrapper function for different piece search algorithms.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindPiece(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tlet move;\n\n\t\tif (token === 'R') {\n\t\t\tmove = this.findLine(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'B') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t} else if (token === 'Q' || token === 'K') {\n\t\t\tmove = this.findDiag(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t\tif (move.from[0] === -1) {\n\t\t\t\tmove = this.findLine(\n\t\t\t\t\ttarRow,\n\t\t\t\t\ttarCol,\n\t\t\t\t\tmustBeInRow,\n\t\t\t\t\tmustBeInCol,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (token === 'N') {\n\t\t\tmove = this.findKnight(\n\t\t\t\ttarRow,\n\t\t\t\ttarCol,\n\t\t\t\tmustBeInRow,\n\t\t\t\tmustBeInCol,\n\t\t\t\ttoken\n\t\t\t);\n\t\t}\n\t\tif (move.from[0] === -1) {\n\t\t\tconsole.log(\n\t\t\t\t`Error: no piece for move ${token} to (${tarRow},${tarCol}) found!`\n\t\t\t);\n\t\t\tconsole.log(this.cntGames);\n\t\t\tconsole.log(this.currentMove);\n\t\t\tthis.board.printPosition();\n\t\t}\n\n\t\treturn move;\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move diagonally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindDiag(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0] + i * j;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1] - j;\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a piece that can move vertically/horizontally.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindLine(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -1; i <= 1; i += 2) {\n\t\t\tlet obstructed1 = false;\n\t\t\tlet obstructed2 = false;\n\t\t\tfor (let j = 1; j < 8; j += 1) {\n\t\t\t\tconst row1 = to[0];\n\t\t\t\tconst col1 = to[1] - i * j;\n\t\t\t\tconst row2 = to[0] - i * j;\n\t\t\t\tconst col2 = to[1];\n\n\t\t\t\tif (\n\t\t\t\t\t!obstructed1 &&\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed1 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\t!obstructed2 &&\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobstructed2 = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Search algorithm to find a matching knight.\n\t * @param {number} tarRow Target row for piece move.\n\t * @param {number} tarCol Target column for piece move.\n\t * @param {number} mustBeInRow Moving piece must be in this row. '-1' if unknown.\n\t * @param {number} mustBeInCol Moving piece must be in this column. '-1' if unknown.\n\t * @param {string} token Moving piece must be of this type, e.g 'R'.\n\t * @returns {Object}\n\t */\n\tfindKnight(tarRow, tarCol, mustBeInRow, mustBeInCol, token) {\n\t\tconst color = this.currentMove.player;\n\t\tconst from = [];\n\t\tconst to = [];\n\t\tfrom[0] = -1;\n\t\tfrom[1] = -1;\n\t\tto[0] = tarRow;\n\t\tto[1] = tarCol;\n\n\t\tfor (let i = -2; i <= 2; i += 4) {\n\t\t\tfor (let j = -1; j <= 1; j += 2) {\n\t\t\t\tconst row1 = to[0] + i;\n\t\t\t\tconst col1 = to[1] + j;\n\t\t\t\tconst row2 = to[0] + j;\n\t\t\t\tconst col2 = to[1] + i;\n\t\t\t\tif (\n\t\t\t\t\trow1 >= 0 &&\n\t\t\t\t\trow1 < 8 &&\n\t\t\t\t\tcol1 >= 0 &&\n\t\t\t\t\tcol1 < 8 &&\n\t\t\t\t\tthis.board.tiles[row1][col1] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row1][col1];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row1 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col1 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row1, col1], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row1;\n\t\t\t\t\t\t\tfrom[1] = col1;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trow2 >= 0 &&\n\t\t\t\t\trow2 < 8 &&\n\t\t\t\t\tcol2 >= 0 &&\n\t\t\t\t\tcol2 < 8 &&\n\t\t\t\t\tthis.board.tiles[row2][col2] !== null\n\t\t\t\t) {\n\t\t\t\t\tconst piece = this.board.tiles[row2][col2];\n\t\t\t\t\tif (\n\t\t\t\t\t\tpiece.name.includes(token) &&\n\t\t\t\t\t\tpiece.color === color &&\n\t\t\t\t\t\t(mustBeInRow === -1 || row2 === mustBeInRow) &&\n\t\t\t\t\t\t(mustBeInCol === -1 || col2 === mustBeInCol)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.checkCheck([row2, col2], [to[0], to[1]])) {\n\t\t\t\t\t\t\tfrom[0] = row2;\n\t\t\t\t\t\t\tfrom[1] = col2;\n\t\t\t\t\t\t\treturn { from, to };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { from, to };\n\t}\n\n\t/**\n\t * Checks if the input move would be resulting with the king being in check.\n\t * @param {Number[]} from Coordinates of the source tile of the move that shall be checked.\n\t *  @param {Number[]} to Coordinates of the target tile of the move that shall be checked.\n\t * @returns {boolean} After the move, the king will be in check true/false.\n\t */\n\tcheckCheck(from, to) {\n\t\tconst color = this.currentMove.player;\n\t\tconst opColor = this.currentMove.player === 'w' ? 'b' : 'w';\n\t\tconst king = this.board.kingPos[color];\n\t\tlet isInCheck = false;\n\n\t\t// if king move, no check is possible, exit function\n\t\tif (king[0] === from[0] && king[1] === from[1]) return false;\n\n\t\t// check if moving piece is on same line/diag as king, else exit\n\t\tconst diff = [];\n\t\tdiff[0] = from[0] - king[0];\n\t\tdiff[1] = from[1] - king[1];\n\t\tconst checkFor = [];\n\t\tif (diff[0] === 0 || diff[1] === 0) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'R';\n\t\t} else if (Math.abs(diff[0]) === Math.abs(diff[1])) {\n\t\t\tcheckFor[0] = 'Q';\n\t\t\tcheckFor[1] = 'B';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif (diff[0] !== 0) diff[0] /= Math.abs(diff[0]);\n\t\tif (diff[1] !== 0) diff[1] /= Math.abs(diff[1]);\n\n\t\tconst srcTilePiece = this.board.tiles[from[0]][from[1]];\n\t\tconst tarTilePiece = this.board.tiles[to[0]][to[1]];\n\n\t\t// premove and check if check\n\t\tthis.board.tiles[from[0]][from[1]] = null;\n\t\tthis.board.tiles[to[0]][to[1]] = srcTilePiece;\n\n\t\t// check for check\n\t\tlet obstructed = false;\n\t\tfor (let j = 1; j < 8 && !isInCheck && !obstructed; j += 1) {\n\t\t\tconst row = king[0] + j * diff[0];\n\t\t\tconst col = king[1] + j * diff[1];\n\n\t\t\tif (\n\t\t\t\trow >= 0 &&\n\t\t\t\trow < 8 &&\n\t\t\t\tcol >= 0 &&\n\t\t\t\tcol < 8 &&\n\t\t\t\tthis.board.tiles[row][col] !== null\n\t\t\t) {\n\t\t\t\tconst piece = this.board.tiles[row][col];\n\t\t\t\tif (\n\t\t\t\t\t(piece.name.includes(checkFor[0]) ||\n\t\t\t\t\t\tpiece.name.includes(checkFor[1])) &&\n\t\t\t\t\tpiece.color === opColor\n\t\t\t\t) {\n\t\t\t\t\tisInCheck = true;\n\t\t\t\t} else {\n\t\t\t\t\tobstructed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.board.tiles[from[0]][from[1]] = srcTilePiece;\n\t\tthis.board.tiles[to[0]][to[1]] = tarTilePiece;\n\n\t\treturn isInCheck;\n\t}\n\n\tstatic algebraicToCoords(square) {\n\t\tconst coords = [];\n\t\tconst temp = square.split('');\n\t\tcoords.push(8 - temp[1]);\n\t\tcoords.push(files.indexOf(temp[0]));\n\n\t\treturn coords;\n\t}\n\n\tstatic coordsToAlgebraic(coords) {\n\t\tlet name = files[coords[1]];\n\t\tname += 8 - coords[0];\n\n\t\treturn name;\n\t}\n\n\t/**\n\t * Removes special characters like '#', '+', '?' and '!'\n\t * @param {string} move The move to be cleaned up\n\t * @returns {string} The input string with removed special characters\n\t */\n\tstatic preProcess(move) {\n\t\treturn move.replace(/#|\\+|\\?|!/g, '');\n\t}\n}\n\nexport default GameProcessor;\n","const pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass ChessPiece {\n\tconstructor(name, color) {\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t}\n}\n\nclass ChessBoard {\n\tconstructor() {\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = null;\n\t\t\t\tconst color = row === 0 || row === 1 ? 'b' : 'w';\n\n\t\t\t\t// init pieces\n\t\t\t\tif (row === 0 || row === 7) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pieceTemplate[col], color);\n\t\t\t\t} else if (row === 1 || row === 6) {\n\t\t\t\t\tcurrRow[col] = new ChessPiece(pawnTemplate[col], color);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\t\tthis.defaultTiles = this.tiles.map((arr) => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\tmove(moveData) {\n\t\tconst { from } = moveData;\n\t\tconst { to } = moveData;\n\n\t\t// castles\n\t\tif (moveData.castles !== '') {\n\t\t\tthis.castle(moveData.castles, moveData.player);\n\n\t\t\t// moves/takes\n\t\t} else if (from[0] !== -1) {\n\t\t\t// takes\n\t\t\tif ('pos' in moveData.takes) {\n\t\t\t\tthis.tiles[moveData.takes.pos[0]][moveData.takes.pos[1]] = null;\n\t\t\t}\n\t\t\t// moves\n\t\t\tthis.tiles[to[0]][to[1]] = this.tiles[from[0]][from[1]];\n\t\t\tthis.tiles[from[0]][from[1]] = null;\n\n\t\t\tif (moveData.promotesTo !== '') {\n\t\t\t\tthis.tiles[to[0]][to[1]] = new ChessPiece(\n\t\t\t\t\tmoveData.promotesTo,\n\t\t\t\t\tmoveData.player\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (moveData.san.substring(0, 1) === 'K') {\n\t\t\t\tthis.kingPos[moveData.player] = to;\n\t\t\t}\n\t\t}\n\t}\n\n\tcastle(move, player) {\n\t\tconst row = player === 'w' ? 7 : 0;\n\t\tconst scrKingCol = 4;\n\t\tlet tarKingCol = 6;\n\t\tlet srcRookCol = 7;\n\t\tlet tarRookCol = 5;\n\n\t\tif (move === 'O-O-O') {\n\t\t\ttarKingCol = 2;\n\t\t\ttarRookCol = 3;\n\t\t\tsrcRookCol = 0;\n\t\t}\n\t\tthis.tiles[row][tarKingCol] = this.tiles[row][scrKingCol];\n\t\tthis.tiles[row][tarRookCol] = this.tiles[row][srcRookCol];\n\t\tthis.tiles[row][scrKingCol] = null;\n\t\tthis.tiles[row][srcRookCol] = null;\n\t\tthis.kingPos[player] = [row, tarKingCol];\n\t}\n\n\treset() {\n\t\tthis.tiles = this.defaultTiles.map((arr) => arr.slice());\n\t\tthis.kingPos = { w: [7, 4], b: [0, 4] };\n\t}\n\n\t/** Prints the current board position to the console. */\n\tprintPosition() {\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst rowArray = [];\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tconst piece = this.tiles[row][col];\n\t\t\t\tif (piece !== null) {\n\t\t\t\t\trowArray.push(piece.color + piece.name);\n\t\t\t\t} else {\n\t\t\t\t\trowArray.push('...');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(rowArray);\n\t\t}\n\t}\n}\n\nexport default ChessBoard;\n","module.exports = require(\"line-by-line\");","module.exports = require(\"events\");","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass PieceTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.b = {};\n\t\tthis.w = {};\n\n\t\t// first layer\n\t\tpawnTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\t\tpieceTemplate.forEach((val) => {\n\t\t\tthis.w[val] = {};\n\t\t\tthis.b[val] = {};\n\t\t});\n\n\t\t// second layer\n\t\tObject.keys(this.w).forEach((key) => {\n\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\tthis.w[key][val] = 0;\n\t\t\t\tthis.b[key][val] = 0;\n\t\t\t});\n\t\t});\n\t}\n\n\ttrack(moveData) {\n\t\tthis.startTimer();\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\n\t\tif (takes.piece !== undefined) {\n\t\t\tif (piece.length > 1 && takes.piece.length > 1) {\n\t\t\t\tthis.processTakes(player, piece, takes.piece);\n\t\t\t}\n\t\t}\n\t\tthis.endTimer();\n\t}\n\n\tprocessTakes(player, takingPiece, takenPiece) {\n\t\tthis[player][takingPiece][takenPiece] += 1;\n\t}\n}\nexport default PieceTracker;\n","import BaseTracker from './BaseTracker';\n\nconst pawnTemplate = ['Pa', 'Pb', 'Pc', 'Pd', 'Pe', 'Pf', 'Pg', 'Ph'];\nconst pieceTemplate = ['Ra', 'Nb', 'Bc', 'Qd', 'Ke', 'Bf', 'Ng', 'Rh'];\n\nclass TileStats {\n\tconstructor() {\n\t\tthis.movedTo = 0;\n\t\tthis.wasOn = 0;\n\t\tthis.killedOn = 0;\n\t\tthis.wasKilledOn = 0;\n\t}\n}\n\nclass TileTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('move');\n\t\tthis.tiles = new Array(8);\n\t\tfor (let row = 0; row < 8; row += 1) {\n\t\t\tconst currRow = new Array(8);\n\t\t\tfor (let col = 0; col < 8; col += 1) {\n\t\t\t\tcurrRow[col] = { b: {}, w: {} };\n\t\t\t\tcurrRow[col].b = new TileStats();\n\t\t\t\tcurrRow[col].w = new TileStats();\n\t\t\t\tpawnTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t\tpieceTemplate.forEach((val) => {\n\t\t\t\t\tcurrRow[col].b[val] = new TileStats();\n\t\t\t\t\tcurrRow[col].w[val] = new TileStats();\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.tiles[row] = currRow;\n\t\t}\n\n\t\t// this.alivePieces = {};\n\t\t// pawnTemplate.forEach((val, i) => {\n\t\t// \tthis.alivePieces[`b${val}`] = [1, i];\n\t\t// \tthis.alivePieces[`w${val}`] = [6, i];\n\t\t// });\n\t\t// pieceTemplate.forEach((val, i) => {\n\t\t// \tthis.alivePieces[`b${val}`] = [0, i];\n\t\t// \tthis.alivePieces[`w${val}`] = [7, i];\n\t\t// });\n\t}\n\n\ttrack(moveData) {\n\t\tthis.startTimer();\n\n\t\tconst { to } = moveData;\n\t\tconst { player } = moveData;\n\t\tconst { piece } = moveData;\n\t\tconst { takes } = moveData;\n\t\tconst { castles } = moveData;\n\n\t\t// move\n\t\tif (to[0] !== -1) {\n\t\t\tthis.processMove(to, player, piece);\n\n\t\t\tif (takes.piece !== undefined) {\n\t\t\t\tthis.processTakes(takes.pos, player, piece, takes.piece);\n\t\t\t}\n\n\t\t\t// this.processOccupation();\n\n\t\t\t// castle\n\t\t} else if (castles !== '') {\n\t\t\tconst row = player === 'w' ? 7 : 0;\n\t\t\tlet rook = 'Rh';\n\t\t\tlet tarKingCol = 6;\n\t\t\tlet tarRookCol = 5;\n\t\t\tif (castles === 'O-O-O') {\n\t\t\t\ttarKingCol = 2;\n\t\t\t\ttarRookCol = 3;\n\t\t\t\trook = 'Ra';\n\t\t\t}\n\t\t\tthis.processMove([row, tarKingCol], player, 'Ke');\n\t\t\tthis.processMove([row, tarRookCol], player, rook);\n\n\t\t\t// this.processOccupation();\n\n\t\t\t// game end\n\t\t} else {\n\t\t\t// this.alivePieces = {};\n\t\t\t// for (let i = 0; i < 8; i += 1) {\n\t\t\t// \tthis.alivePieces[`b${pieceTemplate[i]}`] = [0, i];\n\t\t\t// \tthis.alivePieces[`b${pawnTemplate[i]}`] = [1, i];\n\t\t\t// \tthis.alivePieces[`w${pawnTemplate[i]}`] = [6, i];\n\t\t\t// \tthis.alivePieces[`w${pieceTemplate[i]}`] = [7, i];\n\t\t\t// }\n\t\t}\n\t\tthis.endTimer();\n\t}\n\n\tprocessMove(to, player, piece) {\n\t\tif (piece.length > 1) {\n\t\t\tthis.tiles[to[0]][to[1]][player].movedTo += 1;\n\t\t\tthis.tiles[to[0]][to[1]][player][piece].movedTo += 1;\n\t\t\t// this.alivePieces[player + piece] = to;\n\t\t}\n\t}\n\n\tprocessTakes(pos, player, takingPiece, takenPiece) {\n\t\tif (takingPiece.length > 1 && takenPiece.length > 1) {\n\t\t\tconst opPlayer = player === 'w' ? 'b' : 'w';\n\t\t\tthis.tiles[pos[0]][pos[1]][player].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][player][takingPiece].killedOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer].wasKilledOn += 1;\n\t\t\tthis.tiles[pos[0]][pos[1]][opPlayer][takenPiece].wasKilledOn += 1;\n\t\t\t// if (takenPiece.length > 1) {\n\t\t\t// \tdelete this.alivePieces[opPlayer + takenPiece];\n\t\t\t// }\n\t\t}\n\t}\n\n\t// processOccupation() {\n\t// \t// console.log(Object.keys(this.alivePieces.b).length);\n\t// \tObject.keys(this.alivePieces).forEach((val) => {\n\t// \t\tconst pos = this.alivePieces[val];\n\t// \t\tconst player = val.substring(0, 1);\n\t// \t\tconst piece = val.substring(1, 3);\n\t// \t\tthis.tiles[pos[0]][pos[1]][player].wasOn += 1;\n\t// \t\tthis.tiles[pos[0]][pos[1]][player][piece].wasOn += 1;\n\t// \t});\n\t// }\n}\n\nexport default TileTracker;\n","import BaseTracker from './BaseTracker';\n\nclass GameTracker extends BaseTracker {\n\tconstructor() {\n\t\tsuper('game');\n\t\tthis.wins = [0, 0, 0];\n\t\tthis.cntGames = 0;\n\t}\n\n\ttrack(game) {\n\t\tthis.startTimer();\n\t\tthis.cntGames += 1;\n\n\t\tswitch (game.Result) {\n\t\t\tcase '1-0':\n\t\t\t\tthis.wins[0] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '1/2-1/2':\n\t\t\t\tthis.wins[1] += 1;\n\t\t\t\tbreak;\n\n\t\t\tcase '0-1':\n\t\t\t\tthis.wins[2] += 1;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.endTimer();\n\t}\n}\n\nexport default GameTracker;\n","module.exports = require(\"fs\");"],"sourceRoot":""}